	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.3r1 Build 19041558 SN 09003382"
	.compiler_invocation	"ctc --dep-file=0_Src\\4_McHal\\Tricore\\Cpu\\Trap\\.IfxCpu_Trap.o.d --fp-model=c,l,f,z,n,r,S,T -D__CPU__=tc39x -D__CPU_TC39X__ --core=tc1.6.2 --iso=99 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\0_AppSw\\Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\0_AppSw\\Ethernet\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\0_AppSw\\Ethernet\\lwip\\port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\0_AppSw\\Ethernet\\lwip\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\api -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\arpa -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\net -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\sys -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\stdc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\apps -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\priv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\0_AppSw\\Ethernet\\Phy_Dp83825i -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\0_AppSw\\Ethernet\\Phy_Rtl8211f -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\0_AppSw\\UART -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Ccu6\\Icu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmBc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Ccu6\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Ccu6\\TimerWithTrigger -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Ccu6\\TPwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Convctrl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Dma\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Dma\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Dts\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Dts\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Ebu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSpansion -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSt -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Ebu\\Dram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Ebu\\Sram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Ebu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Edsadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Emem\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Eray\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Eray\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Evadc\\Adc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Evadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Fce\\Crc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Fce\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Flash\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Gpt12\\IncrEnc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Gpt12\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Gtm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\In -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Gtm\\Trig -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Hspdm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Hspdm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Hssl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\I2c\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\I2c\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Iom\\Driver -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Iom\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Iom\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Msc\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Msc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Mtu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Pms\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Psi5\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Psi5\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Psi5s\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Psi5s\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiMaster -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiSlave -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Qspi\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Rif\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Rif\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Sdmmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Emmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Sd -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Sent\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Sent\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Smu\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Smu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Spu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Spu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\0_AppSw\\UART -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\0_AppSw\\Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\0_AppSw\\Ethernet\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\0_AppSw\\Ethernet\\lwip\\port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\0_AppSw\\Ethernet\\lwip\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\api -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\arpa -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\net -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\sys -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\stdc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\apps -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\priv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\0_AppSw\\Ethernet\\Phy_Dp83825i -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\_Reg -g2 --make-target=0_Src\\4_McHal\\Tricore\\Cpu\\Trap\\IfxCpu_Trap.o -t4 --language=-gcc,-volatile,+strings,-kanji --default-near-size=8 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o 0_Src\\4_McHal\\Tricore\\Cpu\\Trap\\IfxCpu_Trap.src ..\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap\\IfxCpu_Trap.c"
	.compiler_name		"ctc"
	;source	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap\\IfxCpu_Trap.c'

	
$TC162
	
	.sdecl	'.text.IfxCpu_Trap.IfxCpu_Trap_memoryManagementError',code,cluster('IfxCpu_Trap_memoryManagementError')
	.sect	'.text.IfxCpu_Trap.IfxCpu_Trap_memoryManagementError'
	.align	2
	
	.global	IfxCpu_Trap_memoryManagementError

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	     1  /**
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	     2   * \file IfxCpu_Trap.c
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	     3   * \brief This file contains the APIs for Trap related functions.
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	     4   *
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	     5   *
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	     7   * \copyright Copyright (c) 2012 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	     8   *
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	     9   *
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    11   *
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    13   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    15   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    16   *
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    18   *
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    19   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    20   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    21   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    22   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    23   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    24   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    25   *
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    26   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    27   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    28   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    29   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    30   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    31   * language processor.
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    32   *
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    39   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    40   *
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    41   *
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    42   */
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    43  
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    44  /*******************************************************************************
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    45  **                      Includes                                              **
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    46  *******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    47  #include "IfxCpu_Trap.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    48  #include "Cpu/Std/IfxCpu.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    49  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    50  #include "IfxCpu_reg.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    51  #include "Ifx_Cfg.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    52  #ifdef IFX_CFG_EXTEND_TRAP_HOOKS
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    53  #include "Ifx_Cfg_Trap.h"
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    54  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    55  
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    56  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    57  /*                           Macros                                           */
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    58  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    59  /** \brief Configuration for CpuX enable.
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    60   *
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    61   */
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    62  #ifndef IFX_CFG_CPU_TRAP_TSR_HOOK
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    63  #   define IFX_CFG_CPU_TRAP_TSR_HOOK(trapWatch)          /**< By default macro is empty*/
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    64  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    65  #ifndef IFX_CFG_CPU_TRAP_SYSCALL_CPU0_HOOK
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    66  #   define IFX_CFG_CPU_TRAP_SYSCALL_CPU0_HOOK(trapWatch) ((void)trapWatch) /**< By default macro is empty*/
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    67  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    68  #ifndef IFX_CFG_CPU_TRAP_SYSCALL_CPU1_HOOK
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    69  #   define IFX_CFG_CPU_TRAP_SYSCALL_CPU1_HOOK(trapWatch) ((void)trapWatch) /**< By default macro is empty*/
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    70  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    71  #ifndef IFX_CFG_CPU_TRAP_SYSCALL_CPU2_HOOK
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    72  #   define IFX_CFG_CPU_TRAP_SYSCALL_CPU2_HOOK(trapWatch) ((void)trapWatch) /**< By default macro is empty*/
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    73  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    74  #ifndef IFX_CFG_CPU_TRAP_SYSCALL_CPU3_HOOK
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    75  #   define IFX_CFG_CPU_TRAP_SYSCALL_CPU3_HOOK(trapWatch) ((void)trapWatch) /**< By default macro is empty*/
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    76  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    77  #ifndef IFX_CFG_CPU_TRAP_SYSCALL_CPU4_HOOK
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    78  #   define IFX_CFG_CPU_TRAP_SYSCALL_CPU4_HOOK(trapWatch) ((void)trapWatch) /**< By default macro is empty*/
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    79  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    80  #ifndef IFX_CFG_CPU_TRAP_SYSCALL_CPU5_HOOK
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    81  #   define IFX_CFG_CPU_TRAP_SYSCALL_CPU5_HOOK(trapWatch) ((void)trapWatch) /**< By default macro is empty*/
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    82  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    83  #ifndef IFX_CFG_CPU_TRAP_NMI_HOOK
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    84  #   define IFX_CFG_CPU_TRAP_NMI_HOOK(trapWatch)          ((void)trapWatch) /**< By default NMI macro is empty*/
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    85  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    86  #ifndef IFX_CFG_CPU_TRAP_MME_HOOK
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    87  #   define IFX_CFG_CPU_TRAP_MME_HOOK(trapWatch)    ((void)trapWatch)      /**< By default memory Management Error macro is empty*/
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    88  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    89  #ifndef IFX_CFG_CPU_TRAP_IPE_HOOK
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    90  #   define IFX_CFG_CPU_TRAP_IPE_HOOK(trapWatch)    ((void)trapWatch)      /**< By default internal Protection Error macro is empty*/
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    91  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    92  #ifndef IFX_CFG_CPU_TRAP_IE_HOOK
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    93  #   define IFX_CFG_CPU_TRAP_IE_HOOK(trapWatch)     ((void)trapWatch)      /**< By default instruction Error macro is empty*/
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    94  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    95  #ifndef IFX_CFG_CPU_TRAP_CME_HOOK
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    96  #   define IFX_CFG_CPU_TRAP_CME_HOOK(trapWatch)    ((void)trapWatch)      /**< By default context Management Error macro is empty*/
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    97  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    98  #ifndef IFX_CFG_CPU_TRAP_BE_HOOK
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	    99  #   define IFX_CFG_CPU_TRAP_BE_HOOK(trapWatch)     ((void)trapWatch)      /**< By default bus Error macro is empty*/
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   100  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   101  #ifndef IFX_CFG_CPU_TRAP_ASSERT_HOOK
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   102  #   define IFX_CFG_CPU_TRAP_ASSERT_HOOK(trapWatch) ((void)trapWatch)     /**< By default assertion is empty*/
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   103  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   104  
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   105  #ifndef IFX_CFG_CPU_TRAP_DEBUG
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   106   #define IFX_CFG_CPU_TRAP_DEBUG __debug()
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   107  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   108  /*******************************************************************************
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   109  **                      variables                                     **
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   110  *******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   111  
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   112  /*******************************************************************************
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   113  **                      Function definitions                          **
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   114  *******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   115  IFX_INLINE IfxCpu_Trap IfxCpu_Trap_extractTrapInfo(uint8 trapClass, uint32 tin)
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   116  {
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   117      IfxCpu_Trap trapInfo;
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   118      trapInfo.tAddr  = (unsigned int)__getA11();
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   119      trapInfo.tClass = trapClass;
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   120      trapInfo.tId    = tin;
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   121      trapInfo.tCpu   = IfxCpu_getCoreId();
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   122      return trapInfo;
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   123  }
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   124  
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   125  
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   126  void IfxCpu_Trap_memoryManagementError(uint32 tin)
; Function IfxCpu_Trap_memoryManagementError
.L3:
IfxCpu_Trap_memoryManagementError:	.type	func
	sub.a	a10,#8
.L159:

; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   348      __asm("mov.aa %0, a11": "=a" (res) : :"a11");      (inlined)
	
	mov.aa a15, a11
.L355:
	
.L403:
	mov.d	d0,a15
.L169:
	insert	d1,d1,#0,#8,#8
.L404:
	insert	d1,d1,d4,#0,#8
.L174:

; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    42   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    43   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    44   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    45   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    46   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    47   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    48   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    49   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    50   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    51   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    52   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    53   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    54   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    55   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    56   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    57   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    58   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    59  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    60  #ifndef IFXCPU_H
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    61  #define IFXCPU_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    62  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    63  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    64  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    65  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    66  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    67  #include "_Impl/IfxCpu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    68  #include "IfxSrc_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    69  #include "IfxScu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    70  #include "IfxStm_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    71  #include "_Impl/IfxScu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    72  #include "_Utilities/Ifx_Assert.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    73  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    74  #include "Scu/Std/IfxScuCcu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    75  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    76  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    77  /*-----------------------------------Macros-----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    78  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    79  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    80  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    81   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    82   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    83   * the CPU number.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    84   * Example usage:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    85   *  \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    86   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    87   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    88   *  \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    89   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    90  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    91  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    92  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    93   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    94   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    95   * the CPU number.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    96   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    97   *   Example usage:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    98   *   \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    99   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   100   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   101   *   \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   102   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   103  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   104  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   105  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   106  /*------------------------------Type Definitions------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   107  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   108  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   109  /** \brief Lock type Spin lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   110   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   111  typedef unsigned int IfxCpu_spinLock;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   112  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   113  /** \brief Lock type Mutex lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   114   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   115  typedef unsigned int IfxCpu_mutexLock;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   116  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   117  /** \brief Event used for synchronisation.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   118   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   119  typedef unsigned int IfxCpu_syncEvent;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   120  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   121  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   122  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   123  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   124  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   125  /** \addtogroup IfxLld_Cpu_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   126   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   127  /** \brief Enumeration for the Cpu mode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   128   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   129  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   130  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   131      IfxCpu_CoreMode_halt,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   132      IfxCpu_CoreMode_run,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   133      IfxCpu_CoreMode_idle,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   134      IfxCpu_CoreMode_sleep,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   135      IfxCpu_CoreMode_stby,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   136      IfxCpu_CoreMode_unknown
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   137  } IfxCpu_CoreMode;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   138  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   139  /** \brief Performance conunter modes
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   140   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   141  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   142  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   143      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   144      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   145  } IfxCpu_CounterMode;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   147  /** \brief Overlay Address Mask: determines the overlay block size and the bits used for address comparison and translation
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   148   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   149  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   150  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   151      IfxCpu_OverlayAddressMask_32byte  = 0xFFF,  /**< \brief 32 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   152      IfxCpu_OverlayAddressMask_64byte  = 0xFFE,  /**< \brief 64 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   153      IfxCpu_OverlayAddressMask_128byte = 0xFFC,  /**< \brief 128 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   154      IfxCpu_OverlayAddressMask_256byte = 0xFF8,  /**< \brief 256 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   155      IfxCpu_OverlayAddressMask_512byte = 0xFF0,  /**< \brief 512 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   156      IfxCpu_OverlayAddressMask_1KB     = 0xFE0,  /**< \brief 1K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   157      IfxCpu_OverlayAddressMask_2KB     = 0xFC0,  /**< \brief 2K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   158      IfxCpu_OverlayAddressMask_4KB     = 0xF80,  /**< \brief 4K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   159      IfxCpu_OverlayAddressMask_8KB     = 0xF00,  /**< \brief 8K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   160      IfxCpu_OverlayAddressMask_16KB    = 0xE00,  /**< \brief 16K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   161      IfxCpu_OverlayAddressMask_32KB    = 0xC00,  /**< \brief 32K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   162      IfxCpu_OverlayAddressMask_64KB    = 0x800,  /**< \brief 64K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   163      IfxCpu_OverlayAddressMask_128KB   = 0x0     /**< \brief 128K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   164  } IfxCpu_OverlayAddressMask;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   165  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   166  /** \brief Selects overlay memory used for redirection
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   167   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   168  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   169  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   170      IfxCpu_OverlayMemorySelect_core0DsprPspr = 0,  /**< \brief Redirection to Core 0 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   171      IfxCpu_OverlayMemorySelect_core1DsprPspr = 1,  /**< \brief Redirection to Core 1 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   172      IfxCpu_OverlayMemorySelect_core2DsprPspr = 2,  /**< \brief Redirection to Core 2 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   173      IfxCpu_OverlayMemorySelect_core3DsprPspr = 3,  /**< \brief Redirection to Core 3 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   174      IfxCpu_OverlayMemorySelect_core4DsprPspr = 4,  /**< \brief Redirection to Core 4 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   175      IfxCpu_OverlayMemorySelect_core5DsprPspr = 5,  /**< \brief Redirection to Core 5 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   176      IfxCpu_OverlayMemorySelect_lmu           = 8,  /**< \brief Redirection to LMU memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   177      IfxCpu_OverlayMemorySelect_emem          = 9,  /**< \brief Redirection to EMEM memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   178      IfxCpu_OverlayMemorySelect_ebu           = 10  /**< \brief Redirection to EBU memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   179  } IfxCpu_OverlayMemorySelect;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   180  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   181  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   182  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   183      IfxCpu_ResetStatus_notCpuReset   = 0,  /**< \brief No Kernel Reset was executed */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   184      IfxCpu_ResetStatus_cpuResetBySmu = 1,  /**< \brief Kernel reset was requested by hardware since last clear (SMU) */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   185      IfxCpu_ResetStatus_cpuResetBySw  = 2   /**< \brief Kernel reset was requested by software since last clear (by writing KRST0.RST=1 and KRST1.RST=1) */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   186  } IfxCpu_ResetStatus;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   187  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   188  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   189  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   190  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   191  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   192  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   193  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   194  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   195   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   196  /** \brief counter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   197   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   198  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   199  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   200      uint32  counter;        /**< \brief Counter value */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   201      boolean overlfow;       /**< \brief sticky overlfow */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   202  } IfxCpu_Counter;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   203  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   204  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   205  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   206  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   207   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   208  /** \brief Performance counter result
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   209   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   210  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   211  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   212      IfxCpu_Counter instruction;       /**< \brief Instruction counter */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   213      IfxCpu_Counter clock;             /**< \brief CPU clock counter */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   214      IfxCpu_Counter counter1;          /**< \brief Multi counter 1 */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   215      IfxCpu_Counter counter2;          /**< \brief Multi counter 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   216      IfxCpu_Counter counter3;          /**< \brief Multi counter 3 */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   217  } IfxCpu_Perf;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   218  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   219  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   221  /** \addtogroup IfxLld_Cpu_Std_Core
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   222   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   223  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   224  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   225  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   226  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   227  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   228  /** \brief API to get the address for CPU HW module register memory map
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   229   * \param cpu Resource index of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   230   * \return CPU module register address
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   231   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   232  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   233  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   234  /** \brief API to get core id of the CPU of the caller.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   235   * Caution: Core id of the cpu's may not be continguous and shouldn't be used to index cpu.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   236   * Use IfxCpu_getCoreIndex() to get cpu no.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   237   * \return Resource index of the CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   238   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   239  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   240  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   241  /** \brief API to get cpu index of the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   242   * Note: This api can be used whereever cpu no/index is needed.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   243   * \return Resource index of the CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   244   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   245  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   246  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   247  /** \brief API to initialize the context save area of the CPU where this is called.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   248   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   249   * This API can initialize the CSA of the host CPU where this API is called. This API
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   250   * shall not be used to initialize the CSA of another CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   251   * \param csaBegin Pointer to start of context save area
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   252   * \param csaEnd Pointer to end of context save area
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   253   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   254   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   255  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   256  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   257  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   258   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   259   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   260  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   261  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   262  /** \brief Triggers Software Reset
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   263   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   264   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   265  IFX_INLINE void IfxCpu_triggerSwReset(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   266  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   267  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   268  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   269  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   271  /** \brief API to get current mode of CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   272   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   273   * \return Current mode of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   274   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   275  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   276  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   277  /** \brief API to get current mode of CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   278   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   279   * \return Resource index of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   280   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   281  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   282  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   283  /** \brief API to set mode of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   284   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   285   * \param mode CPU mode to be set by this API
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   286   * \return Success status of the activity (setting the core mode).
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   287   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   288   * \retval FALSE: If the activity can't be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   289   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   290  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   291  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   292  /** \brief API to set the program counter for the CPU specified.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   293   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   294   * \param programCounter Program counter value to be set
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   295   * \return success status of the activity (setting program counter value).
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   296   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   297   * \retval FALSE: If the activity can't be performed
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   298   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   299  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   300  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   301  /** \brief API to set the program counter for the CPU specified and start the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   302   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   303   * \param programCounter Program counter value to start the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   304   * \return success status of the activity (setting program counter value).
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   305   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   306   * \retval FALSE: If the activity can't be performed
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   307   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   308  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   309  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   310  /** \brief To request reset of a particular core, given by coreId
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   311   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   312   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   313  IFX_EXTERN void IfxCpu_triggerCpuReset(IfxCpu_ResourceCpu coreIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   314  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   315  /** \brief Retrieve the cause of reset(no reset, hardware(SMU) or software) since last clear by reading KRST0.RSTSTAT and clear it.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   316   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   317  IFX_EXTERN IfxCpu_ResetStatus IfxCpu_getCpuResetStatus(IfxCpu_ResourceCpu coreIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   318  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   319  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   320  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   321  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   322   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   323  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   324  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   325  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   326  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   327  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   328  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   329   * This API provides the status of CPU where this API is called
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   330   * \return Status of global interrupt enable bit.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   331   * \retval TRUE: Global interrupts enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   332   * \retval FALSE: Global interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   333   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   334  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   335  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   336  /** \brief API to disable global interrupt and return the previous status.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   337   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   338   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   339   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   340   * \return Previous status of global interrupt enable bit.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   341   * \retval TRUE: Previously, global interrupts enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   342   * \retval FALSE: Previously, global interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   343   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   344  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   345  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   346  /** \brief API to enable global interrupt.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   347   * This API simply enables the global interrupt.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   348   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   349   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   350  IFX_INLINE void IfxCpu_enableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   351  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   352  /** \brief Disable the Global Interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   353   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   354   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   355  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   356  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   357  /** \brief API to restore global interrupt with that of the passed parameter.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   358   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   359   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   360   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   361   * \param enabled Previous status of the global interrupt enable bit
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   362   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   363   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   364  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   365  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   366  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   367  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   368  /** \addtogroup IfxLld_Cpu_Std_Cache
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   369   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   370  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   371  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   372  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   373  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   374  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   375  /** \brief API to enable/ disable the data cacheability for selected segments
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   376   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   377   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   378   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   379   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   380   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   381   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   382  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   383  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   384  /** \brief API to enable/ disable the instruction cacheability for selected segments
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   385   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   386   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   387   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   388   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   389   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   390   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   391  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   392  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   393  /** \brief API to invalidate the program cache
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   394   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   395   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   396  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   397  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   398  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   399   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   400   * \return Status TRUE/FALSE
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   401   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   402  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   403  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   404  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   405   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   406   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   407   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   408   * \param enable Command to enable or bypass the data cache
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   409   * TRUE: Enable the data cache.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   410   * FALSE: Bypass the data cache.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   411   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   412   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   413  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   414  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   415  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   416   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   417   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   418   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   419   * \param enable Command to enable or bypass the program cache.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   420   * TRUE: Enable the program cache.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   421   * FALSE: Bypass the program cache
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   422   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   423   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   424  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   425  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   426  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   427  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   428  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   429   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   430  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   431  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   432  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   433  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   434  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   435  /** \brief API to read the clock counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   436   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   437   * This API can be used to read clock counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   438   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   439   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   440   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   441  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   442  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   443  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   444   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   445   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   446   * It cannot be used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   447   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   448   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   449   * reading the counter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   450   * \return Status of sticky overflow bit.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   451   * \retval TRUE: Sticky overflow bit is set.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   452   * \retval FALSE: Sticky overflow bit is reset
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   453   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   454  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   455  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   456  /** \brief API to read the instruction counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   457   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   458   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   459   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   460   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   461   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   462  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   463  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   464  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   465   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   466   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   467   * It cannot be used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   468   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   469   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   470   * reading the counter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   471   * \return Status of sticky overflow bit.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   472   * \retval TRUE: Sticky overflow bit is set.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   473   * \retval FALSE: Sticky overflow bit is reset
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   474   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   475  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   476  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   477  /** \brief API to read the performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   478   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   479   * \return counter value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   480   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   481  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint16 address);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   482  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   483  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   484   * This is generic function to get sticky overflow bit of any performance counters
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   485   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   486   * \return Status
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   487   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   488  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint16 address);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   489  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   490  /** \brief Reset and start instruction, clock and multi counters
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   491   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   492   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   493   * \param mode Counter mode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   494   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   495   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   496  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   497  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   498  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   500   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   501   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   502   * \param enable enable Command to enable or disable the performance counter.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   503   * TRUE: Enable the performance counter.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   504   * FALSE: Disable the performance counter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   505   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   506   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   507  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   508  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   509  #if !((defined(__cplusplus)) && (defined(__TASKING__)))
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   510  /** \brief Stop instruction and clock counters, return their values
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   511   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   512   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   513   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   514   * \return Performance counter result
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   515   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   516  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   517  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   518  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   519  /** \brief API to update clock counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   520   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   521   * This API can be used to update clock counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   522   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   523   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   524   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   525   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   526  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   527  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   528  /** \brief API to update Instruction counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   529   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   530   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   531   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   532   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   533   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   534   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   535  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   536  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   537  /** \brief API to update performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   538   * This is generic function to update any of the performance counters
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   539   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   540   * \param count Count
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   541   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   542   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   543  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   544  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   545  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   546  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   547  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   548   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   549  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   550  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   551  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   552  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   553  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   554  /** \brief API to acquire the mutex (binary semaphore).
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   555   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   556   * This API can be used to acquire/get the mutex.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   557   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   558   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   559   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   560   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   561   *    IfxCpu_mutexLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   562   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   563   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   564   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   565   *      IfxCpu_releaseMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   566   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   567   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   568   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   569   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   570  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   571  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   572  /** \brief API to unlock the mutex .
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   573   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   574   * This API can be used to unlock the previously acquired mutex
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   575   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   576   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   577   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   578   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   579   *    IfxCpu_mutexLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   580   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   581   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   582   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   583   *      IfxCpu_releaseMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   584   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   585   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   586   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   587   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   588  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   589  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   590  /** \brief API to unlock the resource .
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   591   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   592   * This API can be used to unlock the previously acquired lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   593   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   594   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   595   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   596  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   597  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   598  /** \brief API to lock the resource in spin mode with the given timeout.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   599   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   600   * This API can be used to spin lock for the lock for the given timeout period.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   601   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   602   * \param timeoutCount loop counter value used for timeout to acquire lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   603   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   604   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   605   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   606   *    IfxCpu_spinLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   607   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   608   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   609   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   610   *      IfxCpu_resetSpinLock(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   611   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   612   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   613   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   614   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   615  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   616  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   617  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   618  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   619  /** \addtogroup IfxLld_Cpu_Std_Utility
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   620   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   621  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   622  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   623  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   624  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   625  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   626  /** \brief This function disables the overlay memory.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   627   * \param cpu Core no
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   628   * \param overlayBlock Overlay Block
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   629   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   630   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   631  IFX_EXTERN void IfxCpu_disableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   632  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   633  /** \brief This function configures and enables the overlay memory.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   634   * Note:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   635   * The data overlay provides the capability to redirect selected data accesses to the Overlay memory. Data accesses made by the TriCore to Program Flash, Online Data Acquisition space, or EBU space can be redirected. Overlay memory may be located in the Local Memory (if present), in the Emulation Memory (Emulation Device only), or in the EBU space,or in the DPSR/PSPR memory.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   636   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   637   * How the overlay Memory works?
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   638   * Any data access to segment 8 or segment A is checked against all the activated overlay blocks. For each activated overlay block, address bits 27..5 are compared with the target base address , and this bit-wise comparison is qualified by the content of address mask. Address bits participate in the comparison if the corresponding mask bits are set to one. The access is redirected, if all the address bits selected by mask equal to the corresponding bits in target address.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   639   * The address for redirection is constructed as follows:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   640   * 1. Address bits 31..22 are set according to the overlay memory selection and the cache-ability of the original address.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   641   * 2. For address bits 21..5:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   642   * - If the corresponding address mask bit is set, the address bit value is taken from overlay base address .
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   643   * - If the corresponding address mask bit is cleared, the address bit value is taken from the original address.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   644   * 3. Address bits 4..0 are always taken directly from the original address.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   645   * If there is no redirection, the original address is used to perform the access.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   646   * Target address ranges for activated overlay blocks should not overlap or an exception may occur.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   647   * \param cpu Core no
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   648   * \param overlayBlock Overlay Block
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   649   * \param overlayMemorySelect Overlay Memory Select
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   650   * \param overlayAddressMask overlay Address Mask
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   651   * \param targetBaseAddress Target Base address (i.e Source address to be re-directed)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   652   * \param overlayBaseAddress Overlay or Re-directed Base address (Bits 21..5 of the base address the overlay memory block in the overlay memory)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   653   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   654   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   655  IFX_EXTERN void IfxCpu_enableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock, IfxCpu_OverlayMemorySelect overlayMemorySelect, IfxCpu_OverlayAddressMask overlayAddressMask, uint32 targetBaseAddress, uint32 overlayBaseAddress);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   656  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   657  /** \brief API to get random value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   658   * \param seed Pointer to seed value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   659   * \return random value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   660   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   661  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   662  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   663  /** \brief API to get random value with in the range
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   664   * \param seed Pointer to seed value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   665   * \param min minimum range value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   666   * \param max maximum range value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   667   * \return random value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   668   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   669  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   670  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   671  /** \brief This function waits till all the cores have set their corresponding bits in the event. This function along with
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   672   * IfxCpu_emitEvent() are used to achieve the synchronisation between the configured cores. By default
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   673   * "IFXCPU_CFG_ALLCORE_DONE" macro defined for all the cores. In case the user wants to check for
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   674   * synchronisation among the required cores, the macro can be redefined with the value accroing to the
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   675   * CORE_ID register.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   676   * The IfxCpu_emitEvent() is to be used in the Main functions of the Cores where the user wants to check for synchronisation.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   677   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   678   * e.g:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   679   * 1. Check for synchronisation between core 0 and core 5
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   680   * # define 0x41U
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   681   * 2. Check for synchronisation between core 0 to core 5
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   682   * # define 0x5FU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   683   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   684   * Note:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   685   * Core id values read from CORE_ID register will be as shown below. The value indicates the position of the bit needs to be set while building the macro.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   686   * Core 0: 0
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   687   * Core 1: 1
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   688   * Core 2: 2
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   689   * Core 3: 3
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   690   * Core 4: 4
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   691   * Core 5: 6
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   692   * \param event Synchronous Event
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   693   * \param timeoutMilliSec timeout in millisec
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   694   * \return Error condition
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   695   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   696   * The functions IfxCpu_waitEvent and IfxCpu_emitEvent are used to achieve synchronisation between all cores (i.e individual cores wait till all cores have reached the synchronisation point). The IfxCpu_waitEvent returns 1 incase a timeout occurs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   697   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   698   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   699   * // Global variable. preferably located in  shared memory.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   700   * IfxCpu_syncEvent event;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   701   * boolean errorVal;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   702   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   703   * // Below code should be repeated in Each core
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   704   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   705   * // Upon reaching Synchonisation point
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   706   * IfxCpu_emitEvent(&event);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   707   * errorVal = IfxCpu_waitEvent(&event, timeoutMilliSec); // timeoutMilliSec is timeout value to wait
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   708   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   709   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   710   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   711   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   712  IFX_EXTERN boolean IfxCpu_waitEvent(IfxCpu_syncEvent *event, uint32 timeoutMilliSec);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   713  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   714  /** \brief This function sets a bit corresponding to the core in the event.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   715   * \param event Synchronous Event
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   716   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   717   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   718   * A coding example can be found in \ref IfxCpu_waitEvent
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   719   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   720   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   721  IFX_EXTERN void IfxCpu_emitEvent(IfxCpu_syncEvent *event);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   722  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   723  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   724  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   725  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   726  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   727  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   728  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   729  /** \brief Sets all CPUs to Idle mode except the Master CPU,index of which is given as the parameter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   730   * \param masterCpu Master CPU Index- All except this will be set to Idle Mode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   731   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   732   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   733  IFX_EXTERN void IfxCpu_setAllIdleExceptMasterCpu(IfxCpu_ResourceCpu masterCpu);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   734  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   735  /** \brief Disables interrupts for all CPUs except the Master CPU,index of which is given as the parameter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   736   * \param masterCpu Master CPU Index- All except this will have their interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   737   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   738   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   739  IFX_EXTERN void IfxCpu_disableInterruptsAllExceptMaster(IfxCpu_ResourceCpu masterCpu);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   740  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   741  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   742  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   743  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   744  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   745  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   746  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   747      Ifx_CPU_ICR reg;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   748      reg.U = __mfcr(CPU_ICR);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   749      return reg.B.IE != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   750  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   751  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   752  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   753  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   754  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   755      boolean enabled;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   756      enabled = IfxCpu_areInterruptsEnabled();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   757      __disable();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   758      __nop();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   759      return enabled;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   760  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   761  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   762  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   763  IFX_INLINE void IfxCpu_enableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   764  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   765      __enable();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   766  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   767  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   768  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   769  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   770  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   771      uint32 cpu_pmaVal;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   772      uint16 checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   773      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   774      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   775  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   776      /*resolve the restrictions*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   777      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   778      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xC);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   779  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   780      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   781      {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   782          segmentNumberMask |= checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   783      }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   784  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   785      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   786  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   787      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   788  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   789      /*The CPU_PMA registers are ENDINIT protected*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   790      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   791      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   792      /*Write to PMA0 register for selecting the cacheability for data cache*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   793      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   794      __mtcr(CPU_PMA0, cpu_pmaVal);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   795      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   796      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   797  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   798  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   799  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   800  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   801  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   802      uint32 cpu_pmaVal;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   803      uint16 checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   804      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   805      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   806  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   807      /*resolve the restrictions*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   808      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   809      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xD);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   810  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   811      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   812      {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   813          segmentNumberMask |= checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   814      }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   815  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   816      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   817  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   818      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   819  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   820      /*The CPU_PMA registers are ENDINIT protected*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   821      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   822      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   823      /*Write to PMA1 register for selecting the cacheability for data cache*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   824      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   825      __mtcr(CPU_PMA1, cpu_pmaVal);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   826      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   827      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   828  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   829  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   830  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   831  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   832  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   833      __disable();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   834      __nop();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   835  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   836  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   837  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   838  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   839  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   840      Ifx_CPU *module;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   841  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   842      if (cpu < IfxCpu_ResourceCpu_none)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   843      {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   844          module = (Ifx_CPU *)IfxCpu_cfg_indexMap[cpu].module;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   845      }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   846      else
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   847      {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   848          module = NULL_PTR;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   849      }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   850  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   851      return module;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   852  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   853  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   854  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   855  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   856  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   857      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   858  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   859  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   860  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   861  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   862  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   863      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   864  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   865  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   866  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   867  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   868  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   869      Ifx_CPU_CORE_ID reg;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   870      reg.U = __mfcr(CPU_CORE_ID);
	mfcr	d15,#65052
.L356:

; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   871      return (IfxCpu_Id)reg.B.CORE_ID;
	fcall	.cocofun_2
.L175:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   127  {
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   128      volatile IfxCpu_Trap trapWatch;
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   129      trapWatch = IfxCpu_Trap_extractTrapInfo(IfxCpu_Trap_Class_memoryManagement, tin);
	st.d	[a10]0,e0
.L160:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   130      IFX_CFG_CPU_TRAP_MME_HOOK(trapWatch);
	ld.d	e0,[a10]0
.L358:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   131      IFX_CFG_CPU_TRAP_DEBUG;
	debug
.L405:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   132      __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
	rslcx
.L406:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   133      __asm("rfe");
	rfe
.L407:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   134  }
	ret
.L153:
	
__IfxCpu_Trap_memoryManagementError_function_end:
	.size	IfxCpu_Trap_memoryManagementError,__IfxCpu_Trap_memoryManagementError_function_end-IfxCpu_Trap_memoryManagementError
.L52:
	; End of function
	
	.sdecl	'.text.IfxCpu_Trap..cocofun_2',code,cluster('.cocofun_2')
	.sect	'.text.IfxCpu_Trap..cocofun_2'
	.align	2
; Function .cocofun_2
.L5:
.cocofun_2:	.type	func
; Function body .cocofun_2, coco_iter:0
	extr.u	d2,d1,#16,#8
.L574:

; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    42   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    43   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    44   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    45   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    46   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    47   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    48   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    49   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    50   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    51   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    52   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    53   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    54   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    55   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    56   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    57   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    58   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    59  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    60  #ifndef IFXCPU_H
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    61  #define IFXCPU_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    62  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    63  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    64  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    65  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    66  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    67  #include "_Impl/IfxCpu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    68  #include "IfxSrc_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    69  #include "IfxScu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    70  #include "IfxStm_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    71  #include "_Impl/IfxScu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    72  #include "_Utilities/Ifx_Assert.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    73  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    74  #include "Scu/Std/IfxScuCcu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    75  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    76  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    77  /*-----------------------------------Macros-----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    78  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    79  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    80  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    81   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    82   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    83   * the CPU number.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    84   * Example usage:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    85   *  \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    86   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    87   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    88   *  \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    89   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    90  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    91  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    92  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    93   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    94   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    95   * the CPU number.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    96   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    97   *   Example usage:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    98   *   \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    99   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   100   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   101   *   \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   102   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   103  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   104  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   105  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   106  /*------------------------------Type Definitions------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   107  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   108  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   109  /** \brief Lock type Spin lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   110   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   111  typedef unsigned int IfxCpu_spinLock;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   112  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   113  /** \brief Lock type Mutex lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   114   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   115  typedef unsigned int IfxCpu_mutexLock;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   116  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   117  /** \brief Event used for synchronisation.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   118   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   119  typedef unsigned int IfxCpu_syncEvent;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   120  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   121  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   122  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   123  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   124  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   125  /** \addtogroup IfxLld_Cpu_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   126   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   127  /** \brief Enumeration for the Cpu mode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   128   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   129  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   130  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   131      IfxCpu_CoreMode_halt,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   132      IfxCpu_CoreMode_run,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   133      IfxCpu_CoreMode_idle,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   134      IfxCpu_CoreMode_sleep,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   135      IfxCpu_CoreMode_stby,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   136      IfxCpu_CoreMode_unknown
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   137  } IfxCpu_CoreMode;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   138  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   139  /** \brief Performance conunter modes
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   140   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   141  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   142  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   143      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   144      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   145  } IfxCpu_CounterMode;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   147  /** \brief Overlay Address Mask: determines the overlay block size and the bits used for address comparison and translation
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   148   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   149  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   150  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   151      IfxCpu_OverlayAddressMask_32byte  = 0xFFF,  /**< \brief 32 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   152      IfxCpu_OverlayAddressMask_64byte  = 0xFFE,  /**< \brief 64 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   153      IfxCpu_OverlayAddressMask_128byte = 0xFFC,  /**< \brief 128 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   154      IfxCpu_OverlayAddressMask_256byte = 0xFF8,  /**< \brief 256 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   155      IfxCpu_OverlayAddressMask_512byte = 0xFF0,  /**< \brief 512 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   156      IfxCpu_OverlayAddressMask_1KB     = 0xFE0,  /**< \brief 1K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   157      IfxCpu_OverlayAddressMask_2KB     = 0xFC0,  /**< \brief 2K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   158      IfxCpu_OverlayAddressMask_4KB     = 0xF80,  /**< \brief 4K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   159      IfxCpu_OverlayAddressMask_8KB     = 0xF00,  /**< \brief 8K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   160      IfxCpu_OverlayAddressMask_16KB    = 0xE00,  /**< \brief 16K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   161      IfxCpu_OverlayAddressMask_32KB    = 0xC00,  /**< \brief 32K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   162      IfxCpu_OverlayAddressMask_64KB    = 0x800,  /**< \brief 64K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   163      IfxCpu_OverlayAddressMask_128KB   = 0x0     /**< \brief 128K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   164  } IfxCpu_OverlayAddressMask;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   165  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   166  /** \brief Selects overlay memory used for redirection
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   167   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   168  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   169  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   170      IfxCpu_OverlayMemorySelect_core0DsprPspr = 0,  /**< \brief Redirection to Core 0 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   171      IfxCpu_OverlayMemorySelect_core1DsprPspr = 1,  /**< \brief Redirection to Core 1 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   172      IfxCpu_OverlayMemorySelect_core2DsprPspr = 2,  /**< \brief Redirection to Core 2 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   173      IfxCpu_OverlayMemorySelect_core3DsprPspr = 3,  /**< \brief Redirection to Core 3 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   174      IfxCpu_OverlayMemorySelect_core4DsprPspr = 4,  /**< \brief Redirection to Core 4 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   175      IfxCpu_OverlayMemorySelect_core5DsprPspr = 5,  /**< \brief Redirection to Core 5 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   176      IfxCpu_OverlayMemorySelect_lmu           = 8,  /**< \brief Redirection to LMU memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   177      IfxCpu_OverlayMemorySelect_emem          = 9,  /**< \brief Redirection to EMEM memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   178      IfxCpu_OverlayMemorySelect_ebu           = 10  /**< \brief Redirection to EBU memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   179  } IfxCpu_OverlayMemorySelect;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   180  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   181  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   182  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   183      IfxCpu_ResetStatus_notCpuReset   = 0,  /**< \brief No Kernel Reset was executed */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   184      IfxCpu_ResetStatus_cpuResetBySmu = 1,  /**< \brief Kernel reset was requested by hardware since last clear (SMU) */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   185      IfxCpu_ResetStatus_cpuResetBySw  = 2   /**< \brief Kernel reset was requested by software since last clear (by writing KRST0.RST=1 and KRST1.RST=1) */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   186  } IfxCpu_ResetStatus;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   187  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   188  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   189  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   190  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   191  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   192  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   193  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   194  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   195   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   196  /** \brief counter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   197   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   198  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   199  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   200      uint32  counter;        /**< \brief Counter value */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   201      boolean overlfow;       /**< \brief sticky overlfow */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   202  } IfxCpu_Counter;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   203  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   204  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   205  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   206  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   207   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   208  /** \brief Performance counter result
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   209   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   210  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   211  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   212      IfxCpu_Counter instruction;       /**< \brief Instruction counter */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   213      IfxCpu_Counter clock;             /**< \brief CPU clock counter */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   214      IfxCpu_Counter counter1;          /**< \brief Multi counter 1 */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   215      IfxCpu_Counter counter2;          /**< \brief Multi counter 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   216      IfxCpu_Counter counter3;          /**< \brief Multi counter 3 */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   217  } IfxCpu_Perf;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   218  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   219  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   221  /** \addtogroup IfxLld_Cpu_Std_Core
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   222   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   223  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   224  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   225  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   226  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   227  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   228  /** \brief API to get the address for CPU HW module register memory map
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   229   * \param cpu Resource index of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   230   * \return CPU module register address
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   231   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   232  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   233  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   234  /** \brief API to get core id of the CPU of the caller.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   235   * Caution: Core id of the cpu's may not be continguous and shouldn't be used to index cpu.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   236   * Use IfxCpu_getCoreIndex() to get cpu no.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   237   * \return Resource index of the CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   238   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   239  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   240  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   241  /** \brief API to get cpu index of the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   242   * Note: This api can be used whereever cpu no/index is needed.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   243   * \return Resource index of the CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   244   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   245  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   246  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   247  /** \brief API to initialize the context save area of the CPU where this is called.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   248   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   249   * This API can initialize the CSA of the host CPU where this API is called. This API
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   250   * shall not be used to initialize the CSA of another CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   251   * \param csaBegin Pointer to start of context save area
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   252   * \param csaEnd Pointer to end of context save area
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   253   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   254   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   255  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   256  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   257  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   258   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   259   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   260  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   261  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   262  /** \brief Triggers Software Reset
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   263   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   264   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   265  IFX_INLINE void IfxCpu_triggerSwReset(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   266  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   267  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   268  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   269  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   271  /** \brief API to get current mode of CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   272   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   273   * \return Current mode of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   274   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   275  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   276  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   277  /** \brief API to get current mode of CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   278   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   279   * \return Resource index of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   280   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   281  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   282  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   283  /** \brief API to set mode of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   284   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   285   * \param mode CPU mode to be set by this API
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   286   * \return Success status of the activity (setting the core mode).
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   287   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   288   * \retval FALSE: If the activity can't be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   289   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   290  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   291  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   292  /** \brief API to set the program counter for the CPU specified.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   293   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   294   * \param programCounter Program counter value to be set
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   295   * \return success status of the activity (setting program counter value).
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   296   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   297   * \retval FALSE: If the activity can't be performed
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   298   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   299  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   300  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   301  /** \brief API to set the program counter for the CPU specified and start the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   302   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   303   * \param programCounter Program counter value to start the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   304   * \return success status of the activity (setting program counter value).
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   305   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   306   * \retval FALSE: If the activity can't be performed
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   307   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   308  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   309  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   310  /** \brief To request reset of a particular core, given by coreId
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   311   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   312   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   313  IFX_EXTERN void IfxCpu_triggerCpuReset(IfxCpu_ResourceCpu coreIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   314  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   315  /** \brief Retrieve the cause of reset(no reset, hardware(SMU) or software) since last clear by reading KRST0.RSTSTAT and clear it.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   316   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   317  IFX_EXTERN IfxCpu_ResetStatus IfxCpu_getCpuResetStatus(IfxCpu_ResourceCpu coreIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   318  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   319  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   320  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   321  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   322   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   323  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   324  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   325  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   326  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   327  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   328  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   329   * This API provides the status of CPU where this API is called
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   330   * \return Status of global interrupt enable bit.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   331   * \retval TRUE: Global interrupts enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   332   * \retval FALSE: Global interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   333   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   334  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   335  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   336  /** \brief API to disable global interrupt and return the previous status.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   337   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   338   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   339   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   340   * \return Previous status of global interrupt enable bit.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   341   * \retval TRUE: Previously, global interrupts enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   342   * \retval FALSE: Previously, global interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   343   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   344  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   345  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   346  /** \brief API to enable global interrupt.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   347   * This API simply enables the global interrupt.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   348   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   349   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   350  IFX_INLINE void IfxCpu_enableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   351  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   352  /** \brief Disable the Global Interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   353   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   354   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   355  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   356  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   357  /** \brief API to restore global interrupt with that of the passed parameter.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   358   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   359   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   360   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   361   * \param enabled Previous status of the global interrupt enable bit
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   362   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   363   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   364  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   365  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   366  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   367  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   368  /** \addtogroup IfxLld_Cpu_Std_Cache
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   369   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   370  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   371  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   372  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   373  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   374  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   375  /** \brief API to enable/ disable the data cacheability for selected segments
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   376   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   377   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   378   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   379   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   380   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   381   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   382  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   383  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   384  /** \brief API to enable/ disable the instruction cacheability for selected segments
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   385   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   386   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   387   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   388   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   389   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   390   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   391  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   392  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   393  /** \brief API to invalidate the program cache
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   394   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   395   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   396  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   397  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   398  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   399   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   400   * \return Status TRUE/FALSE
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   401   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   402  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   403  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   404  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   405   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   406   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   407   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   408   * \param enable Command to enable or bypass the data cache
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   409   * TRUE: Enable the data cache.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   410   * FALSE: Bypass the data cache.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   411   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   412   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   413  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   414  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   415  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   416   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   417   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   418   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   419   * \param enable Command to enable or bypass the program cache.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   420   * TRUE: Enable the program cache.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   421   * FALSE: Bypass the program cache
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   422   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   423   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   424  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   425  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   426  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   427  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   428  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   429   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   430  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   431  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   432  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   433  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   434  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   435  /** \brief API to read the clock counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   436   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   437   * This API can be used to read clock counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   438   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   439   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   440   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   441  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   442  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   443  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   444   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   445   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   446   * It cannot be used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   447   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   448   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   449   * reading the counter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   450   * \return Status of sticky overflow bit.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   451   * \retval TRUE: Sticky overflow bit is set.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   452   * \retval FALSE: Sticky overflow bit is reset
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   453   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   454  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   455  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   456  /** \brief API to read the instruction counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   457   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   458   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   459   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   460   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   461   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   462  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   463  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   464  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   465   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   466   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   467   * It cannot be used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   468   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   469   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   470   * reading the counter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   471   * \return Status of sticky overflow bit.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   472   * \retval TRUE: Sticky overflow bit is set.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   473   * \retval FALSE: Sticky overflow bit is reset
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   474   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   475  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   476  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   477  /** \brief API to read the performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   478   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   479   * \return counter value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   480   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   481  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint16 address);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   482  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   483  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   484   * This is generic function to get sticky overflow bit of any performance counters
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   485   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   486   * \return Status
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   487   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   488  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint16 address);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   489  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   490  /** \brief Reset and start instruction, clock and multi counters
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   491   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   492   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   493   * \param mode Counter mode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   494   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   495   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   496  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   497  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   498  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   500   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   501   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   502   * \param enable enable Command to enable or disable the performance counter.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   503   * TRUE: Enable the performance counter.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   504   * FALSE: Disable the performance counter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   505   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   506   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   507  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   508  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   509  #if !((defined(__cplusplus)) && (defined(__TASKING__)))
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   510  /** \brief Stop instruction and clock counters, return their values
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   511   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   512   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   513   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   514   * \return Performance counter result
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   515   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   516  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   517  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   518  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   519  /** \brief API to update clock counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   520   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   521   * This API can be used to update clock counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   522   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   523   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   524   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   525   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   526  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   527  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   528  /** \brief API to update Instruction counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   529   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   530   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   531   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   532   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   533   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   534   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   535  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   536  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   537  /** \brief API to update performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   538   * This is generic function to update any of the performance counters
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   539   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   540   * \param count Count
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   541   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   542   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   543  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   544  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   545  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   546  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   547  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   548   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   549  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   550  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   551  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   552  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   553  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   554  /** \brief API to acquire the mutex (binary semaphore).
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   555   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   556   * This API can be used to acquire/get the mutex.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   557   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   558   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   559   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   560   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   561   *    IfxCpu_mutexLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   562   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   563   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   564   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   565   *      IfxCpu_releaseMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   566   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   567   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   568   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   569   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   570  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   571  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   572  /** \brief API to unlock the mutex .
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   573   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   574   * This API can be used to unlock the previously acquired mutex
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   575   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   576   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   577   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   578   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   579   *    IfxCpu_mutexLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   580   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   581   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   582   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   583   *      IfxCpu_releaseMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   584   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   585   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   586   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   587   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   588  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   589  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   590  /** \brief API to unlock the resource .
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   591   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   592   * This API can be used to unlock the previously acquired lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   593   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   594   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   595   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   596  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   597  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   598  /** \brief API to lock the resource in spin mode with the given timeout.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   599   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   600   * This API can be used to spin lock for the lock for the given timeout period.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   601   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   602   * \param timeoutCount loop counter value used for timeout to acquire lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   603   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   604   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   605   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   606   *    IfxCpu_spinLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   607   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   608   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   609   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   610   *      IfxCpu_resetSpinLock(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   611   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   612   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   613   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   614   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   615  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   616  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   617  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   618  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   619  /** \addtogroup IfxLld_Cpu_Std_Utility
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   620   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   621  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   622  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   623  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   624  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   625  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   626  /** \brief This function disables the overlay memory.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   627   * \param cpu Core no
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   628   * \param overlayBlock Overlay Block
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   629   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   630   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   631  IFX_EXTERN void IfxCpu_disableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   632  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   633  /** \brief This function configures and enables the overlay memory.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   634   * Note:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   635   * The data overlay provides the capability to redirect selected data accesses to the Overlay memory. Data accesses made by the TriCore to Program Flash, Online Data Acquisition space, or EBU space can be redirected. Overlay memory may be located in the Local Memory (if present), in the Emulation Memory (Emulation Device only), or in the EBU space,or in the DPSR/PSPR memory.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   636   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   637   * How the overlay Memory works?
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   638   * Any data access to segment 8 or segment A is checked against all the activated overlay blocks. For each activated overlay block, address bits 27..5 are compared with the target base address , and this bit-wise comparison is qualified by the content of address mask. Address bits participate in the comparison if the corresponding mask bits are set to one. The access is redirected, if all the address bits selected by mask equal to the corresponding bits in target address.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   639   * The address for redirection is constructed as follows:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   640   * 1. Address bits 31..22 are set according to the overlay memory selection and the cache-ability of the original address.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   641   * 2. For address bits 21..5:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   642   * - If the corresponding address mask bit is set, the address bit value is taken from overlay base address .
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   643   * - If the corresponding address mask bit is cleared, the address bit value is taken from the original address.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   644   * 3. Address bits 4..0 are always taken directly from the original address.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   645   * If there is no redirection, the original address is used to perform the access.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   646   * Target address ranges for activated overlay blocks should not overlap or an exception may occur.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   647   * \param cpu Core no
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   648   * \param overlayBlock Overlay Block
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   649   * \param overlayMemorySelect Overlay Memory Select
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   650   * \param overlayAddressMask overlay Address Mask
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   651   * \param targetBaseAddress Target Base address (i.e Source address to be re-directed)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   652   * \param overlayBaseAddress Overlay or Re-directed Base address (Bits 21..5 of the base address the overlay memory block in the overlay memory)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   653   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   654   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   655  IFX_EXTERN void IfxCpu_enableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock, IfxCpu_OverlayMemorySelect overlayMemorySelect, IfxCpu_OverlayAddressMask overlayAddressMask, uint32 targetBaseAddress, uint32 overlayBaseAddress);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   656  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   657  /** \brief API to get random value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   658   * \param seed Pointer to seed value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   659   * \return random value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   660   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   661  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   662  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   663  /** \brief API to get random value with in the range
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   664   * \param seed Pointer to seed value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   665   * \param min minimum range value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   666   * \param max maximum range value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   667   * \return random value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   668   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   669  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   670  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   671  /** \brief This function waits till all the cores have set their corresponding bits in the event. This function along with
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   672   * IfxCpu_emitEvent() are used to achieve the synchronisation between the configured cores. By default
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   673   * "IFXCPU_CFG_ALLCORE_DONE" macro defined for all the cores. In case the user wants to check for
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   674   * synchronisation among the required cores, the macro can be redefined with the value accroing to the
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   675   * CORE_ID register.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   676   * The IfxCpu_emitEvent() is to be used in the Main functions of the Cores where the user wants to check for synchronisation.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   677   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   678   * e.g:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   679   * 1. Check for synchronisation between core 0 and core 5
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   680   * # define 0x41U
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   681   * 2. Check for synchronisation between core 0 to core 5
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   682   * # define 0x5FU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   683   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   684   * Note:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   685   * Core id values read from CORE_ID register will be as shown below. The value indicates the position of the bit needs to be set while building the macro.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   686   * Core 0: 0
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   687   * Core 1: 1
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   688   * Core 2: 2
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   689   * Core 3: 3
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   690   * Core 4: 4
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   691   * Core 5: 6
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   692   * \param event Synchronous Event
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   693   * \param timeoutMilliSec timeout in millisec
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   694   * \return Error condition
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   695   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   696   * The functions IfxCpu_waitEvent and IfxCpu_emitEvent are used to achieve synchronisation between all cores (i.e individual cores wait till all cores have reached the synchronisation point). The IfxCpu_waitEvent returns 1 incase a timeout occurs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   697   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   698   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   699   * // Global variable. preferably located in  shared memory.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   700   * IfxCpu_syncEvent event;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   701   * boolean errorVal;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   702   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   703   * // Below code should be repeated in Each core
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   704   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   705   * // Upon reaching Synchonisation point
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   706   * IfxCpu_emitEvent(&event);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   707   * errorVal = IfxCpu_waitEvent(&event, timeoutMilliSec); // timeoutMilliSec is timeout value to wait
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   708   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   709   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   710   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   711   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   712  IFX_EXTERN boolean IfxCpu_waitEvent(IfxCpu_syncEvent *event, uint32 timeoutMilliSec);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   713  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   714  /** \brief This function sets a bit corresponding to the core in the event.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   715   * \param event Synchronous Event
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   716   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   717   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   718   * A coding example can be found in \ref IfxCpu_waitEvent
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   719   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   720   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   721  IFX_EXTERN void IfxCpu_emitEvent(IfxCpu_syncEvent *event);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   722  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   723  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   724  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   725  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   726  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   727  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   728  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   729  /** \brief Sets all CPUs to Idle mode except the Master CPU,index of which is given as the parameter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   730   * \param masterCpu Master CPU Index- All except this will be set to Idle Mode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   731   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   732   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   733  IFX_EXTERN void IfxCpu_setAllIdleExceptMasterCpu(IfxCpu_ResourceCpu masterCpu);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   734  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   735  /** \brief Disables interrupts for all CPUs except the Master CPU,index of which is given as the parameter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   736   * \param masterCpu Master CPU Index- All except this will have their interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   737   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   738   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   739  IFX_EXTERN void IfxCpu_disableInterruptsAllExceptMaster(IfxCpu_ResourceCpu masterCpu);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   740  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   741  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   742  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   743  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   744  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   745  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   746  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   747      Ifx_CPU_ICR reg;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   748      reg.U = __mfcr(CPU_ICR);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   749      return reg.B.IE != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   750  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   751  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   752  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   753  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   754  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   755      boolean enabled;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   756      enabled = IfxCpu_areInterruptsEnabled();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   757      __disable();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   758      __nop();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   759      return enabled;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   760  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   761  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   762  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   763  IFX_INLINE void IfxCpu_enableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   764  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   765      __enable();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   766  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   767  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   768  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   769  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   770  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   771      uint32 cpu_pmaVal;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   772      uint16 checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   773      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   774      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   775  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   776      /*resolve the restrictions*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   777      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   778      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xC);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   779  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   780      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   781      {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   782          segmentNumberMask |= checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   783      }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   784  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   785      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   786  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   787      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   788  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   789      /*The CPU_PMA registers are ENDINIT protected*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   790      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   791      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   792      /*Write to PMA0 register for selecting the cacheability for data cache*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   793      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   794      __mtcr(CPU_PMA0, cpu_pmaVal);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   795      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   796      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   797  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   798  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   799  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   800  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   801  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   802      uint32 cpu_pmaVal;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   803      uint16 checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   804      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   805      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   806  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   807      /*resolve the restrictions*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   808      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   809      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xD);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   810  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   811      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   812      {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   813          segmentNumberMask |= checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   814      }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   815  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   816      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   817  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   818      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   819  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   820      /*The CPU_PMA registers are ENDINIT protected*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   821      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   822      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   823      /*Write to PMA1 register for selecting the cacheability for data cache*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   824      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   825      __mtcr(CPU_PMA1, cpu_pmaVal);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   826      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   827      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   828  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   829  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   830  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   831  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   832  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   833      __disable();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   834      __nop();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   835  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   836  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   837  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   838  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   839  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   840      Ifx_CPU *module;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   841  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   842      if (cpu < IfxCpu_ResourceCpu_none)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   843      {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   844          module = (Ifx_CPU *)IfxCpu_cfg_indexMap[cpu].module;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   845      }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   846      else
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   847      {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   848          module = NULL_PTR;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   849      }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   850  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   851      return module;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   852  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   853  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   854  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   855  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   856  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   857      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   858  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   859  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   860  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   861  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   862  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   863      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   864  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   865  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   866  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   867  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   868  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   869      Ifx_CPU_CORE_ID reg;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   870      reg.U = __mfcr(CPU_CORE_ID);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   871      return (IfxCpu_Id)reg.B.CORE_ID;
	and	d15,#7
.L357:
	insert	d15,d2,d15,#0,#3
	insert	d1,d1,d15,#16,#8
	fret
.L147:
	; End of function
	.sdecl	'.text.IfxCpu_Trap.IfxCpu_Trap_internalProtectionError',code,cluster('IfxCpu_Trap_internalProtectionError')
	.sect	'.text.IfxCpu_Trap.IfxCpu_Trap_internalProtectionError'
	.align	2
	
	.global	IfxCpu_Trap_internalProtectionError

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   135  
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   136  
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   137  void IfxCpu_Trap_internalProtectionError(uint32 tin)
; Function IfxCpu_Trap_internalProtectionError
.L7:
IfxCpu_Trap_internalProtectionError:	.type	func
	sub.a	a10,#8
.L184:

; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   348      __asm("mov.aa %0, a11": "=a" (res) : :"a11");      (inlined)
	
	mov.aa a15, a11
.L360:
	
.L412:
	mov.d	d0,a15
.L189:
	insert	d1,d1,#1,#8,#8
.L413:
	insert	d1,d1,d4,#0,#8
.L191:

; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    42   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    43   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    44   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    45   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    46   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    47   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    48   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    49   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    50   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    51   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    52   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    53   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    54   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    55   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    56   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    57   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    58   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    59  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    60  #ifndef IFXCPU_H
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    61  #define IFXCPU_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    62  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    63  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    64  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    65  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    66  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    67  #include "_Impl/IfxCpu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    68  #include "IfxSrc_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    69  #include "IfxScu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    70  #include "IfxStm_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    71  #include "_Impl/IfxScu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    72  #include "_Utilities/Ifx_Assert.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    73  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    74  #include "Scu/Std/IfxScuCcu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    75  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    76  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    77  /*-----------------------------------Macros-----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    78  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    79  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    80  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    81   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    82   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    83   * the CPU number.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    84   * Example usage:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    85   *  \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    86   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    87   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    88   *  \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    89   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    90  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    91  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    92  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    93   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    94   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    95   * the CPU number.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    96   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    97   *   Example usage:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    98   *   \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    99   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   100   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   101   *   \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   102   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   103  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   104  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   105  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   106  /*------------------------------Type Definitions------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   107  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   108  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   109  /** \brief Lock type Spin lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   110   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   111  typedef unsigned int IfxCpu_spinLock;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   112  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   113  /** \brief Lock type Mutex lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   114   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   115  typedef unsigned int IfxCpu_mutexLock;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   116  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   117  /** \brief Event used for synchronisation.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   118   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   119  typedef unsigned int IfxCpu_syncEvent;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   120  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   121  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   122  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   123  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   124  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   125  /** \addtogroup IfxLld_Cpu_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   126   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   127  /** \brief Enumeration for the Cpu mode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   128   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   129  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   130  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   131      IfxCpu_CoreMode_halt,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   132      IfxCpu_CoreMode_run,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   133      IfxCpu_CoreMode_idle,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   134      IfxCpu_CoreMode_sleep,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   135      IfxCpu_CoreMode_stby,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   136      IfxCpu_CoreMode_unknown
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   137  } IfxCpu_CoreMode;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   138  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   139  /** \brief Performance conunter modes
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   140   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   141  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   142  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   143      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   144      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   145  } IfxCpu_CounterMode;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   147  /** \brief Overlay Address Mask: determines the overlay block size and the bits used for address comparison and translation
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   148   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   149  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   150  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   151      IfxCpu_OverlayAddressMask_32byte  = 0xFFF,  /**< \brief 32 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   152      IfxCpu_OverlayAddressMask_64byte  = 0xFFE,  /**< \brief 64 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   153      IfxCpu_OverlayAddressMask_128byte = 0xFFC,  /**< \brief 128 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   154      IfxCpu_OverlayAddressMask_256byte = 0xFF8,  /**< \brief 256 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   155      IfxCpu_OverlayAddressMask_512byte = 0xFF0,  /**< \brief 512 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   156      IfxCpu_OverlayAddressMask_1KB     = 0xFE0,  /**< \brief 1K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   157      IfxCpu_OverlayAddressMask_2KB     = 0xFC0,  /**< \brief 2K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   158      IfxCpu_OverlayAddressMask_4KB     = 0xF80,  /**< \brief 4K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   159      IfxCpu_OverlayAddressMask_8KB     = 0xF00,  /**< \brief 8K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   160      IfxCpu_OverlayAddressMask_16KB    = 0xE00,  /**< \brief 16K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   161      IfxCpu_OverlayAddressMask_32KB    = 0xC00,  /**< \brief 32K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   162      IfxCpu_OverlayAddressMask_64KB    = 0x800,  /**< \brief 64K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   163      IfxCpu_OverlayAddressMask_128KB   = 0x0     /**< \brief 128K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   164  } IfxCpu_OverlayAddressMask;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   165  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   166  /** \brief Selects overlay memory used for redirection
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   167   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   168  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   169  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   170      IfxCpu_OverlayMemorySelect_core0DsprPspr = 0,  /**< \brief Redirection to Core 0 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   171      IfxCpu_OverlayMemorySelect_core1DsprPspr = 1,  /**< \brief Redirection to Core 1 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   172      IfxCpu_OverlayMemorySelect_core2DsprPspr = 2,  /**< \brief Redirection to Core 2 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   173      IfxCpu_OverlayMemorySelect_core3DsprPspr = 3,  /**< \brief Redirection to Core 3 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   174      IfxCpu_OverlayMemorySelect_core4DsprPspr = 4,  /**< \brief Redirection to Core 4 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   175      IfxCpu_OverlayMemorySelect_core5DsprPspr = 5,  /**< \brief Redirection to Core 5 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   176      IfxCpu_OverlayMemorySelect_lmu           = 8,  /**< \brief Redirection to LMU memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   177      IfxCpu_OverlayMemorySelect_emem          = 9,  /**< \brief Redirection to EMEM memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   178      IfxCpu_OverlayMemorySelect_ebu           = 10  /**< \brief Redirection to EBU memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   179  } IfxCpu_OverlayMemorySelect;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   180  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   181  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   182  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   183      IfxCpu_ResetStatus_notCpuReset   = 0,  /**< \brief No Kernel Reset was executed */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   184      IfxCpu_ResetStatus_cpuResetBySmu = 1,  /**< \brief Kernel reset was requested by hardware since last clear (SMU) */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   185      IfxCpu_ResetStatus_cpuResetBySw  = 2   /**< \brief Kernel reset was requested by software since last clear (by writing KRST0.RST=1 and KRST1.RST=1) */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   186  } IfxCpu_ResetStatus;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   187  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   188  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   189  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   190  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   191  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   192  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   193  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   194  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   195   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   196  /** \brief counter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   197   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   198  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   199  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   200      uint32  counter;        /**< \brief Counter value */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   201      boolean overlfow;       /**< \brief sticky overlfow */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   202  } IfxCpu_Counter;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   203  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   204  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   205  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   206  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   207   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   208  /** \brief Performance counter result
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   209   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   210  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   211  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   212      IfxCpu_Counter instruction;       /**< \brief Instruction counter */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   213      IfxCpu_Counter clock;             /**< \brief CPU clock counter */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   214      IfxCpu_Counter counter1;          /**< \brief Multi counter 1 */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   215      IfxCpu_Counter counter2;          /**< \brief Multi counter 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   216      IfxCpu_Counter counter3;          /**< \brief Multi counter 3 */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   217  } IfxCpu_Perf;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   218  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   219  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   221  /** \addtogroup IfxLld_Cpu_Std_Core
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   222   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   223  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   224  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   225  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   226  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   227  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   228  /** \brief API to get the address for CPU HW module register memory map
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   229   * \param cpu Resource index of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   230   * \return CPU module register address
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   231   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   232  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   233  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   234  /** \brief API to get core id of the CPU of the caller.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   235   * Caution: Core id of the cpu's may not be continguous and shouldn't be used to index cpu.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   236   * Use IfxCpu_getCoreIndex() to get cpu no.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   237   * \return Resource index of the CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   238   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   239  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   240  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   241  /** \brief API to get cpu index of the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   242   * Note: This api can be used whereever cpu no/index is needed.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   243   * \return Resource index of the CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   244   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   245  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   246  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   247  /** \brief API to initialize the context save area of the CPU where this is called.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   248   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   249   * This API can initialize the CSA of the host CPU where this API is called. This API
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   250   * shall not be used to initialize the CSA of another CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   251   * \param csaBegin Pointer to start of context save area
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   252   * \param csaEnd Pointer to end of context save area
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   253   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   254   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   255  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   256  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   257  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   258   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   259   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   260  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   261  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   262  /** \brief Triggers Software Reset
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   263   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   264   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   265  IFX_INLINE void IfxCpu_triggerSwReset(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   266  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   267  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   268  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   269  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   271  /** \brief API to get current mode of CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   272   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   273   * \return Current mode of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   274   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   275  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   276  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   277  /** \brief API to get current mode of CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   278   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   279   * \return Resource index of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   280   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   281  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   282  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   283  /** \brief API to set mode of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   284   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   285   * \param mode CPU mode to be set by this API
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   286   * \return Success status of the activity (setting the core mode).
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   287   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   288   * \retval FALSE: If the activity can't be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   289   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   290  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   291  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   292  /** \brief API to set the program counter for the CPU specified.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   293   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   294   * \param programCounter Program counter value to be set
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   295   * \return success status of the activity (setting program counter value).
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   296   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   297   * \retval FALSE: If the activity can't be performed
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   298   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   299  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   300  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   301  /** \brief API to set the program counter for the CPU specified and start the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   302   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   303   * \param programCounter Program counter value to start the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   304   * \return success status of the activity (setting program counter value).
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   305   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   306   * \retval FALSE: If the activity can't be performed
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   307   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   308  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   309  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   310  /** \brief To request reset of a particular core, given by coreId
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   311   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   312   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   313  IFX_EXTERN void IfxCpu_triggerCpuReset(IfxCpu_ResourceCpu coreIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   314  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   315  /** \brief Retrieve the cause of reset(no reset, hardware(SMU) or software) since last clear by reading KRST0.RSTSTAT and clear it.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   316   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   317  IFX_EXTERN IfxCpu_ResetStatus IfxCpu_getCpuResetStatus(IfxCpu_ResourceCpu coreIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   318  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   319  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   320  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   321  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   322   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   323  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   324  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   325  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   326  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   327  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   328  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   329   * This API provides the status of CPU where this API is called
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   330   * \return Status of global interrupt enable bit.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   331   * \retval TRUE: Global interrupts enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   332   * \retval FALSE: Global interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   333   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   334  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   335  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   336  /** \brief API to disable global interrupt and return the previous status.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   337   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   338   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   339   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   340   * \return Previous status of global interrupt enable bit.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   341   * \retval TRUE: Previously, global interrupts enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   342   * \retval FALSE: Previously, global interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   343   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   344  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   345  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   346  /** \brief API to enable global interrupt.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   347   * This API simply enables the global interrupt.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   348   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   349   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   350  IFX_INLINE void IfxCpu_enableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   351  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   352  /** \brief Disable the Global Interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   353   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   354   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   355  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   356  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   357  /** \brief API to restore global interrupt with that of the passed parameter.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   358   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   359   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   360   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   361   * \param enabled Previous status of the global interrupt enable bit
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   362   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   363   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   364  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   365  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   366  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   367  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   368  /** \addtogroup IfxLld_Cpu_Std_Cache
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   369   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   370  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   371  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   372  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   373  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   374  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   375  /** \brief API to enable/ disable the data cacheability for selected segments
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   376   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   377   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   378   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   379   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   380   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   381   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   382  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   383  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   384  /** \brief API to enable/ disable the instruction cacheability for selected segments
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   385   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   386   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   387   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   388   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   389   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   390   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   391  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   392  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   393  /** \brief API to invalidate the program cache
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   394   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   395   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   396  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   397  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   398  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   399   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   400   * \return Status TRUE/FALSE
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   401   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   402  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   403  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   404  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   405   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   406   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   407   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   408   * \param enable Command to enable or bypass the data cache
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   409   * TRUE: Enable the data cache.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   410   * FALSE: Bypass the data cache.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   411   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   412   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   413  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   414  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   415  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   416   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   417   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   418   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   419   * \param enable Command to enable or bypass the program cache.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   420   * TRUE: Enable the program cache.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   421   * FALSE: Bypass the program cache
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   422   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   423   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   424  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   425  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   426  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   427  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   428  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   429   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   430  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   431  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   432  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   433  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   434  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   435  /** \brief API to read the clock counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   436   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   437   * This API can be used to read clock counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   438   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   439   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   440   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   441  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   442  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   443  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   444   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   445   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   446   * It cannot be used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   447   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   448   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   449   * reading the counter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   450   * \return Status of sticky overflow bit.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   451   * \retval TRUE: Sticky overflow bit is set.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   452   * \retval FALSE: Sticky overflow bit is reset
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   453   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   454  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   455  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   456  /** \brief API to read the instruction counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   457   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   458   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   459   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   460   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   461   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   462  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   463  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   464  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   465   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   466   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   467   * It cannot be used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   468   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   469   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   470   * reading the counter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   471   * \return Status of sticky overflow bit.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   472   * \retval TRUE: Sticky overflow bit is set.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   473   * \retval FALSE: Sticky overflow bit is reset
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   474   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   475  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   476  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   477  /** \brief API to read the performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   478   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   479   * \return counter value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   480   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   481  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint16 address);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   482  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   483  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   484   * This is generic function to get sticky overflow bit of any performance counters
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   485   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   486   * \return Status
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   487   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   488  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint16 address);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   489  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   490  /** \brief Reset and start instruction, clock and multi counters
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   491   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   492   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   493   * \param mode Counter mode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   494   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   495   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   496  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   497  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   498  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   500   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   501   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   502   * \param enable enable Command to enable or disable the performance counter.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   503   * TRUE: Enable the performance counter.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   504   * FALSE: Disable the performance counter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   505   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   506   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   507  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   508  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   509  #if !((defined(__cplusplus)) && (defined(__TASKING__)))
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   510  /** \brief Stop instruction and clock counters, return their values
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   511   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   512   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   513   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   514   * \return Performance counter result
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   515   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   516  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   517  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   518  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   519  /** \brief API to update clock counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   520   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   521   * This API can be used to update clock counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   522   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   523   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   524   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   525   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   526  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   527  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   528  /** \brief API to update Instruction counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   529   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   530   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   531   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   532   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   533   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   534   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   535  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   536  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   537  /** \brief API to update performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   538   * This is generic function to update any of the performance counters
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   539   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   540   * \param count Count
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   541   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   542   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   543  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   544  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   545  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   546  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   547  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   548   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   549  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   550  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   551  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   552  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   553  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   554  /** \brief API to acquire the mutex (binary semaphore).
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   555   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   556   * This API can be used to acquire/get the mutex.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   557   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   558   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   559   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   560   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   561   *    IfxCpu_mutexLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   562   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   563   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   564   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   565   *      IfxCpu_releaseMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   566   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   567   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   568   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   569   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   570  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   571  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   572  /** \brief API to unlock the mutex .
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   573   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   574   * This API can be used to unlock the previously acquired mutex
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   575   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   576   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   577   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   578   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   579   *    IfxCpu_mutexLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   580   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   581   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   582   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   583   *      IfxCpu_releaseMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   584   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   585   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   586   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   587   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   588  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   589  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   590  /** \brief API to unlock the resource .
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   591   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   592   * This API can be used to unlock the previously acquired lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   593   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   594   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   595   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   596  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   597  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   598  /** \brief API to lock the resource in spin mode with the given timeout.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   599   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   600   * This API can be used to spin lock for the lock for the given timeout period.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   601   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   602   * \param timeoutCount loop counter value used for timeout to acquire lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   603   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   604   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   605   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   606   *    IfxCpu_spinLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   607   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   608   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   609   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   610   *      IfxCpu_resetSpinLock(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   611   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   612   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   613   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   614   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   615  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   616  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   617  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   618  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   619  /** \addtogroup IfxLld_Cpu_Std_Utility
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   620   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   621  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   622  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   623  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   624  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   625  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   626  /** \brief This function disables the overlay memory.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   627   * \param cpu Core no
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   628   * \param overlayBlock Overlay Block
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   629   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   630   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   631  IFX_EXTERN void IfxCpu_disableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   632  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   633  /** \brief This function configures and enables the overlay memory.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   634   * Note:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   635   * The data overlay provides the capability to redirect selected data accesses to the Overlay memory. Data accesses made by the TriCore to Program Flash, Online Data Acquisition space, or EBU space can be redirected. Overlay memory may be located in the Local Memory (if present), in the Emulation Memory (Emulation Device only), or in the EBU space,or in the DPSR/PSPR memory.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   636   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   637   * How the overlay Memory works?
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   638   * Any data access to segment 8 or segment A is checked against all the activated overlay blocks. For each activated overlay block, address bits 27..5 are compared with the target base address , and this bit-wise comparison is qualified by the content of address mask. Address bits participate in the comparison if the corresponding mask bits are set to one. The access is redirected, if all the address bits selected by mask equal to the corresponding bits in target address.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   639   * The address for redirection is constructed as follows:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   640   * 1. Address bits 31..22 are set according to the overlay memory selection and the cache-ability of the original address.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   641   * 2. For address bits 21..5:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   642   * - If the corresponding address mask bit is set, the address bit value is taken from overlay base address .
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   643   * - If the corresponding address mask bit is cleared, the address bit value is taken from the original address.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   644   * 3. Address bits 4..0 are always taken directly from the original address.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   645   * If there is no redirection, the original address is used to perform the access.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   646   * Target address ranges for activated overlay blocks should not overlap or an exception may occur.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   647   * \param cpu Core no
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   648   * \param overlayBlock Overlay Block
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   649   * \param overlayMemorySelect Overlay Memory Select
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   650   * \param overlayAddressMask overlay Address Mask
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   651   * \param targetBaseAddress Target Base address (i.e Source address to be re-directed)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   652   * \param overlayBaseAddress Overlay or Re-directed Base address (Bits 21..5 of the base address the overlay memory block in the overlay memory)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   653   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   654   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   655  IFX_EXTERN void IfxCpu_enableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock, IfxCpu_OverlayMemorySelect overlayMemorySelect, IfxCpu_OverlayAddressMask overlayAddressMask, uint32 targetBaseAddress, uint32 overlayBaseAddress);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   656  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   657  /** \brief API to get random value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   658   * \param seed Pointer to seed value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   659   * \return random value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   660   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   661  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   662  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   663  /** \brief API to get random value with in the range
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   664   * \param seed Pointer to seed value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   665   * \param min minimum range value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   666   * \param max maximum range value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   667   * \return random value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   668   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   669  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   670  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   671  /** \brief This function waits till all the cores have set their corresponding bits in the event. This function along with
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   672   * IfxCpu_emitEvent() are used to achieve the synchronisation between the configured cores. By default
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   673   * "IFXCPU_CFG_ALLCORE_DONE" macro defined for all the cores. In case the user wants to check for
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   674   * synchronisation among the required cores, the macro can be redefined with the value accroing to the
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   675   * CORE_ID register.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   676   * The IfxCpu_emitEvent() is to be used in the Main functions of the Cores where the user wants to check for synchronisation.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   677   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   678   * e.g:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   679   * 1. Check for synchronisation between core 0 and core 5
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   680   * # define 0x41U
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   681   * 2. Check for synchronisation between core 0 to core 5
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   682   * # define 0x5FU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   683   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   684   * Note:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   685   * Core id values read from CORE_ID register will be as shown below. The value indicates the position of the bit needs to be set while building the macro.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   686   * Core 0: 0
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   687   * Core 1: 1
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   688   * Core 2: 2
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   689   * Core 3: 3
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   690   * Core 4: 4
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   691   * Core 5: 6
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   692   * \param event Synchronous Event
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   693   * \param timeoutMilliSec timeout in millisec
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   694   * \return Error condition
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   695   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   696   * The functions IfxCpu_waitEvent and IfxCpu_emitEvent are used to achieve synchronisation between all cores (i.e individual cores wait till all cores have reached the synchronisation point). The IfxCpu_waitEvent returns 1 incase a timeout occurs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   697   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   698   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   699   * // Global variable. preferably located in  shared memory.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   700   * IfxCpu_syncEvent event;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   701   * boolean errorVal;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   702   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   703   * // Below code should be repeated in Each core
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   704   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   705   * // Upon reaching Synchonisation point
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   706   * IfxCpu_emitEvent(&event);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   707   * errorVal = IfxCpu_waitEvent(&event, timeoutMilliSec); // timeoutMilliSec is timeout value to wait
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   708   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   709   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   710   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   711   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   712  IFX_EXTERN boolean IfxCpu_waitEvent(IfxCpu_syncEvent *event, uint32 timeoutMilliSec);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   713  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   714  /** \brief This function sets a bit corresponding to the core in the event.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   715   * \param event Synchronous Event
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   716   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   717   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   718   * A coding example can be found in \ref IfxCpu_waitEvent
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   719   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   720   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   721  IFX_EXTERN void IfxCpu_emitEvent(IfxCpu_syncEvent *event);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   722  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   723  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   724  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   725  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   726  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   727  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   728  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   729  /** \brief Sets all CPUs to Idle mode except the Master CPU,index of which is given as the parameter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   730   * \param masterCpu Master CPU Index- All except this will be set to Idle Mode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   731   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   732   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   733  IFX_EXTERN void IfxCpu_setAllIdleExceptMasterCpu(IfxCpu_ResourceCpu masterCpu);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   734  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   735  /** \brief Disables interrupts for all CPUs except the Master CPU,index of which is given as the parameter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   736   * \param masterCpu Master CPU Index- All except this will have their interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   737   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   738   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   739  IFX_EXTERN void IfxCpu_disableInterruptsAllExceptMaster(IfxCpu_ResourceCpu masterCpu);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   740  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   741  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   742  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   743  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   744  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   745  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   746  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   747      Ifx_CPU_ICR reg;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   748      reg.U = __mfcr(CPU_ICR);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   749      return reg.B.IE != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   750  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   751  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   752  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   753  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   754  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   755      boolean enabled;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   756      enabled = IfxCpu_areInterruptsEnabled();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   757      __disable();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   758      __nop();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   759      return enabled;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   760  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   761  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   762  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   763  IFX_INLINE void IfxCpu_enableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   764  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   765      __enable();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   766  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   767  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   768  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   769  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   770  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   771      uint32 cpu_pmaVal;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   772      uint16 checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   773      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   774      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   775  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   776      /*resolve the restrictions*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   777      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   778      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xC);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   779  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   780      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   781      {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   782          segmentNumberMask |= checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   783      }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   784  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   785      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   786  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   787      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   788  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   789      /*The CPU_PMA registers are ENDINIT protected*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   790      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   791      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   792      /*Write to PMA0 register for selecting the cacheability for data cache*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   793      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   794      __mtcr(CPU_PMA0, cpu_pmaVal);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   795      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   796      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   797  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   798  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   799  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   800  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   801  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   802      uint32 cpu_pmaVal;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   803      uint16 checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   804      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   805      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   806  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   807      /*resolve the restrictions*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   808      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   809      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xD);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   810  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   811      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   812      {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   813          segmentNumberMask |= checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   814      }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   815  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   816      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   817  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   818      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   819  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   820      /*The CPU_PMA registers are ENDINIT protected*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   821      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   822      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   823      /*Write to PMA1 register for selecting the cacheability for data cache*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   824      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   825      __mtcr(CPU_PMA1, cpu_pmaVal);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   826      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   827      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   828  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   829  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   830  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   831  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   832  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   833      __disable();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   834      __nop();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   835  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   836  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   837  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   838  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   839  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   840      Ifx_CPU *module;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   841  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   842      if (cpu < IfxCpu_ResourceCpu_none)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   843      {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   844          module = (Ifx_CPU *)IfxCpu_cfg_indexMap[cpu].module;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   845      }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   846      else
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   847      {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   848          module = NULL_PTR;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   849      }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   850  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   851      return module;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   852  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   853  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   854  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   855  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   856  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   857      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   858  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   859  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   860  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   861  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   862  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   863      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   864  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   865  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   866  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   867  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   868  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   869      Ifx_CPU_CORE_ID reg;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   870      reg.U = __mfcr(CPU_CORE_ID);
	mfcr	d15,#65052
.L359:

; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   871      return (IfxCpu_Id)reg.B.CORE_ID;
	fcall	.cocofun_2
.L192:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   138  {
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   139      volatile IfxCpu_Trap trapWatch;
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   140      trapWatch = IfxCpu_Trap_extractTrapInfo(IfxCpu_Trap_Class_internalProtection, tin);
	st.d	[a10]0,e0
.L185:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   141      IFX_CFG_CPU_TRAP_IPE_HOOK(trapWatch);
	ld.d	e0,[a10]0
.L361:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   142      IFX_CFG_CPU_TRAP_DEBUG;
	debug
.L414:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   143      __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
	rslcx
.L415:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   144      __asm("rfe");
	rfe
.L416:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   145  }
	ret
.L180:
	
__IfxCpu_Trap_internalProtectionError_function_end:
	.size	IfxCpu_Trap_internalProtectionError,__IfxCpu_Trap_internalProtectionError_function_end-IfxCpu_Trap_internalProtectionError
.L57:
	; End of function
	
	.sdecl	'.text.IfxCpu_Trap.IfxCpu_Trap_instructionError',code,cluster('IfxCpu_Trap_instructionError')
	.sect	'.text.IfxCpu_Trap.IfxCpu_Trap_instructionError'
	.align	2
	
	.global	IfxCpu_Trap_instructionError

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   146  
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   147  
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   148  void IfxCpu_Trap_instructionError(uint32 tin)
; Function IfxCpu_Trap_instructionError
.L9:
IfxCpu_Trap_instructionError:	.type	func
	sub.a	a10,#8
.L198:

; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   348      __asm("mov.aa %0, a11": "=a" (res) : :"a11");      (inlined)
	
	mov.aa a15, a11
.L363:
	
.L421:
	mov.d	d0,a15
.L203:
	insert	d1,d1,#2,#8,#8
.L422:
	insert	d1,d1,d4,#0,#8
.L205:

; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    42   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    43   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    44   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    45   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    46   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    47   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    48   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    49   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    50   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    51   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    52   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    53   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    54   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    55   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    56   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    57   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    58   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    59  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    60  #ifndef IFXCPU_H
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    61  #define IFXCPU_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    62  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    63  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    64  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    65  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    66  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    67  #include "_Impl/IfxCpu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    68  #include "IfxSrc_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    69  #include "IfxScu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    70  #include "IfxStm_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    71  #include "_Impl/IfxScu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    72  #include "_Utilities/Ifx_Assert.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    73  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    74  #include "Scu/Std/IfxScuCcu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    75  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    76  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    77  /*-----------------------------------Macros-----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    78  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    79  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    80  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    81   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    82   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    83   * the CPU number.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    84   * Example usage:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    85   *  \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    86   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    87   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    88   *  \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    89   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    90  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    91  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    92  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    93   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    94   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    95   * the CPU number.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    96   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    97   *   Example usage:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    98   *   \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    99   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   100   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   101   *   \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   102   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   103  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   104  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   105  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   106  /*------------------------------Type Definitions------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   107  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   108  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   109  /** \brief Lock type Spin lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   110   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   111  typedef unsigned int IfxCpu_spinLock;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   112  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   113  /** \brief Lock type Mutex lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   114   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   115  typedef unsigned int IfxCpu_mutexLock;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   116  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   117  /** \brief Event used for synchronisation.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   118   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   119  typedef unsigned int IfxCpu_syncEvent;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   120  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   121  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   122  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   123  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   124  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   125  /** \addtogroup IfxLld_Cpu_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   126   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   127  /** \brief Enumeration for the Cpu mode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   128   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   129  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   130  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   131      IfxCpu_CoreMode_halt,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   132      IfxCpu_CoreMode_run,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   133      IfxCpu_CoreMode_idle,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   134      IfxCpu_CoreMode_sleep,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   135      IfxCpu_CoreMode_stby,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   136      IfxCpu_CoreMode_unknown
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   137  } IfxCpu_CoreMode;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   138  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   139  /** \brief Performance conunter modes
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   140   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   141  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   142  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   143      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   144      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   145  } IfxCpu_CounterMode;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   147  /** \brief Overlay Address Mask: determines the overlay block size and the bits used for address comparison and translation
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   148   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   149  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   150  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   151      IfxCpu_OverlayAddressMask_32byte  = 0xFFF,  /**< \brief 32 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   152      IfxCpu_OverlayAddressMask_64byte  = 0xFFE,  /**< \brief 64 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   153      IfxCpu_OverlayAddressMask_128byte = 0xFFC,  /**< \brief 128 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   154      IfxCpu_OverlayAddressMask_256byte = 0xFF8,  /**< \brief 256 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   155      IfxCpu_OverlayAddressMask_512byte = 0xFF0,  /**< \brief 512 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   156      IfxCpu_OverlayAddressMask_1KB     = 0xFE0,  /**< \brief 1K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   157      IfxCpu_OverlayAddressMask_2KB     = 0xFC0,  /**< \brief 2K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   158      IfxCpu_OverlayAddressMask_4KB     = 0xF80,  /**< \brief 4K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   159      IfxCpu_OverlayAddressMask_8KB     = 0xF00,  /**< \brief 8K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   160      IfxCpu_OverlayAddressMask_16KB    = 0xE00,  /**< \brief 16K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   161      IfxCpu_OverlayAddressMask_32KB    = 0xC00,  /**< \brief 32K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   162      IfxCpu_OverlayAddressMask_64KB    = 0x800,  /**< \brief 64K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   163      IfxCpu_OverlayAddressMask_128KB   = 0x0     /**< \brief 128K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   164  } IfxCpu_OverlayAddressMask;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   165  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   166  /** \brief Selects overlay memory used for redirection
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   167   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   168  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   169  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   170      IfxCpu_OverlayMemorySelect_core0DsprPspr = 0,  /**< \brief Redirection to Core 0 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   171      IfxCpu_OverlayMemorySelect_core1DsprPspr = 1,  /**< \brief Redirection to Core 1 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   172      IfxCpu_OverlayMemorySelect_core2DsprPspr = 2,  /**< \brief Redirection to Core 2 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   173      IfxCpu_OverlayMemorySelect_core3DsprPspr = 3,  /**< \brief Redirection to Core 3 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   174      IfxCpu_OverlayMemorySelect_core4DsprPspr = 4,  /**< \brief Redirection to Core 4 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   175      IfxCpu_OverlayMemorySelect_core5DsprPspr = 5,  /**< \brief Redirection to Core 5 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   176      IfxCpu_OverlayMemorySelect_lmu           = 8,  /**< \brief Redirection to LMU memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   177      IfxCpu_OverlayMemorySelect_emem          = 9,  /**< \brief Redirection to EMEM memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   178      IfxCpu_OverlayMemorySelect_ebu           = 10  /**< \brief Redirection to EBU memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   179  } IfxCpu_OverlayMemorySelect;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   180  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   181  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   182  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   183      IfxCpu_ResetStatus_notCpuReset   = 0,  /**< \brief No Kernel Reset was executed */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   184      IfxCpu_ResetStatus_cpuResetBySmu = 1,  /**< \brief Kernel reset was requested by hardware since last clear (SMU) */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   185      IfxCpu_ResetStatus_cpuResetBySw  = 2   /**< \brief Kernel reset was requested by software since last clear (by writing KRST0.RST=1 and KRST1.RST=1) */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   186  } IfxCpu_ResetStatus;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   187  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   188  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   189  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   190  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   191  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   192  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   193  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   194  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   195   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   196  /** \brief counter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   197   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   198  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   199  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   200      uint32  counter;        /**< \brief Counter value */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   201      boolean overlfow;       /**< \brief sticky overlfow */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   202  } IfxCpu_Counter;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   203  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   204  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   205  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   206  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   207   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   208  /** \brief Performance counter result
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   209   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   210  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   211  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   212      IfxCpu_Counter instruction;       /**< \brief Instruction counter */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   213      IfxCpu_Counter clock;             /**< \brief CPU clock counter */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   214      IfxCpu_Counter counter1;          /**< \brief Multi counter 1 */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   215      IfxCpu_Counter counter2;          /**< \brief Multi counter 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   216      IfxCpu_Counter counter3;          /**< \brief Multi counter 3 */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   217  } IfxCpu_Perf;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   218  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   219  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   221  /** \addtogroup IfxLld_Cpu_Std_Core
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   222   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   223  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   224  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   225  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   226  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   227  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   228  /** \brief API to get the address for CPU HW module register memory map
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   229   * \param cpu Resource index of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   230   * \return CPU module register address
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   231   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   232  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   233  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   234  /** \brief API to get core id of the CPU of the caller.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   235   * Caution: Core id of the cpu's may not be continguous and shouldn't be used to index cpu.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   236   * Use IfxCpu_getCoreIndex() to get cpu no.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   237   * \return Resource index of the CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   238   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   239  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   240  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   241  /** \brief API to get cpu index of the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   242   * Note: This api can be used whereever cpu no/index is needed.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   243   * \return Resource index of the CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   244   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   245  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   246  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   247  /** \brief API to initialize the context save area of the CPU where this is called.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   248   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   249   * This API can initialize the CSA of the host CPU where this API is called. This API
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   250   * shall not be used to initialize the CSA of another CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   251   * \param csaBegin Pointer to start of context save area
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   252   * \param csaEnd Pointer to end of context save area
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   253   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   254   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   255  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   256  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   257  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   258   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   259   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   260  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   261  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   262  /** \brief Triggers Software Reset
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   263   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   264   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   265  IFX_INLINE void IfxCpu_triggerSwReset(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   266  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   267  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   268  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   269  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   271  /** \brief API to get current mode of CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   272   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   273   * \return Current mode of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   274   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   275  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   276  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   277  /** \brief API to get current mode of CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   278   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   279   * \return Resource index of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   280   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   281  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   282  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   283  /** \brief API to set mode of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   284   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   285   * \param mode CPU mode to be set by this API
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   286   * \return Success status of the activity (setting the core mode).
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   287   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   288   * \retval FALSE: If the activity can't be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   289   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   290  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   291  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   292  /** \brief API to set the program counter for the CPU specified.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   293   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   294   * \param programCounter Program counter value to be set
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   295   * \return success status of the activity (setting program counter value).
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   296   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   297   * \retval FALSE: If the activity can't be performed
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   298   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   299  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   300  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   301  /** \brief API to set the program counter for the CPU specified and start the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   302   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   303   * \param programCounter Program counter value to start the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   304   * \return success status of the activity (setting program counter value).
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   305   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   306   * \retval FALSE: If the activity can't be performed
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   307   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   308  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   309  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   310  /** \brief To request reset of a particular core, given by coreId
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   311   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   312   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   313  IFX_EXTERN void IfxCpu_triggerCpuReset(IfxCpu_ResourceCpu coreIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   314  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   315  /** \brief Retrieve the cause of reset(no reset, hardware(SMU) or software) since last clear by reading KRST0.RSTSTAT and clear it.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   316   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   317  IFX_EXTERN IfxCpu_ResetStatus IfxCpu_getCpuResetStatus(IfxCpu_ResourceCpu coreIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   318  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   319  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   320  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   321  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   322   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   323  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   324  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   325  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   326  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   327  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   328  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   329   * This API provides the status of CPU where this API is called
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   330   * \return Status of global interrupt enable bit.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   331   * \retval TRUE: Global interrupts enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   332   * \retval FALSE: Global interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   333   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   334  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   335  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   336  /** \brief API to disable global interrupt and return the previous status.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   337   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   338   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   339   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   340   * \return Previous status of global interrupt enable bit.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   341   * \retval TRUE: Previously, global interrupts enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   342   * \retval FALSE: Previously, global interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   343   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   344  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   345  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   346  /** \brief API to enable global interrupt.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   347   * This API simply enables the global interrupt.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   348   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   349   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   350  IFX_INLINE void IfxCpu_enableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   351  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   352  /** \brief Disable the Global Interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   353   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   354   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   355  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   356  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   357  /** \brief API to restore global interrupt with that of the passed parameter.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   358   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   359   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   360   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   361   * \param enabled Previous status of the global interrupt enable bit
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   362   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   363   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   364  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   365  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   366  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   367  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   368  /** \addtogroup IfxLld_Cpu_Std_Cache
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   369   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   370  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   371  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   372  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   373  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   374  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   375  /** \brief API to enable/ disable the data cacheability for selected segments
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   376   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   377   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   378   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   379   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   380   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   381   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   382  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   383  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   384  /** \brief API to enable/ disable the instruction cacheability for selected segments
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   385   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   386   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   387   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   388   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   389   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   390   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   391  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   392  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   393  /** \brief API to invalidate the program cache
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   394   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   395   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   396  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   397  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   398  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   399   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   400   * \return Status TRUE/FALSE
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   401   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   402  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   403  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   404  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   405   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   406   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   407   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   408   * \param enable Command to enable or bypass the data cache
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   409   * TRUE: Enable the data cache.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   410   * FALSE: Bypass the data cache.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   411   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   412   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   413  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   414  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   415  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   416   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   417   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   418   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   419   * \param enable Command to enable or bypass the program cache.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   420   * TRUE: Enable the program cache.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   421   * FALSE: Bypass the program cache
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   422   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   423   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   424  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   425  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   426  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   427  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   428  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   429   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   430  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   431  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   432  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   433  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   434  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   435  /** \brief API to read the clock counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   436   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   437   * This API can be used to read clock counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   438   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   439   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   440   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   441  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   442  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   443  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   444   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   445   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   446   * It cannot be used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   447   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   448   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   449   * reading the counter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   450   * \return Status of sticky overflow bit.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   451   * \retval TRUE: Sticky overflow bit is set.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   452   * \retval FALSE: Sticky overflow bit is reset
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   453   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   454  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   455  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   456  /** \brief API to read the instruction counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   457   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   458   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   459   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   460   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   461   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   462  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   463  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   464  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   465   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   466   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   467   * It cannot be used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   468   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   469   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   470   * reading the counter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   471   * \return Status of sticky overflow bit.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   472   * \retval TRUE: Sticky overflow bit is set.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   473   * \retval FALSE: Sticky overflow bit is reset
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   474   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   475  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   476  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   477  /** \brief API to read the performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   478   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   479   * \return counter value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   480   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   481  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint16 address);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   482  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   483  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   484   * This is generic function to get sticky overflow bit of any performance counters
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   485   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   486   * \return Status
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   487   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   488  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint16 address);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   489  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   490  /** \brief Reset and start instruction, clock and multi counters
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   491   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   492   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   493   * \param mode Counter mode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   494   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   495   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   496  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   497  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   498  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   500   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   501   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   502   * \param enable enable Command to enable or disable the performance counter.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   503   * TRUE: Enable the performance counter.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   504   * FALSE: Disable the performance counter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   505   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   506   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   507  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   508  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   509  #if !((defined(__cplusplus)) && (defined(__TASKING__)))
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   510  /** \brief Stop instruction and clock counters, return their values
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   511   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   512   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   513   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   514   * \return Performance counter result
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   515   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   516  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   517  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   518  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   519  /** \brief API to update clock counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   520   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   521   * This API can be used to update clock counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   522   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   523   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   524   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   525   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   526  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   527  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   528  /** \brief API to update Instruction counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   529   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   530   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   531   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   532   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   533   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   534   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   535  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   536  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   537  /** \brief API to update performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   538   * This is generic function to update any of the performance counters
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   539   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   540   * \param count Count
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   541   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   542   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   543  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   544  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   545  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   546  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   547  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   548   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   549  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   550  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   551  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   552  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   553  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   554  /** \brief API to acquire the mutex (binary semaphore).
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   555   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   556   * This API can be used to acquire/get the mutex.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   557   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   558   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   559   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   560   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   561   *    IfxCpu_mutexLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   562   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   563   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   564   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   565   *      IfxCpu_releaseMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   566   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   567   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   568   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   569   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   570  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   571  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   572  /** \brief API to unlock the mutex .
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   573   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   574   * This API can be used to unlock the previously acquired mutex
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   575   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   576   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   577   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   578   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   579   *    IfxCpu_mutexLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   580   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   581   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   582   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   583   *      IfxCpu_releaseMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   584   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   585   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   586   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   587   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   588  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   589  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   590  /** \brief API to unlock the resource .
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   591   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   592   * This API can be used to unlock the previously acquired lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   593   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   594   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   595   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   596  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   597  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   598  /** \brief API to lock the resource in spin mode with the given timeout.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   599   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   600   * This API can be used to spin lock for the lock for the given timeout period.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   601   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   602   * \param timeoutCount loop counter value used for timeout to acquire lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   603   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   604   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   605   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   606   *    IfxCpu_spinLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   607   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   608   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   609   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   610   *      IfxCpu_resetSpinLock(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   611   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   612   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   613   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   614   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   615  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   616  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   617  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   618  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   619  /** \addtogroup IfxLld_Cpu_Std_Utility
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   620   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   621  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   622  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   623  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   624  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   625  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   626  /** \brief This function disables the overlay memory.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   627   * \param cpu Core no
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   628   * \param overlayBlock Overlay Block
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   629   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   630   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   631  IFX_EXTERN void IfxCpu_disableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   632  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   633  /** \brief This function configures and enables the overlay memory.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   634   * Note:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   635   * The data overlay provides the capability to redirect selected data accesses to the Overlay memory. Data accesses made by the TriCore to Program Flash, Online Data Acquisition space, or EBU space can be redirected. Overlay memory may be located in the Local Memory (if present), in the Emulation Memory (Emulation Device only), or in the EBU space,or in the DPSR/PSPR memory.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   636   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   637   * How the overlay Memory works?
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   638   * Any data access to segment 8 or segment A is checked against all the activated overlay blocks. For each activated overlay block, address bits 27..5 are compared with the target base address , and this bit-wise comparison is qualified by the content of address mask. Address bits participate in the comparison if the corresponding mask bits are set to one. The access is redirected, if all the address bits selected by mask equal to the corresponding bits in target address.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   639   * The address for redirection is constructed as follows:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   640   * 1. Address bits 31..22 are set according to the overlay memory selection and the cache-ability of the original address.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   641   * 2. For address bits 21..5:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   642   * - If the corresponding address mask bit is set, the address bit value is taken from overlay base address .
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   643   * - If the corresponding address mask bit is cleared, the address bit value is taken from the original address.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   644   * 3. Address bits 4..0 are always taken directly from the original address.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   645   * If there is no redirection, the original address is used to perform the access.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   646   * Target address ranges for activated overlay blocks should not overlap or an exception may occur.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   647   * \param cpu Core no
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   648   * \param overlayBlock Overlay Block
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   649   * \param overlayMemorySelect Overlay Memory Select
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   650   * \param overlayAddressMask overlay Address Mask
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   651   * \param targetBaseAddress Target Base address (i.e Source address to be re-directed)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   652   * \param overlayBaseAddress Overlay or Re-directed Base address (Bits 21..5 of the base address the overlay memory block in the overlay memory)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   653   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   654   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   655  IFX_EXTERN void IfxCpu_enableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock, IfxCpu_OverlayMemorySelect overlayMemorySelect, IfxCpu_OverlayAddressMask overlayAddressMask, uint32 targetBaseAddress, uint32 overlayBaseAddress);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   656  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   657  /** \brief API to get random value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   658   * \param seed Pointer to seed value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   659   * \return random value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   660   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   661  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   662  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   663  /** \brief API to get random value with in the range
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   664   * \param seed Pointer to seed value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   665   * \param min minimum range value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   666   * \param max maximum range value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   667   * \return random value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   668   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   669  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   670  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   671  /** \brief This function waits till all the cores have set their corresponding bits in the event. This function along with
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   672   * IfxCpu_emitEvent() are used to achieve the synchronisation between the configured cores. By default
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   673   * "IFXCPU_CFG_ALLCORE_DONE" macro defined for all the cores. In case the user wants to check for
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   674   * synchronisation among the required cores, the macro can be redefined with the value accroing to the
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   675   * CORE_ID register.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   676   * The IfxCpu_emitEvent() is to be used in the Main functions of the Cores where the user wants to check for synchronisation.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   677   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   678   * e.g:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   679   * 1. Check for synchronisation between core 0 and core 5
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   680   * # define 0x41U
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   681   * 2. Check for synchronisation between core 0 to core 5
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   682   * # define 0x5FU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   683   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   684   * Note:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   685   * Core id values read from CORE_ID register will be as shown below. The value indicates the position of the bit needs to be set while building the macro.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   686   * Core 0: 0
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   687   * Core 1: 1
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   688   * Core 2: 2
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   689   * Core 3: 3
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   690   * Core 4: 4
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   691   * Core 5: 6
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   692   * \param event Synchronous Event
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   693   * \param timeoutMilliSec timeout in millisec
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   694   * \return Error condition
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   695   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   696   * The functions IfxCpu_waitEvent and IfxCpu_emitEvent are used to achieve synchronisation between all cores (i.e individual cores wait till all cores have reached the synchronisation point). The IfxCpu_waitEvent returns 1 incase a timeout occurs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   697   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   698   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   699   * // Global variable. preferably located in  shared memory.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   700   * IfxCpu_syncEvent event;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   701   * boolean errorVal;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   702   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   703   * // Below code should be repeated in Each core
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   704   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   705   * // Upon reaching Synchonisation point
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   706   * IfxCpu_emitEvent(&event);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   707   * errorVal = IfxCpu_waitEvent(&event, timeoutMilliSec); // timeoutMilliSec is timeout value to wait
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   708   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   709   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   710   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   711   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   712  IFX_EXTERN boolean IfxCpu_waitEvent(IfxCpu_syncEvent *event, uint32 timeoutMilliSec);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   713  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   714  /** \brief This function sets a bit corresponding to the core in the event.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   715   * \param event Synchronous Event
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   716   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   717   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   718   * A coding example can be found in \ref IfxCpu_waitEvent
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   719   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   720   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   721  IFX_EXTERN void IfxCpu_emitEvent(IfxCpu_syncEvent *event);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   722  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   723  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   724  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   725  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   726  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   727  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   728  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   729  /** \brief Sets all CPUs to Idle mode except the Master CPU,index of which is given as the parameter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   730   * \param masterCpu Master CPU Index- All except this will be set to Idle Mode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   731   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   732   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   733  IFX_EXTERN void IfxCpu_setAllIdleExceptMasterCpu(IfxCpu_ResourceCpu masterCpu);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   734  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   735  /** \brief Disables interrupts for all CPUs except the Master CPU,index of which is given as the parameter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   736   * \param masterCpu Master CPU Index- All except this will have their interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   737   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   738   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   739  IFX_EXTERN void IfxCpu_disableInterruptsAllExceptMaster(IfxCpu_ResourceCpu masterCpu);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   740  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   741  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   742  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   743  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   744  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   745  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   746  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   747      Ifx_CPU_ICR reg;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   748      reg.U = __mfcr(CPU_ICR);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   749      return reg.B.IE != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   750  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   751  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   752  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   753  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   754  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   755      boolean enabled;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   756      enabled = IfxCpu_areInterruptsEnabled();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   757      __disable();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   758      __nop();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   759      return enabled;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   760  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   761  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   762  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   763  IFX_INLINE void IfxCpu_enableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   764  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   765      __enable();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   766  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   767  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   768  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   769  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   770  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   771      uint32 cpu_pmaVal;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   772      uint16 checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   773      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   774      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   775  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   776      /*resolve the restrictions*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   777      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   778      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xC);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   779  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   780      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   781      {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   782          segmentNumberMask |= checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   783      }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   784  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   785      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   786  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   787      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   788  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   789      /*The CPU_PMA registers are ENDINIT protected*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   790      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   791      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   792      /*Write to PMA0 register for selecting the cacheability for data cache*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   793      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   794      __mtcr(CPU_PMA0, cpu_pmaVal);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   795      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   796      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   797  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   798  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   799  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   800  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   801  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   802      uint32 cpu_pmaVal;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   803      uint16 checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   804      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   805      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   806  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   807      /*resolve the restrictions*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   808      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   809      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xD);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   810  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   811      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   812      {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   813          segmentNumberMask |= checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   814      }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   815  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   816      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   817  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   818      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   819  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   820      /*The CPU_PMA registers are ENDINIT protected*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   821      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   822      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   823      /*Write to PMA1 register for selecting the cacheability for data cache*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   824      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   825      __mtcr(CPU_PMA1, cpu_pmaVal);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   826      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   827      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   828  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   829  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   830  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   831  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   832  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   833      __disable();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   834      __nop();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   835  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   836  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   837  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   838  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   839  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   840      Ifx_CPU *module;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   841  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   842      if (cpu < IfxCpu_ResourceCpu_none)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   843      {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   844          module = (Ifx_CPU *)IfxCpu_cfg_indexMap[cpu].module;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   845      }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   846      else
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   847      {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   848          module = NULL_PTR;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   849      }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   850  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   851      return module;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   852  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   853  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   854  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   855  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   856  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   857      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   858  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   859  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   860  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   861  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   862  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   863      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   864  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   865  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   866  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   867  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   868  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   869      Ifx_CPU_CORE_ID reg;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   870      reg.U = __mfcr(CPU_CORE_ID);
	mfcr	d15,#65052
.L362:

; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   871      return (IfxCpu_Id)reg.B.CORE_ID;
	fcall	.cocofun_2
.L206:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   149  {
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   150      volatile IfxCpu_Trap trapWatch;
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   151      trapWatch = IfxCpu_Trap_extractTrapInfo(IfxCpu_Trap_Class_instructionErrors, tin);
	st.d	[a10]0,e0
.L199:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   152      IFX_CFG_CPU_TRAP_IE_HOOK(trapWatch);
	ld.d	e0,[a10]0
.L364:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   153      IFX_CFG_CPU_TRAP_DEBUG;
	debug
.L423:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   154      __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
	rslcx
.L424:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   155      __asm("rfe");
	rfe
.L425:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   156  }
	ret
.L194:
	
__IfxCpu_Trap_instructionError_function_end:
	.size	IfxCpu_Trap_instructionError,__IfxCpu_Trap_instructionError_function_end-IfxCpu_Trap_instructionError
.L62:
	; End of function
	
	.sdecl	'.text.IfxCpu_Trap.IfxCpu_Trap_contextManagementError',code,cluster('IfxCpu_Trap_contextManagementError')
	.sect	'.text.IfxCpu_Trap.IfxCpu_Trap_contextManagementError'
	.align	2
	
	.global	IfxCpu_Trap_contextManagementError

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   157  
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   158  
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   159  void IfxCpu_Trap_contextManagementError(uint32 tin)
; Function IfxCpu_Trap_contextManagementError
.L11:
IfxCpu_Trap_contextManagementError:	.type	func
	sub.a	a10,#8
.L212:

; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   348      __asm("mov.aa %0, a11": "=a" (res) : :"a11");      (inlined)
	
	mov.aa a15, a11
.L366:
	
.L430:
	mov.d	d0,a15
.L217:
	insert	d1,d1,#3,#8,#8
.L431:
	insert	d1,d1,d4,#0,#8
.L219:

; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    42   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    43   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    44   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    45   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    46   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    47   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    48   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    49   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    50   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    51   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    52   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    53   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    54   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    55   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    56   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    57   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    58   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    59  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    60  #ifndef IFXCPU_H
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    61  #define IFXCPU_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    62  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    63  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    64  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    65  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    66  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    67  #include "_Impl/IfxCpu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    68  #include "IfxSrc_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    69  #include "IfxScu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    70  #include "IfxStm_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    71  #include "_Impl/IfxScu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    72  #include "_Utilities/Ifx_Assert.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    73  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    74  #include "Scu/Std/IfxScuCcu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    75  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    76  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    77  /*-----------------------------------Macros-----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    78  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    79  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    80  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    81   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    82   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    83   * the CPU number.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    84   * Example usage:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    85   *  \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    86   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    87   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    88   *  \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    89   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    90  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    91  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    92  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    93   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    94   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    95   * the CPU number.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    96   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    97   *   Example usage:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    98   *   \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    99   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   100   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   101   *   \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   102   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   103  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   104  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   105  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   106  /*------------------------------Type Definitions------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   107  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   108  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   109  /** \brief Lock type Spin lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   110   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   111  typedef unsigned int IfxCpu_spinLock;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   112  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   113  /** \brief Lock type Mutex lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   114   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   115  typedef unsigned int IfxCpu_mutexLock;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   116  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   117  /** \brief Event used for synchronisation.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   118   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   119  typedef unsigned int IfxCpu_syncEvent;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   120  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   121  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   122  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   123  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   124  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   125  /** \addtogroup IfxLld_Cpu_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   126   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   127  /** \brief Enumeration for the Cpu mode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   128   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   129  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   130  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   131      IfxCpu_CoreMode_halt,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   132      IfxCpu_CoreMode_run,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   133      IfxCpu_CoreMode_idle,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   134      IfxCpu_CoreMode_sleep,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   135      IfxCpu_CoreMode_stby,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   136      IfxCpu_CoreMode_unknown
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   137  } IfxCpu_CoreMode;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   138  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   139  /** \brief Performance conunter modes
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   140   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   141  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   142  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   143      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   144      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   145  } IfxCpu_CounterMode;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   147  /** \brief Overlay Address Mask: determines the overlay block size and the bits used for address comparison and translation
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   148   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   149  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   150  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   151      IfxCpu_OverlayAddressMask_32byte  = 0xFFF,  /**< \brief 32 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   152      IfxCpu_OverlayAddressMask_64byte  = 0xFFE,  /**< \brief 64 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   153      IfxCpu_OverlayAddressMask_128byte = 0xFFC,  /**< \brief 128 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   154      IfxCpu_OverlayAddressMask_256byte = 0xFF8,  /**< \brief 256 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   155      IfxCpu_OverlayAddressMask_512byte = 0xFF0,  /**< \brief 512 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   156      IfxCpu_OverlayAddressMask_1KB     = 0xFE0,  /**< \brief 1K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   157      IfxCpu_OverlayAddressMask_2KB     = 0xFC0,  /**< \brief 2K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   158      IfxCpu_OverlayAddressMask_4KB     = 0xF80,  /**< \brief 4K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   159      IfxCpu_OverlayAddressMask_8KB     = 0xF00,  /**< \brief 8K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   160      IfxCpu_OverlayAddressMask_16KB    = 0xE00,  /**< \brief 16K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   161      IfxCpu_OverlayAddressMask_32KB    = 0xC00,  /**< \brief 32K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   162      IfxCpu_OverlayAddressMask_64KB    = 0x800,  /**< \brief 64K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   163      IfxCpu_OverlayAddressMask_128KB   = 0x0     /**< \brief 128K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   164  } IfxCpu_OverlayAddressMask;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   165  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   166  /** \brief Selects overlay memory used for redirection
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   167   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   168  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   169  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   170      IfxCpu_OverlayMemorySelect_core0DsprPspr = 0,  /**< \brief Redirection to Core 0 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   171      IfxCpu_OverlayMemorySelect_core1DsprPspr = 1,  /**< \brief Redirection to Core 1 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   172      IfxCpu_OverlayMemorySelect_core2DsprPspr = 2,  /**< \brief Redirection to Core 2 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   173      IfxCpu_OverlayMemorySelect_core3DsprPspr = 3,  /**< \brief Redirection to Core 3 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   174      IfxCpu_OverlayMemorySelect_core4DsprPspr = 4,  /**< \brief Redirection to Core 4 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   175      IfxCpu_OverlayMemorySelect_core5DsprPspr = 5,  /**< \brief Redirection to Core 5 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   176      IfxCpu_OverlayMemorySelect_lmu           = 8,  /**< \brief Redirection to LMU memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   177      IfxCpu_OverlayMemorySelect_emem          = 9,  /**< \brief Redirection to EMEM memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   178      IfxCpu_OverlayMemorySelect_ebu           = 10  /**< \brief Redirection to EBU memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   179  } IfxCpu_OverlayMemorySelect;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   180  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   181  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   182  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   183      IfxCpu_ResetStatus_notCpuReset   = 0,  /**< \brief No Kernel Reset was executed */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   184      IfxCpu_ResetStatus_cpuResetBySmu = 1,  /**< \brief Kernel reset was requested by hardware since last clear (SMU) */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   185      IfxCpu_ResetStatus_cpuResetBySw  = 2   /**< \brief Kernel reset was requested by software since last clear (by writing KRST0.RST=1 and KRST1.RST=1) */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   186  } IfxCpu_ResetStatus;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   187  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   188  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   189  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   190  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   191  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   192  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   193  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   194  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   195   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   196  /** \brief counter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   197   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   198  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   199  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   200      uint32  counter;        /**< \brief Counter value */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   201      boolean overlfow;       /**< \brief sticky overlfow */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   202  } IfxCpu_Counter;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   203  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   204  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   205  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   206  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   207   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   208  /** \brief Performance counter result
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   209   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   210  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   211  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   212      IfxCpu_Counter instruction;       /**< \brief Instruction counter */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   213      IfxCpu_Counter clock;             /**< \brief CPU clock counter */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   214      IfxCpu_Counter counter1;          /**< \brief Multi counter 1 */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   215      IfxCpu_Counter counter2;          /**< \brief Multi counter 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   216      IfxCpu_Counter counter3;          /**< \brief Multi counter 3 */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   217  } IfxCpu_Perf;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   218  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   219  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   221  /** \addtogroup IfxLld_Cpu_Std_Core
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   222   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   223  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   224  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   225  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   226  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   227  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   228  /** \brief API to get the address for CPU HW module register memory map
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   229   * \param cpu Resource index of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   230   * \return CPU module register address
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   231   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   232  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   233  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   234  /** \brief API to get core id of the CPU of the caller.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   235   * Caution: Core id of the cpu's may not be continguous and shouldn't be used to index cpu.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   236   * Use IfxCpu_getCoreIndex() to get cpu no.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   237   * \return Resource index of the CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   238   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   239  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   240  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   241  /** \brief API to get cpu index of the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   242   * Note: This api can be used whereever cpu no/index is needed.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   243   * \return Resource index of the CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   244   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   245  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   246  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   247  /** \brief API to initialize the context save area of the CPU where this is called.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   248   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   249   * This API can initialize the CSA of the host CPU where this API is called. This API
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   250   * shall not be used to initialize the CSA of another CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   251   * \param csaBegin Pointer to start of context save area
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   252   * \param csaEnd Pointer to end of context save area
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   253   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   254   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   255  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   256  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   257  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   258   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   259   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   260  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   261  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   262  /** \brief Triggers Software Reset
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   263   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   264   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   265  IFX_INLINE void IfxCpu_triggerSwReset(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   266  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   267  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   268  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   269  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   271  /** \brief API to get current mode of CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   272   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   273   * \return Current mode of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   274   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   275  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   276  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   277  /** \brief API to get current mode of CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   278   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   279   * \return Resource index of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   280   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   281  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   282  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   283  /** \brief API to set mode of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   284   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   285   * \param mode CPU mode to be set by this API
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   286   * \return Success status of the activity (setting the core mode).
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   287   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   288   * \retval FALSE: If the activity can't be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   289   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   290  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   291  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   292  /** \brief API to set the program counter for the CPU specified.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   293   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   294   * \param programCounter Program counter value to be set
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   295   * \return success status of the activity (setting program counter value).
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   296   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   297   * \retval FALSE: If the activity can't be performed
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   298   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   299  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   300  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   301  /** \brief API to set the program counter for the CPU specified and start the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   302   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   303   * \param programCounter Program counter value to start the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   304   * \return success status of the activity (setting program counter value).
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   305   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   306   * \retval FALSE: If the activity can't be performed
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   307   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   308  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   309  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   310  /** \brief To request reset of a particular core, given by coreId
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   311   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   312   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   313  IFX_EXTERN void IfxCpu_triggerCpuReset(IfxCpu_ResourceCpu coreIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   314  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   315  /** \brief Retrieve the cause of reset(no reset, hardware(SMU) or software) since last clear by reading KRST0.RSTSTAT and clear it.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   316   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   317  IFX_EXTERN IfxCpu_ResetStatus IfxCpu_getCpuResetStatus(IfxCpu_ResourceCpu coreIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   318  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   319  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   320  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   321  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   322   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   323  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   324  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   325  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   326  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   327  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   328  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   329   * This API provides the status of CPU where this API is called
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   330   * \return Status of global interrupt enable bit.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   331   * \retval TRUE: Global interrupts enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   332   * \retval FALSE: Global interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   333   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   334  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   335  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   336  /** \brief API to disable global interrupt and return the previous status.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   337   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   338   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   339   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   340   * \return Previous status of global interrupt enable bit.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   341   * \retval TRUE: Previously, global interrupts enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   342   * \retval FALSE: Previously, global interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   343   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   344  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   345  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   346  /** \brief API to enable global interrupt.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   347   * This API simply enables the global interrupt.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   348   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   349   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   350  IFX_INLINE void IfxCpu_enableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   351  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   352  /** \brief Disable the Global Interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   353   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   354   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   355  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   356  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   357  /** \brief API to restore global interrupt with that of the passed parameter.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   358   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   359   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   360   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   361   * \param enabled Previous status of the global interrupt enable bit
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   362   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   363   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   364  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   365  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   366  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   367  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   368  /** \addtogroup IfxLld_Cpu_Std_Cache
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   369   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   370  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   371  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   372  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   373  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   374  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   375  /** \brief API to enable/ disable the data cacheability for selected segments
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   376   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   377   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   378   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   379   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   380   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   381   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   382  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   383  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   384  /** \brief API to enable/ disable the instruction cacheability for selected segments
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   385   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   386   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   387   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   388   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   389   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   390   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   391  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   392  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   393  /** \brief API to invalidate the program cache
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   394   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   395   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   396  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   397  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   398  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   399   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   400   * \return Status TRUE/FALSE
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   401   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   402  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   403  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   404  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   405   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   406   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   407   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   408   * \param enable Command to enable or bypass the data cache
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   409   * TRUE: Enable the data cache.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   410   * FALSE: Bypass the data cache.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   411   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   412   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   413  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   414  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   415  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   416   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   417   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   418   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   419   * \param enable Command to enable or bypass the program cache.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   420   * TRUE: Enable the program cache.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   421   * FALSE: Bypass the program cache
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   422   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   423   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   424  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   425  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   426  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   427  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   428  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   429   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   430  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   431  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   432  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   433  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   434  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   435  /** \brief API to read the clock counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   436   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   437   * This API can be used to read clock counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   438   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   439   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   440   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   441  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   442  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   443  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   444   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   445   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   446   * It cannot be used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   447   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   448   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   449   * reading the counter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   450   * \return Status of sticky overflow bit.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   451   * \retval TRUE: Sticky overflow bit is set.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   452   * \retval FALSE: Sticky overflow bit is reset
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   453   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   454  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   455  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   456  /** \brief API to read the instruction counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   457   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   458   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   459   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   460   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   461   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   462  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   463  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   464  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   465   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   466   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   467   * It cannot be used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   468   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   469   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   470   * reading the counter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   471   * \return Status of sticky overflow bit.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   472   * \retval TRUE: Sticky overflow bit is set.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   473   * \retval FALSE: Sticky overflow bit is reset
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   474   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   475  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   476  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   477  /** \brief API to read the performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   478   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   479   * \return counter value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   480   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   481  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint16 address);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   482  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   483  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   484   * This is generic function to get sticky overflow bit of any performance counters
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   485   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   486   * \return Status
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   487   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   488  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint16 address);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   489  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   490  /** \brief Reset and start instruction, clock and multi counters
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   491   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   492   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   493   * \param mode Counter mode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   494   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   495   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   496  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   497  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   498  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   500   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   501   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   502   * \param enable enable Command to enable or disable the performance counter.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   503   * TRUE: Enable the performance counter.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   504   * FALSE: Disable the performance counter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   505   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   506   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   507  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   508  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   509  #if !((defined(__cplusplus)) && (defined(__TASKING__)))
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   510  /** \brief Stop instruction and clock counters, return their values
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   511   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   512   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   513   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   514   * \return Performance counter result
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   515   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   516  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   517  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   518  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   519  /** \brief API to update clock counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   520   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   521   * This API can be used to update clock counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   522   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   523   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   524   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   525   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   526  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   527  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   528  /** \brief API to update Instruction counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   529   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   530   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   531   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   532   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   533   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   534   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   535  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   536  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   537  /** \brief API to update performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   538   * This is generic function to update any of the performance counters
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   539   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   540   * \param count Count
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   541   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   542   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   543  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   544  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   545  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   546  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   547  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   548   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   549  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   550  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   551  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   552  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   553  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   554  /** \brief API to acquire the mutex (binary semaphore).
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   555   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   556   * This API can be used to acquire/get the mutex.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   557   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   558   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   559   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   560   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   561   *    IfxCpu_mutexLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   562   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   563   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   564   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   565   *      IfxCpu_releaseMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   566   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   567   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   568   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   569   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   570  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   571  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   572  /** \brief API to unlock the mutex .
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   573   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   574   * This API can be used to unlock the previously acquired mutex
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   575   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   576   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   577   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   578   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   579   *    IfxCpu_mutexLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   580   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   581   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   582   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   583   *      IfxCpu_releaseMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   584   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   585   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   586   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   587   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   588  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   589  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   590  /** \brief API to unlock the resource .
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   591   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   592   * This API can be used to unlock the previously acquired lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   593   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   594   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   595   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   596  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   597  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   598  /** \brief API to lock the resource in spin mode with the given timeout.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   599   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   600   * This API can be used to spin lock for the lock for the given timeout period.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   601   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   602   * \param timeoutCount loop counter value used for timeout to acquire lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   603   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   604   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   605   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   606   *    IfxCpu_spinLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   607   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   608   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   609   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   610   *      IfxCpu_resetSpinLock(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   611   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   612   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   613   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   614   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   615  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   616  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   617  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   618  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   619  /** \addtogroup IfxLld_Cpu_Std_Utility
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   620   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   621  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   622  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   623  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   624  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   625  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   626  /** \brief This function disables the overlay memory.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   627   * \param cpu Core no
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   628   * \param overlayBlock Overlay Block
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   629   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   630   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   631  IFX_EXTERN void IfxCpu_disableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   632  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   633  /** \brief This function configures and enables the overlay memory.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   634   * Note:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   635   * The data overlay provides the capability to redirect selected data accesses to the Overlay memory. Data accesses made by the TriCore to Program Flash, Online Data Acquisition space, or EBU space can be redirected. Overlay memory may be located in the Local Memory (if present), in the Emulation Memory (Emulation Device only), or in the EBU space,or in the DPSR/PSPR memory.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   636   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   637   * How the overlay Memory works?
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   638   * Any data access to segment 8 or segment A is checked against all the activated overlay blocks. For each activated overlay block, address bits 27..5 are compared with the target base address , and this bit-wise comparison is qualified by the content of address mask. Address bits participate in the comparison if the corresponding mask bits are set to one. The access is redirected, if all the address bits selected by mask equal to the corresponding bits in target address.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   639   * The address for redirection is constructed as follows:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   640   * 1. Address bits 31..22 are set according to the overlay memory selection and the cache-ability of the original address.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   641   * 2. For address bits 21..5:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   642   * - If the corresponding address mask bit is set, the address bit value is taken from overlay base address .
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   643   * - If the corresponding address mask bit is cleared, the address bit value is taken from the original address.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   644   * 3. Address bits 4..0 are always taken directly from the original address.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   645   * If there is no redirection, the original address is used to perform the access.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   646   * Target address ranges for activated overlay blocks should not overlap or an exception may occur.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   647   * \param cpu Core no
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   648   * \param overlayBlock Overlay Block
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   649   * \param overlayMemorySelect Overlay Memory Select
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   650   * \param overlayAddressMask overlay Address Mask
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   651   * \param targetBaseAddress Target Base address (i.e Source address to be re-directed)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   652   * \param overlayBaseAddress Overlay or Re-directed Base address (Bits 21..5 of the base address the overlay memory block in the overlay memory)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   653   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   654   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   655  IFX_EXTERN void IfxCpu_enableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock, IfxCpu_OverlayMemorySelect overlayMemorySelect, IfxCpu_OverlayAddressMask overlayAddressMask, uint32 targetBaseAddress, uint32 overlayBaseAddress);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   656  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   657  /** \brief API to get random value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   658   * \param seed Pointer to seed value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   659   * \return random value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   660   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   661  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   662  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   663  /** \brief API to get random value with in the range
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   664   * \param seed Pointer to seed value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   665   * \param min minimum range value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   666   * \param max maximum range value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   667   * \return random value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   668   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   669  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   670  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   671  /** \brief This function waits till all the cores have set their corresponding bits in the event. This function along with
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   672   * IfxCpu_emitEvent() are used to achieve the synchronisation between the configured cores. By default
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   673   * "IFXCPU_CFG_ALLCORE_DONE" macro defined for all the cores. In case the user wants to check for
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   674   * synchronisation among the required cores, the macro can be redefined with the value accroing to the
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   675   * CORE_ID register.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   676   * The IfxCpu_emitEvent() is to be used in the Main functions of the Cores where the user wants to check for synchronisation.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   677   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   678   * e.g:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   679   * 1. Check for synchronisation between core 0 and core 5
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   680   * # define 0x41U
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   681   * 2. Check for synchronisation between core 0 to core 5
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   682   * # define 0x5FU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   683   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   684   * Note:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   685   * Core id values read from CORE_ID register will be as shown below. The value indicates the position of the bit needs to be set while building the macro.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   686   * Core 0: 0
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   687   * Core 1: 1
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   688   * Core 2: 2
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   689   * Core 3: 3
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   690   * Core 4: 4
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   691   * Core 5: 6
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   692   * \param event Synchronous Event
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   693   * \param timeoutMilliSec timeout in millisec
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   694   * \return Error condition
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   695   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   696   * The functions IfxCpu_waitEvent and IfxCpu_emitEvent are used to achieve synchronisation between all cores (i.e individual cores wait till all cores have reached the synchronisation point). The IfxCpu_waitEvent returns 1 incase a timeout occurs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   697   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   698   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   699   * // Global variable. preferably located in  shared memory.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   700   * IfxCpu_syncEvent event;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   701   * boolean errorVal;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   702   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   703   * // Below code should be repeated in Each core
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   704   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   705   * // Upon reaching Synchonisation point
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   706   * IfxCpu_emitEvent(&event);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   707   * errorVal = IfxCpu_waitEvent(&event, timeoutMilliSec); // timeoutMilliSec is timeout value to wait
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   708   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   709   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   710   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   711   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   712  IFX_EXTERN boolean IfxCpu_waitEvent(IfxCpu_syncEvent *event, uint32 timeoutMilliSec);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   713  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   714  /** \brief This function sets a bit corresponding to the core in the event.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   715   * \param event Synchronous Event
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   716   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   717   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   718   * A coding example can be found in \ref IfxCpu_waitEvent
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   719   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   720   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   721  IFX_EXTERN void IfxCpu_emitEvent(IfxCpu_syncEvent *event);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   722  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   723  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   724  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   725  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   726  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   727  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   728  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   729  /** \brief Sets all CPUs to Idle mode except the Master CPU,index of which is given as the parameter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   730   * \param masterCpu Master CPU Index- All except this will be set to Idle Mode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   731   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   732   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   733  IFX_EXTERN void IfxCpu_setAllIdleExceptMasterCpu(IfxCpu_ResourceCpu masterCpu);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   734  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   735  /** \brief Disables interrupts for all CPUs except the Master CPU,index of which is given as the parameter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   736   * \param masterCpu Master CPU Index- All except this will have their interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   737   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   738   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   739  IFX_EXTERN void IfxCpu_disableInterruptsAllExceptMaster(IfxCpu_ResourceCpu masterCpu);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   740  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   741  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   742  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   743  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   744  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   745  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   746  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   747      Ifx_CPU_ICR reg;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   748      reg.U = __mfcr(CPU_ICR);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   749      return reg.B.IE != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   750  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   751  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   752  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   753  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   754  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   755      boolean enabled;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   756      enabled = IfxCpu_areInterruptsEnabled();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   757      __disable();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   758      __nop();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   759      return enabled;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   760  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   761  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   762  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   763  IFX_INLINE void IfxCpu_enableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   764  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   765      __enable();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   766  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   767  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   768  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   769  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   770  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   771      uint32 cpu_pmaVal;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   772      uint16 checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   773      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   774      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   775  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   776      /*resolve the restrictions*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   777      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   778      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xC);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   779  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   780      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   781      {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   782          segmentNumberMask |= checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   783      }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   784  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   785      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   786  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   787      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   788  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   789      /*The CPU_PMA registers are ENDINIT protected*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   790      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   791      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   792      /*Write to PMA0 register for selecting the cacheability for data cache*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   793      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   794      __mtcr(CPU_PMA0, cpu_pmaVal);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   795      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   796      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   797  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   798  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   799  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   800  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   801  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   802      uint32 cpu_pmaVal;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   803      uint16 checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   804      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   805      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   806  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   807      /*resolve the restrictions*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   808      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   809      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xD);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   810  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   811      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   812      {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   813          segmentNumberMask |= checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   814      }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   815  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   816      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   817  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   818      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   819  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   820      /*The CPU_PMA registers are ENDINIT protected*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   821      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   822      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   823      /*Write to PMA1 register for selecting the cacheability for data cache*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   824      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   825      __mtcr(CPU_PMA1, cpu_pmaVal);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   826      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   827      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   828  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   829  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   830  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   831  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   832  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   833      __disable();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   834      __nop();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   835  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   836  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   837  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   838  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   839  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   840      Ifx_CPU *module;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   841  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   842      if (cpu < IfxCpu_ResourceCpu_none)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   843      {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   844          module = (Ifx_CPU *)IfxCpu_cfg_indexMap[cpu].module;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   845      }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   846      else
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   847      {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   848          module = NULL_PTR;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   849      }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   850  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   851      return module;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   852  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   853  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   854  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   855  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   856  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   857      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   858  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   859  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   860  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   861  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   862  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   863      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   864  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   865  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   866  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   867  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   868  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   869      Ifx_CPU_CORE_ID reg;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   870      reg.U = __mfcr(CPU_CORE_ID);
	mfcr	d15,#65052
.L365:

; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   871      return (IfxCpu_Id)reg.B.CORE_ID;
	fcall	.cocofun_2
.L220:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   160  {
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   161      volatile IfxCpu_Trap trapWatch;
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   162      trapWatch = IfxCpu_Trap_extractTrapInfo(IfxCpu_Trap_Class_contextManagement, tin);
	st.d	[a10]0,e0
.L213:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   163      IFX_CFG_CPU_TRAP_CME_HOOK(trapWatch);
	ld.d	e0,[a10]0
.L367:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   164      IFX_CFG_CPU_TRAP_DEBUG;
	debug
.L432:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   165      __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
	rslcx
.L433:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   166      __asm("rfe");
	rfe
.L434:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   167  }
	ret
.L208:
	
__IfxCpu_Trap_contextManagementError_function_end:
	.size	IfxCpu_Trap_contextManagementError,__IfxCpu_Trap_contextManagementError_function_end-IfxCpu_Trap_contextManagementError
.L67:
	; End of function
	
	.sdecl	'.text.IfxCpu_Trap.IfxCpu_Trap_busError',code,cluster('IfxCpu_Trap_busError')
	.sect	'.text.IfxCpu_Trap.IfxCpu_Trap_busError'
	.align	2
	
	.global	IfxCpu_Trap_busError

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   168  
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   169  
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   170  void IfxCpu_Trap_busError(uint32 tin)
; Function IfxCpu_Trap_busError
.L13:
IfxCpu_Trap_busError:	.type	func
	sub.a	a10,#8
.L226:

; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   348      __asm("mov.aa %0, a11": "=a" (res) : :"a11");      (inlined)
	
	mov.aa a15, a11
.L369:
	
.L439:
	mov.d	d0,a15
.L231:
	insert	d1,d1,#4,#8,#8
.L440:
	insert	d1,d1,d4,#0,#8
.L233:

; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    42   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    43   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    44   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    45   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    46   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    47   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    48   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    49   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    50   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    51   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    52   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    53   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    54   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    55   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    56   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    57   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    58   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    59  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    60  #ifndef IFXCPU_H
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    61  #define IFXCPU_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    62  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    63  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    64  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    65  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    66  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    67  #include "_Impl/IfxCpu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    68  #include "IfxSrc_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    69  #include "IfxScu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    70  #include "IfxStm_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    71  #include "_Impl/IfxScu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    72  #include "_Utilities/Ifx_Assert.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    73  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    74  #include "Scu/Std/IfxScuCcu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    75  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    76  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    77  /*-----------------------------------Macros-----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    78  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    79  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    80  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    81   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    82   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    83   * the CPU number.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    84   * Example usage:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    85   *  \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    86   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    87   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    88   *  \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    89   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    90  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    91  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    92  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    93   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    94   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    95   * the CPU number.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    96   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    97   *   Example usage:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    98   *   \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    99   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   100   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   101   *   \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   102   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   103  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   104  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   105  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   106  /*------------------------------Type Definitions------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   107  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   108  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   109  /** \brief Lock type Spin lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   110   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   111  typedef unsigned int IfxCpu_spinLock;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   112  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   113  /** \brief Lock type Mutex lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   114   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   115  typedef unsigned int IfxCpu_mutexLock;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   116  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   117  /** \brief Event used for synchronisation.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   118   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   119  typedef unsigned int IfxCpu_syncEvent;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   120  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   121  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   122  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   123  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   124  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   125  /** \addtogroup IfxLld_Cpu_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   126   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   127  /** \brief Enumeration for the Cpu mode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   128   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   129  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   130  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   131      IfxCpu_CoreMode_halt,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   132      IfxCpu_CoreMode_run,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   133      IfxCpu_CoreMode_idle,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   134      IfxCpu_CoreMode_sleep,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   135      IfxCpu_CoreMode_stby,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   136      IfxCpu_CoreMode_unknown
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   137  } IfxCpu_CoreMode;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   138  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   139  /** \brief Performance conunter modes
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   140   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   141  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   142  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   143      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   144      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   145  } IfxCpu_CounterMode;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   147  /** \brief Overlay Address Mask: determines the overlay block size and the bits used for address comparison and translation
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   148   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   149  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   150  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   151      IfxCpu_OverlayAddressMask_32byte  = 0xFFF,  /**< \brief 32 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   152      IfxCpu_OverlayAddressMask_64byte  = 0xFFE,  /**< \brief 64 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   153      IfxCpu_OverlayAddressMask_128byte = 0xFFC,  /**< \brief 128 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   154      IfxCpu_OverlayAddressMask_256byte = 0xFF8,  /**< \brief 256 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   155      IfxCpu_OverlayAddressMask_512byte = 0xFF0,  /**< \brief 512 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   156      IfxCpu_OverlayAddressMask_1KB     = 0xFE0,  /**< \brief 1K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   157      IfxCpu_OverlayAddressMask_2KB     = 0xFC0,  /**< \brief 2K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   158      IfxCpu_OverlayAddressMask_4KB     = 0xF80,  /**< \brief 4K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   159      IfxCpu_OverlayAddressMask_8KB     = 0xF00,  /**< \brief 8K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   160      IfxCpu_OverlayAddressMask_16KB    = 0xE00,  /**< \brief 16K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   161      IfxCpu_OverlayAddressMask_32KB    = 0xC00,  /**< \brief 32K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   162      IfxCpu_OverlayAddressMask_64KB    = 0x800,  /**< \brief 64K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   163      IfxCpu_OverlayAddressMask_128KB   = 0x0     /**< \brief 128K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   164  } IfxCpu_OverlayAddressMask;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   165  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   166  /** \brief Selects overlay memory used for redirection
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   167   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   168  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   169  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   170      IfxCpu_OverlayMemorySelect_core0DsprPspr = 0,  /**< \brief Redirection to Core 0 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   171      IfxCpu_OverlayMemorySelect_core1DsprPspr = 1,  /**< \brief Redirection to Core 1 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   172      IfxCpu_OverlayMemorySelect_core2DsprPspr = 2,  /**< \brief Redirection to Core 2 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   173      IfxCpu_OverlayMemorySelect_core3DsprPspr = 3,  /**< \brief Redirection to Core 3 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   174      IfxCpu_OverlayMemorySelect_core4DsprPspr = 4,  /**< \brief Redirection to Core 4 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   175      IfxCpu_OverlayMemorySelect_core5DsprPspr = 5,  /**< \brief Redirection to Core 5 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   176      IfxCpu_OverlayMemorySelect_lmu           = 8,  /**< \brief Redirection to LMU memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   177      IfxCpu_OverlayMemorySelect_emem          = 9,  /**< \brief Redirection to EMEM memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   178      IfxCpu_OverlayMemorySelect_ebu           = 10  /**< \brief Redirection to EBU memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   179  } IfxCpu_OverlayMemorySelect;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   180  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   181  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   182  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   183      IfxCpu_ResetStatus_notCpuReset   = 0,  /**< \brief No Kernel Reset was executed */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   184      IfxCpu_ResetStatus_cpuResetBySmu = 1,  /**< \brief Kernel reset was requested by hardware since last clear (SMU) */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   185      IfxCpu_ResetStatus_cpuResetBySw  = 2   /**< \brief Kernel reset was requested by software since last clear (by writing KRST0.RST=1 and KRST1.RST=1) */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   186  } IfxCpu_ResetStatus;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   187  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   188  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   189  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   190  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   191  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   192  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   193  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   194  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   195   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   196  /** \brief counter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   197   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   198  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   199  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   200      uint32  counter;        /**< \brief Counter value */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   201      boolean overlfow;       /**< \brief sticky overlfow */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   202  } IfxCpu_Counter;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   203  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   204  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   205  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   206  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   207   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   208  /** \brief Performance counter result
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   209   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   210  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   211  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   212      IfxCpu_Counter instruction;       /**< \brief Instruction counter */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   213      IfxCpu_Counter clock;             /**< \brief CPU clock counter */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   214      IfxCpu_Counter counter1;          /**< \brief Multi counter 1 */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   215      IfxCpu_Counter counter2;          /**< \brief Multi counter 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   216      IfxCpu_Counter counter3;          /**< \brief Multi counter 3 */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   217  } IfxCpu_Perf;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   218  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   219  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   221  /** \addtogroup IfxLld_Cpu_Std_Core
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   222   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   223  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   224  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   225  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   226  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   227  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   228  /** \brief API to get the address for CPU HW module register memory map
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   229   * \param cpu Resource index of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   230   * \return CPU module register address
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   231   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   232  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   233  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   234  /** \brief API to get core id of the CPU of the caller.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   235   * Caution: Core id of the cpu's may not be continguous and shouldn't be used to index cpu.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   236   * Use IfxCpu_getCoreIndex() to get cpu no.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   237   * \return Resource index of the CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   238   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   239  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   240  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   241  /** \brief API to get cpu index of the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   242   * Note: This api can be used whereever cpu no/index is needed.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   243   * \return Resource index of the CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   244   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   245  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   246  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   247  /** \brief API to initialize the context save area of the CPU where this is called.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   248   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   249   * This API can initialize the CSA of the host CPU where this API is called. This API
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   250   * shall not be used to initialize the CSA of another CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   251   * \param csaBegin Pointer to start of context save area
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   252   * \param csaEnd Pointer to end of context save area
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   253   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   254   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   255  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   256  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   257  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   258   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   259   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   260  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   261  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   262  /** \brief Triggers Software Reset
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   263   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   264   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   265  IFX_INLINE void IfxCpu_triggerSwReset(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   266  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   267  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   268  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   269  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   271  /** \brief API to get current mode of CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   272   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   273   * \return Current mode of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   274   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   275  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   276  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   277  /** \brief API to get current mode of CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   278   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   279   * \return Resource index of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   280   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   281  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   282  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   283  /** \brief API to set mode of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   284   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   285   * \param mode CPU mode to be set by this API
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   286   * \return Success status of the activity (setting the core mode).
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   287   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   288   * \retval FALSE: If the activity can't be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   289   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   290  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   291  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   292  /** \brief API to set the program counter for the CPU specified.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   293   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   294   * \param programCounter Program counter value to be set
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   295   * \return success status of the activity (setting program counter value).
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   296   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   297   * \retval FALSE: If the activity can't be performed
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   298   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   299  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   300  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   301  /** \brief API to set the program counter for the CPU specified and start the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   302   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   303   * \param programCounter Program counter value to start the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   304   * \return success status of the activity (setting program counter value).
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   305   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   306   * \retval FALSE: If the activity can't be performed
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   307   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   308  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   309  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   310  /** \brief To request reset of a particular core, given by coreId
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   311   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   312   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   313  IFX_EXTERN void IfxCpu_triggerCpuReset(IfxCpu_ResourceCpu coreIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   314  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   315  /** \brief Retrieve the cause of reset(no reset, hardware(SMU) or software) since last clear by reading KRST0.RSTSTAT and clear it.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   316   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   317  IFX_EXTERN IfxCpu_ResetStatus IfxCpu_getCpuResetStatus(IfxCpu_ResourceCpu coreIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   318  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   319  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   320  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   321  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   322   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   323  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   324  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   325  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   326  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   327  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   328  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   329   * This API provides the status of CPU where this API is called
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   330   * \return Status of global interrupt enable bit.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   331   * \retval TRUE: Global interrupts enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   332   * \retval FALSE: Global interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   333   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   334  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   335  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   336  /** \brief API to disable global interrupt and return the previous status.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   337   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   338   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   339   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   340   * \return Previous status of global interrupt enable bit.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   341   * \retval TRUE: Previously, global interrupts enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   342   * \retval FALSE: Previously, global interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   343   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   344  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   345  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   346  /** \brief API to enable global interrupt.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   347   * This API simply enables the global interrupt.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   348   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   349   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   350  IFX_INLINE void IfxCpu_enableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   351  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   352  /** \brief Disable the Global Interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   353   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   354   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   355  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   356  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   357  /** \brief API to restore global interrupt with that of the passed parameter.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   358   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   359   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   360   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   361   * \param enabled Previous status of the global interrupt enable bit
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   362   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   363   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   364  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   365  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   366  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   367  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   368  /** \addtogroup IfxLld_Cpu_Std_Cache
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   369   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   370  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   371  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   372  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   373  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   374  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   375  /** \brief API to enable/ disable the data cacheability for selected segments
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   376   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   377   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   378   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   379   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   380   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   381   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   382  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   383  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   384  /** \brief API to enable/ disable the instruction cacheability for selected segments
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   385   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   386   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   387   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   388   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   389   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   390   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   391  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   392  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   393  /** \brief API to invalidate the program cache
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   394   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   395   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   396  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   397  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   398  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   399   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   400   * \return Status TRUE/FALSE
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   401   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   402  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   403  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   404  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   405   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   406   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   407   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   408   * \param enable Command to enable or bypass the data cache
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   409   * TRUE: Enable the data cache.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   410   * FALSE: Bypass the data cache.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   411   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   412   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   413  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   414  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   415  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   416   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   417   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   418   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   419   * \param enable Command to enable or bypass the program cache.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   420   * TRUE: Enable the program cache.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   421   * FALSE: Bypass the program cache
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   422   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   423   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   424  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   425  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   426  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   427  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   428  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   429   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   430  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   431  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   432  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   433  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   434  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   435  /** \brief API to read the clock counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   436   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   437   * This API can be used to read clock counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   438   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   439   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   440   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   441  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   442  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   443  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   444   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   445   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   446   * It cannot be used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   447   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   448   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   449   * reading the counter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   450   * \return Status of sticky overflow bit.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   451   * \retval TRUE: Sticky overflow bit is set.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   452   * \retval FALSE: Sticky overflow bit is reset
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   453   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   454  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   455  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   456  /** \brief API to read the instruction counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   457   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   458   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   459   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   460   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   461   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   462  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   463  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   464  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   465   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   466   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   467   * It cannot be used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   468   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   469   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   470   * reading the counter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   471   * \return Status of sticky overflow bit.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   472   * \retval TRUE: Sticky overflow bit is set.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   473   * \retval FALSE: Sticky overflow bit is reset
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   474   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   475  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   476  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   477  /** \brief API to read the performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   478   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   479   * \return counter value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   480   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   481  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint16 address);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   482  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   483  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   484   * This is generic function to get sticky overflow bit of any performance counters
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   485   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   486   * \return Status
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   487   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   488  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint16 address);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   489  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   490  /** \brief Reset and start instruction, clock and multi counters
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   491   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   492   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   493   * \param mode Counter mode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   494   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   495   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   496  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   497  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   498  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   500   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   501   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   502   * \param enable enable Command to enable or disable the performance counter.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   503   * TRUE: Enable the performance counter.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   504   * FALSE: Disable the performance counter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   505   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   506   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   507  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   508  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   509  #if !((defined(__cplusplus)) && (defined(__TASKING__)))
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   510  /** \brief Stop instruction and clock counters, return their values
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   511   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   512   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   513   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   514   * \return Performance counter result
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   515   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   516  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   517  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   518  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   519  /** \brief API to update clock counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   520   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   521   * This API can be used to update clock counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   522   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   523   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   524   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   525   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   526  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   527  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   528  /** \brief API to update Instruction counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   529   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   530   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   531   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   532   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   533   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   534   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   535  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   536  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   537  /** \brief API to update performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   538   * This is generic function to update any of the performance counters
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   539   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   540   * \param count Count
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   541   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   542   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   543  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   544  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   545  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   546  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   547  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   548   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   549  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   550  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   551  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   552  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   553  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   554  /** \brief API to acquire the mutex (binary semaphore).
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   555   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   556   * This API can be used to acquire/get the mutex.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   557   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   558   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   559   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   560   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   561   *    IfxCpu_mutexLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   562   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   563   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   564   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   565   *      IfxCpu_releaseMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   566   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   567   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   568   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   569   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   570  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   571  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   572  /** \brief API to unlock the mutex .
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   573   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   574   * This API can be used to unlock the previously acquired mutex
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   575   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   576   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   577   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   578   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   579   *    IfxCpu_mutexLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   580   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   581   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   582   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   583   *      IfxCpu_releaseMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   584   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   585   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   586   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   587   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   588  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   589  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   590  /** \brief API to unlock the resource .
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   591   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   592   * This API can be used to unlock the previously acquired lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   593   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   594   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   595   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   596  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   597  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   598  /** \brief API to lock the resource in spin mode with the given timeout.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   599   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   600   * This API can be used to spin lock for the lock for the given timeout period.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   601   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   602   * \param timeoutCount loop counter value used for timeout to acquire lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   603   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   604   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   605   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   606   *    IfxCpu_spinLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   607   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   608   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   609   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   610   *      IfxCpu_resetSpinLock(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   611   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   612   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   613   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   614   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   615  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   616  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   617  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   618  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   619  /** \addtogroup IfxLld_Cpu_Std_Utility
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   620   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   621  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   622  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   623  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   624  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   625  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   626  /** \brief This function disables the overlay memory.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   627   * \param cpu Core no
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   628   * \param overlayBlock Overlay Block
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   629   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   630   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   631  IFX_EXTERN void IfxCpu_disableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   632  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   633  /** \brief This function configures and enables the overlay memory.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   634   * Note:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   635   * The data overlay provides the capability to redirect selected data accesses to the Overlay memory. Data accesses made by the TriCore to Program Flash, Online Data Acquisition space, or EBU space can be redirected. Overlay memory may be located in the Local Memory (if present), in the Emulation Memory (Emulation Device only), or in the EBU space,or in the DPSR/PSPR memory.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   636   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   637   * How the overlay Memory works?
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   638   * Any data access to segment 8 or segment A is checked against all the activated overlay blocks. For each activated overlay block, address bits 27..5 are compared with the target base address , and this bit-wise comparison is qualified by the content of address mask. Address bits participate in the comparison if the corresponding mask bits are set to one. The access is redirected, if all the address bits selected by mask equal to the corresponding bits in target address.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   639   * The address for redirection is constructed as follows:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   640   * 1. Address bits 31..22 are set according to the overlay memory selection and the cache-ability of the original address.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   641   * 2. For address bits 21..5:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   642   * - If the corresponding address mask bit is set, the address bit value is taken from overlay base address .
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   643   * - If the corresponding address mask bit is cleared, the address bit value is taken from the original address.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   644   * 3. Address bits 4..0 are always taken directly from the original address.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   645   * If there is no redirection, the original address is used to perform the access.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   646   * Target address ranges for activated overlay blocks should not overlap or an exception may occur.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   647   * \param cpu Core no
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   648   * \param overlayBlock Overlay Block
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   649   * \param overlayMemorySelect Overlay Memory Select
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   650   * \param overlayAddressMask overlay Address Mask
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   651   * \param targetBaseAddress Target Base address (i.e Source address to be re-directed)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   652   * \param overlayBaseAddress Overlay or Re-directed Base address (Bits 21..5 of the base address the overlay memory block in the overlay memory)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   653   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   654   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   655  IFX_EXTERN void IfxCpu_enableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock, IfxCpu_OverlayMemorySelect overlayMemorySelect, IfxCpu_OverlayAddressMask overlayAddressMask, uint32 targetBaseAddress, uint32 overlayBaseAddress);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   656  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   657  /** \brief API to get random value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   658   * \param seed Pointer to seed value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   659   * \return random value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   660   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   661  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   662  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   663  /** \brief API to get random value with in the range
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   664   * \param seed Pointer to seed value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   665   * \param min minimum range value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   666   * \param max maximum range value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   667   * \return random value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   668   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   669  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   670  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   671  /** \brief This function waits till all the cores have set their corresponding bits in the event. This function along with
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   672   * IfxCpu_emitEvent() are used to achieve the synchronisation between the configured cores. By default
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   673   * "IFXCPU_CFG_ALLCORE_DONE" macro defined for all the cores. In case the user wants to check for
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   674   * synchronisation among the required cores, the macro can be redefined with the value accroing to the
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   675   * CORE_ID register.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   676   * The IfxCpu_emitEvent() is to be used in the Main functions of the Cores where the user wants to check for synchronisation.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   677   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   678   * e.g:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   679   * 1. Check for synchronisation between core 0 and core 5
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   680   * # define 0x41U
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   681   * 2. Check for synchronisation between core 0 to core 5
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   682   * # define 0x5FU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   683   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   684   * Note:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   685   * Core id values read from CORE_ID register will be as shown below. The value indicates the position of the bit needs to be set while building the macro.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   686   * Core 0: 0
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   687   * Core 1: 1
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   688   * Core 2: 2
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   689   * Core 3: 3
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   690   * Core 4: 4
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   691   * Core 5: 6
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   692   * \param event Synchronous Event
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   693   * \param timeoutMilliSec timeout in millisec
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   694   * \return Error condition
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   695   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   696   * The functions IfxCpu_waitEvent and IfxCpu_emitEvent are used to achieve synchronisation between all cores (i.e individual cores wait till all cores have reached the synchronisation point). The IfxCpu_waitEvent returns 1 incase a timeout occurs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   697   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   698   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   699   * // Global variable. preferably located in  shared memory.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   700   * IfxCpu_syncEvent event;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   701   * boolean errorVal;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   702   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   703   * // Below code should be repeated in Each core
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   704   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   705   * // Upon reaching Synchonisation point
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   706   * IfxCpu_emitEvent(&event);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   707   * errorVal = IfxCpu_waitEvent(&event, timeoutMilliSec); // timeoutMilliSec is timeout value to wait
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   708   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   709   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   710   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   711   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   712  IFX_EXTERN boolean IfxCpu_waitEvent(IfxCpu_syncEvent *event, uint32 timeoutMilliSec);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   713  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   714  /** \brief This function sets a bit corresponding to the core in the event.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   715   * \param event Synchronous Event
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   716   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   717   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   718   * A coding example can be found in \ref IfxCpu_waitEvent
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   719   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   720   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   721  IFX_EXTERN void IfxCpu_emitEvent(IfxCpu_syncEvent *event);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   722  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   723  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   724  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   725  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   726  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   727  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   728  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   729  /** \brief Sets all CPUs to Idle mode except the Master CPU,index of which is given as the parameter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   730   * \param masterCpu Master CPU Index- All except this will be set to Idle Mode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   731   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   732   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   733  IFX_EXTERN void IfxCpu_setAllIdleExceptMasterCpu(IfxCpu_ResourceCpu masterCpu);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   734  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   735  /** \brief Disables interrupts for all CPUs except the Master CPU,index of which is given as the parameter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   736   * \param masterCpu Master CPU Index- All except this will have their interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   737   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   738   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   739  IFX_EXTERN void IfxCpu_disableInterruptsAllExceptMaster(IfxCpu_ResourceCpu masterCpu);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   740  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   741  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   742  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   743  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   744  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   745  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   746  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   747      Ifx_CPU_ICR reg;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   748      reg.U = __mfcr(CPU_ICR);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   749      return reg.B.IE != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   750  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   751  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   752  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   753  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   754  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   755      boolean enabled;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   756      enabled = IfxCpu_areInterruptsEnabled();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   757      __disable();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   758      __nop();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   759      return enabled;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   760  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   761  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   762  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   763  IFX_INLINE void IfxCpu_enableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   764  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   765      __enable();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   766  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   767  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   768  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   769  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   770  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   771      uint32 cpu_pmaVal;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   772      uint16 checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   773      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   774      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   775  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   776      /*resolve the restrictions*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   777      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   778      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xC);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   779  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   780      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   781      {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   782          segmentNumberMask |= checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   783      }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   784  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   785      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   786  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   787      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   788  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   789      /*The CPU_PMA registers are ENDINIT protected*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   790      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   791      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   792      /*Write to PMA0 register for selecting the cacheability for data cache*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   793      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   794      __mtcr(CPU_PMA0, cpu_pmaVal);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   795      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   796      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   797  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   798  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   799  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   800  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   801  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   802      uint32 cpu_pmaVal;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   803      uint16 checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   804      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   805      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   806  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   807      /*resolve the restrictions*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   808      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   809      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xD);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   810  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   811      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   812      {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   813          segmentNumberMask |= checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   814      }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   815  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   816      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   817  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   818      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   819  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   820      /*The CPU_PMA registers are ENDINIT protected*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   821      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   822      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   823      /*Write to PMA1 register for selecting the cacheability for data cache*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   824      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   825      __mtcr(CPU_PMA1, cpu_pmaVal);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   826      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   827      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   828  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   829  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   830  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   831  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   832  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   833      __disable();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   834      __nop();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   835  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   836  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   837  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   838  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   839  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   840      Ifx_CPU *module;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   841  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   842      if (cpu < IfxCpu_ResourceCpu_none)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   843      {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   844          module = (Ifx_CPU *)IfxCpu_cfg_indexMap[cpu].module;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   845      }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   846      else
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   847      {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   848          module = NULL_PTR;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   849      }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   850  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   851      return module;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   852  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   853  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   854  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   855  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   856  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   857      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   858  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   859  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   860  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   861  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   862  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   863      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   864  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   865  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   866  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   867  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   868  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   869      Ifx_CPU_CORE_ID reg;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   870      reg.U = __mfcr(CPU_CORE_ID);
	mfcr	d15,#65052
.L368:

; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   871      return (IfxCpu_Id)reg.B.CORE_ID;
	fcall	.cocofun_2
.L234:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   171  {
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   172      volatile IfxCpu_Trap trapWatch;
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   173      trapWatch = IfxCpu_Trap_extractTrapInfo(IfxCpu_Trap_Class_bus, tin);
	st.d	[a10]0,e0
.L227:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   174      IFX_CFG_CPU_TRAP_BE_HOOK(trapWatch);
	ld.d	e0,[a10]0
.L370:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   175      IFX_CFG_CPU_TRAP_DEBUG;
	debug
.L441:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   176      __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
	rslcx
.L442:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   177      __asm("rfe");
	rfe
.L443:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   178  }
	ret
.L222:
	
__IfxCpu_Trap_busError_function_end:
	.size	IfxCpu_Trap_busError,__IfxCpu_Trap_busError_function_end-IfxCpu_Trap_busError
.L72:
	; End of function
	
	.sdecl	'.text.IfxCpu_Trap.IfxCpu_Trap_assertion',code,cluster('IfxCpu_Trap_assertion')
	.sect	'.text.IfxCpu_Trap.IfxCpu_Trap_assertion'
	.align	2
	
	.global	IfxCpu_Trap_assertion

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   179  
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   180  
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   181  void IfxCpu_Trap_assertion(uint32 tin)
; Function IfxCpu_Trap_assertion
.L15:
IfxCpu_Trap_assertion:	.type	func
	sub.a	a10,#8
.L240:

; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   348      __asm("mov.aa %0, a11": "=a" (res) : :"a11");      (inlined)
	
	mov.aa a15, a11
.L372:
	
.L448:
	mov.d	d0,a15
.L245:
	insert	d1,d1,#5,#8,#8
.L449:
	insert	d1,d1,d4,#0,#8
.L247:

; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    42   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    43   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    44   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    45   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    46   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    47   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    48   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    49   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    50   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    51   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    52   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    53   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    54   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    55   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    56   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    57   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    58   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    59  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    60  #ifndef IFXCPU_H
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    61  #define IFXCPU_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    62  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    63  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    64  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    65  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    66  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    67  #include "_Impl/IfxCpu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    68  #include "IfxSrc_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    69  #include "IfxScu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    70  #include "IfxStm_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    71  #include "_Impl/IfxScu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    72  #include "_Utilities/Ifx_Assert.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    73  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    74  #include "Scu/Std/IfxScuCcu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    75  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    76  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    77  /*-----------------------------------Macros-----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    78  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    79  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    80  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    81   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    82   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    83   * the CPU number.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    84   * Example usage:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    85   *  \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    86   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    87   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    88   *  \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    89   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    90  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    91  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    92  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    93   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    94   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    95   * the CPU number.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    96   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    97   *   Example usage:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    98   *   \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    99   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   100   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   101   *   \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   102   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   103  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   104  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   105  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   106  /*------------------------------Type Definitions------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   107  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   108  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   109  /** \brief Lock type Spin lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   110   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   111  typedef unsigned int IfxCpu_spinLock;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   112  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   113  /** \brief Lock type Mutex lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   114   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   115  typedef unsigned int IfxCpu_mutexLock;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   116  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   117  /** \brief Event used for synchronisation.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   118   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   119  typedef unsigned int IfxCpu_syncEvent;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   120  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   121  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   122  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   123  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   124  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   125  /** \addtogroup IfxLld_Cpu_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   126   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   127  /** \brief Enumeration for the Cpu mode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   128   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   129  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   130  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   131      IfxCpu_CoreMode_halt,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   132      IfxCpu_CoreMode_run,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   133      IfxCpu_CoreMode_idle,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   134      IfxCpu_CoreMode_sleep,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   135      IfxCpu_CoreMode_stby,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   136      IfxCpu_CoreMode_unknown
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   137  } IfxCpu_CoreMode;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   138  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   139  /** \brief Performance conunter modes
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   140   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   141  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   142  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   143      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   144      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   145  } IfxCpu_CounterMode;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   147  /** \brief Overlay Address Mask: determines the overlay block size and the bits used for address comparison and translation
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   148   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   149  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   150  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   151      IfxCpu_OverlayAddressMask_32byte  = 0xFFF,  /**< \brief 32 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   152      IfxCpu_OverlayAddressMask_64byte  = 0xFFE,  /**< \brief 64 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   153      IfxCpu_OverlayAddressMask_128byte = 0xFFC,  /**< \brief 128 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   154      IfxCpu_OverlayAddressMask_256byte = 0xFF8,  /**< \brief 256 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   155      IfxCpu_OverlayAddressMask_512byte = 0xFF0,  /**< \brief 512 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   156      IfxCpu_OverlayAddressMask_1KB     = 0xFE0,  /**< \brief 1K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   157      IfxCpu_OverlayAddressMask_2KB     = 0xFC0,  /**< \brief 2K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   158      IfxCpu_OverlayAddressMask_4KB     = 0xF80,  /**< \brief 4K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   159      IfxCpu_OverlayAddressMask_8KB     = 0xF00,  /**< \brief 8K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   160      IfxCpu_OverlayAddressMask_16KB    = 0xE00,  /**< \brief 16K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   161      IfxCpu_OverlayAddressMask_32KB    = 0xC00,  /**< \brief 32K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   162      IfxCpu_OverlayAddressMask_64KB    = 0x800,  /**< \brief 64K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   163      IfxCpu_OverlayAddressMask_128KB   = 0x0     /**< \brief 128K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   164  } IfxCpu_OverlayAddressMask;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   165  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   166  /** \brief Selects overlay memory used for redirection
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   167   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   168  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   169  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   170      IfxCpu_OverlayMemorySelect_core0DsprPspr = 0,  /**< \brief Redirection to Core 0 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   171      IfxCpu_OverlayMemorySelect_core1DsprPspr = 1,  /**< \brief Redirection to Core 1 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   172      IfxCpu_OverlayMemorySelect_core2DsprPspr = 2,  /**< \brief Redirection to Core 2 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   173      IfxCpu_OverlayMemorySelect_core3DsprPspr = 3,  /**< \brief Redirection to Core 3 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   174      IfxCpu_OverlayMemorySelect_core4DsprPspr = 4,  /**< \brief Redirection to Core 4 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   175      IfxCpu_OverlayMemorySelect_core5DsprPspr = 5,  /**< \brief Redirection to Core 5 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   176      IfxCpu_OverlayMemorySelect_lmu           = 8,  /**< \brief Redirection to LMU memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   177      IfxCpu_OverlayMemorySelect_emem          = 9,  /**< \brief Redirection to EMEM memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   178      IfxCpu_OverlayMemorySelect_ebu           = 10  /**< \brief Redirection to EBU memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   179  } IfxCpu_OverlayMemorySelect;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   180  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   181  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   182  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   183      IfxCpu_ResetStatus_notCpuReset   = 0,  /**< \brief No Kernel Reset was executed */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   184      IfxCpu_ResetStatus_cpuResetBySmu = 1,  /**< \brief Kernel reset was requested by hardware since last clear (SMU) */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   185      IfxCpu_ResetStatus_cpuResetBySw  = 2   /**< \brief Kernel reset was requested by software since last clear (by writing KRST0.RST=1 and KRST1.RST=1) */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   186  } IfxCpu_ResetStatus;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   187  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   188  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   189  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   190  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   191  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   192  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   193  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   194  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   195   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   196  /** \brief counter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   197   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   198  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   199  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   200      uint32  counter;        /**< \brief Counter value */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   201      boolean overlfow;       /**< \brief sticky overlfow */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   202  } IfxCpu_Counter;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   203  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   204  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   205  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   206  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   207   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   208  /** \brief Performance counter result
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   209   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   210  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   211  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   212      IfxCpu_Counter instruction;       /**< \brief Instruction counter */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   213      IfxCpu_Counter clock;             /**< \brief CPU clock counter */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   214      IfxCpu_Counter counter1;          /**< \brief Multi counter 1 */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   215      IfxCpu_Counter counter2;          /**< \brief Multi counter 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   216      IfxCpu_Counter counter3;          /**< \brief Multi counter 3 */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   217  } IfxCpu_Perf;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   218  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   219  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   221  /** \addtogroup IfxLld_Cpu_Std_Core
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   222   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   223  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   224  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   225  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   226  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   227  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   228  /** \brief API to get the address for CPU HW module register memory map
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   229   * \param cpu Resource index of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   230   * \return CPU module register address
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   231   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   232  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   233  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   234  /** \brief API to get core id of the CPU of the caller.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   235   * Caution: Core id of the cpu's may not be continguous and shouldn't be used to index cpu.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   236   * Use IfxCpu_getCoreIndex() to get cpu no.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   237   * \return Resource index of the CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   238   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   239  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   240  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   241  /** \brief API to get cpu index of the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   242   * Note: This api can be used whereever cpu no/index is needed.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   243   * \return Resource index of the CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   244   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   245  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   246  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   247  /** \brief API to initialize the context save area of the CPU where this is called.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   248   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   249   * This API can initialize the CSA of the host CPU where this API is called. This API
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   250   * shall not be used to initialize the CSA of another CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   251   * \param csaBegin Pointer to start of context save area
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   252   * \param csaEnd Pointer to end of context save area
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   253   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   254   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   255  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   256  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   257  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   258   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   259   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   260  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   261  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   262  /** \brief Triggers Software Reset
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   263   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   264   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   265  IFX_INLINE void IfxCpu_triggerSwReset(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   266  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   267  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   268  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   269  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   271  /** \brief API to get current mode of CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   272   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   273   * \return Current mode of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   274   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   275  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   276  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   277  /** \brief API to get current mode of CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   278   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   279   * \return Resource index of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   280   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   281  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   282  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   283  /** \brief API to set mode of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   284   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   285   * \param mode CPU mode to be set by this API
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   286   * \return Success status of the activity (setting the core mode).
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   287   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   288   * \retval FALSE: If the activity can't be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   289   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   290  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   291  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   292  /** \brief API to set the program counter for the CPU specified.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   293   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   294   * \param programCounter Program counter value to be set
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   295   * \return success status of the activity (setting program counter value).
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   296   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   297   * \retval FALSE: If the activity can't be performed
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   298   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   299  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   300  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   301  /** \brief API to set the program counter for the CPU specified and start the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   302   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   303   * \param programCounter Program counter value to start the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   304   * \return success status of the activity (setting program counter value).
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   305   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   306   * \retval FALSE: If the activity can't be performed
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   307   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   308  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   309  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   310  /** \brief To request reset of a particular core, given by coreId
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   311   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   312   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   313  IFX_EXTERN void IfxCpu_triggerCpuReset(IfxCpu_ResourceCpu coreIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   314  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   315  /** \brief Retrieve the cause of reset(no reset, hardware(SMU) or software) since last clear by reading KRST0.RSTSTAT and clear it.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   316   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   317  IFX_EXTERN IfxCpu_ResetStatus IfxCpu_getCpuResetStatus(IfxCpu_ResourceCpu coreIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   318  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   319  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   320  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   321  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   322   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   323  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   324  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   325  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   326  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   327  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   328  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   329   * This API provides the status of CPU where this API is called
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   330   * \return Status of global interrupt enable bit.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   331   * \retval TRUE: Global interrupts enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   332   * \retval FALSE: Global interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   333   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   334  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   335  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   336  /** \brief API to disable global interrupt and return the previous status.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   337   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   338   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   339   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   340   * \return Previous status of global interrupt enable bit.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   341   * \retval TRUE: Previously, global interrupts enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   342   * \retval FALSE: Previously, global interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   343   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   344  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   345  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   346  /** \brief API to enable global interrupt.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   347   * This API simply enables the global interrupt.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   348   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   349   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   350  IFX_INLINE void IfxCpu_enableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   351  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   352  /** \brief Disable the Global Interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   353   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   354   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   355  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   356  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   357  /** \brief API to restore global interrupt with that of the passed parameter.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   358   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   359   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   360   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   361   * \param enabled Previous status of the global interrupt enable bit
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   362   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   363   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   364  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   365  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   366  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   367  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   368  /** \addtogroup IfxLld_Cpu_Std_Cache
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   369   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   370  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   371  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   372  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   373  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   374  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   375  /** \brief API to enable/ disable the data cacheability for selected segments
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   376   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   377   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   378   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   379   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   380   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   381   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   382  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   383  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   384  /** \brief API to enable/ disable the instruction cacheability for selected segments
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   385   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   386   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   387   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   388   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   389   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   390   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   391  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   392  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   393  /** \brief API to invalidate the program cache
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   394   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   395   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   396  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   397  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   398  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   399   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   400   * \return Status TRUE/FALSE
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   401   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   402  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   403  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   404  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   405   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   406   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   407   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   408   * \param enable Command to enable or bypass the data cache
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   409   * TRUE: Enable the data cache.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   410   * FALSE: Bypass the data cache.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   411   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   412   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   413  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   414  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   415  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   416   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   417   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   418   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   419   * \param enable Command to enable or bypass the program cache.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   420   * TRUE: Enable the program cache.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   421   * FALSE: Bypass the program cache
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   422   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   423   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   424  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   425  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   426  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   427  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   428  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   429   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   430  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   431  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   432  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   433  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   434  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   435  /** \brief API to read the clock counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   436   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   437   * This API can be used to read clock counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   438   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   439   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   440   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   441  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   442  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   443  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   444   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   445   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   446   * It cannot be used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   447   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   448   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   449   * reading the counter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   450   * \return Status of sticky overflow bit.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   451   * \retval TRUE: Sticky overflow bit is set.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   452   * \retval FALSE: Sticky overflow bit is reset
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   453   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   454  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   455  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   456  /** \brief API to read the instruction counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   457   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   458   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   459   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   460   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   461   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   462  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   463  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   464  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   465   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   466   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   467   * It cannot be used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   468   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   469   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   470   * reading the counter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   471   * \return Status of sticky overflow bit.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   472   * \retval TRUE: Sticky overflow bit is set.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   473   * \retval FALSE: Sticky overflow bit is reset
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   474   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   475  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   476  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   477  /** \brief API to read the performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   478   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   479   * \return counter value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   480   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   481  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint16 address);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   482  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   483  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   484   * This is generic function to get sticky overflow bit of any performance counters
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   485   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   486   * \return Status
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   487   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   488  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint16 address);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   489  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   490  /** \brief Reset and start instruction, clock and multi counters
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   491   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   492   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   493   * \param mode Counter mode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   494   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   495   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   496  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   497  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   498  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   500   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   501   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   502   * \param enable enable Command to enable or disable the performance counter.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   503   * TRUE: Enable the performance counter.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   504   * FALSE: Disable the performance counter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   505   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   506   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   507  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   508  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   509  #if !((defined(__cplusplus)) && (defined(__TASKING__)))
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   510  /** \brief Stop instruction and clock counters, return their values
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   511   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   512   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   513   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   514   * \return Performance counter result
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   515   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   516  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   517  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   518  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   519  /** \brief API to update clock counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   520   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   521   * This API can be used to update clock counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   522   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   523   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   524   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   525   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   526  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   527  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   528  /** \brief API to update Instruction counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   529   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   530   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   531   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   532   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   533   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   534   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   535  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   536  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   537  /** \brief API to update performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   538   * This is generic function to update any of the performance counters
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   539   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   540   * \param count Count
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   541   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   542   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   543  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   544  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   545  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   546  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   547  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   548   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   549  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   550  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   551  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   552  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   553  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   554  /** \brief API to acquire the mutex (binary semaphore).
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   555   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   556   * This API can be used to acquire/get the mutex.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   557   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   558   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   559   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   560   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   561   *    IfxCpu_mutexLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   562   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   563   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   564   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   565   *      IfxCpu_releaseMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   566   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   567   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   568   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   569   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   570  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   571  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   572  /** \brief API to unlock the mutex .
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   573   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   574   * This API can be used to unlock the previously acquired mutex
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   575   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   576   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   577   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   578   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   579   *    IfxCpu_mutexLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   580   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   581   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   582   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   583   *      IfxCpu_releaseMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   584   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   585   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   586   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   587   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   588  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   589  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   590  /** \brief API to unlock the resource .
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   591   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   592   * This API can be used to unlock the previously acquired lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   593   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   594   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   595   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   596  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   597  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   598  /** \brief API to lock the resource in spin mode with the given timeout.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   599   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   600   * This API can be used to spin lock for the lock for the given timeout period.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   601   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   602   * \param timeoutCount loop counter value used for timeout to acquire lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   603   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   604   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   605   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   606   *    IfxCpu_spinLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   607   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   608   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   609   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   610   *      IfxCpu_resetSpinLock(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   611   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   612   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   613   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   614   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   615  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   616  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   617  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   618  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   619  /** \addtogroup IfxLld_Cpu_Std_Utility
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   620   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   621  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   622  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   623  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   624  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   625  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   626  /** \brief This function disables the overlay memory.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   627   * \param cpu Core no
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   628   * \param overlayBlock Overlay Block
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   629   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   630   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   631  IFX_EXTERN void IfxCpu_disableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   632  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   633  /** \brief This function configures and enables the overlay memory.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   634   * Note:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   635   * The data overlay provides the capability to redirect selected data accesses to the Overlay memory. Data accesses made by the TriCore to Program Flash, Online Data Acquisition space, or EBU space can be redirected. Overlay memory may be located in the Local Memory (if present), in the Emulation Memory (Emulation Device only), or in the EBU space,or in the DPSR/PSPR memory.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   636   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   637   * How the overlay Memory works?
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   638   * Any data access to segment 8 or segment A is checked against all the activated overlay blocks. For each activated overlay block, address bits 27..5 are compared with the target base address , and this bit-wise comparison is qualified by the content of address mask. Address bits participate in the comparison if the corresponding mask bits are set to one. The access is redirected, if all the address bits selected by mask equal to the corresponding bits in target address.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   639   * The address for redirection is constructed as follows:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   640   * 1. Address bits 31..22 are set according to the overlay memory selection and the cache-ability of the original address.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   641   * 2. For address bits 21..5:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   642   * - If the corresponding address mask bit is set, the address bit value is taken from overlay base address .
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   643   * - If the corresponding address mask bit is cleared, the address bit value is taken from the original address.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   644   * 3. Address bits 4..0 are always taken directly from the original address.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   645   * If there is no redirection, the original address is used to perform the access.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   646   * Target address ranges for activated overlay blocks should not overlap or an exception may occur.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   647   * \param cpu Core no
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   648   * \param overlayBlock Overlay Block
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   649   * \param overlayMemorySelect Overlay Memory Select
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   650   * \param overlayAddressMask overlay Address Mask
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   651   * \param targetBaseAddress Target Base address (i.e Source address to be re-directed)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   652   * \param overlayBaseAddress Overlay or Re-directed Base address (Bits 21..5 of the base address the overlay memory block in the overlay memory)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   653   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   654   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   655  IFX_EXTERN void IfxCpu_enableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock, IfxCpu_OverlayMemorySelect overlayMemorySelect, IfxCpu_OverlayAddressMask overlayAddressMask, uint32 targetBaseAddress, uint32 overlayBaseAddress);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   656  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   657  /** \brief API to get random value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   658   * \param seed Pointer to seed value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   659   * \return random value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   660   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   661  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   662  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   663  /** \brief API to get random value with in the range
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   664   * \param seed Pointer to seed value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   665   * \param min minimum range value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   666   * \param max maximum range value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   667   * \return random value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   668   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   669  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   670  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   671  /** \brief This function waits till all the cores have set their corresponding bits in the event. This function along with
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   672   * IfxCpu_emitEvent() are used to achieve the synchronisation between the configured cores. By default
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   673   * "IFXCPU_CFG_ALLCORE_DONE" macro defined for all the cores. In case the user wants to check for
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   674   * synchronisation among the required cores, the macro can be redefined with the value accroing to the
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   675   * CORE_ID register.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   676   * The IfxCpu_emitEvent() is to be used in the Main functions of the Cores where the user wants to check for synchronisation.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   677   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   678   * e.g:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   679   * 1. Check for synchronisation between core 0 and core 5
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   680   * # define 0x41U
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   681   * 2. Check for synchronisation between core 0 to core 5
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   682   * # define 0x5FU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   683   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   684   * Note:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   685   * Core id values read from CORE_ID register will be as shown below. The value indicates the position of the bit needs to be set while building the macro.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   686   * Core 0: 0
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   687   * Core 1: 1
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   688   * Core 2: 2
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   689   * Core 3: 3
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   690   * Core 4: 4
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   691   * Core 5: 6
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   692   * \param event Synchronous Event
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   693   * \param timeoutMilliSec timeout in millisec
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   694   * \return Error condition
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   695   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   696   * The functions IfxCpu_waitEvent and IfxCpu_emitEvent are used to achieve synchronisation between all cores (i.e individual cores wait till all cores have reached the synchronisation point). The IfxCpu_waitEvent returns 1 incase a timeout occurs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   697   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   698   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   699   * // Global variable. preferably located in  shared memory.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   700   * IfxCpu_syncEvent event;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   701   * boolean errorVal;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   702   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   703   * // Below code should be repeated in Each core
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   704   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   705   * // Upon reaching Synchonisation point
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   706   * IfxCpu_emitEvent(&event);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   707   * errorVal = IfxCpu_waitEvent(&event, timeoutMilliSec); // timeoutMilliSec is timeout value to wait
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   708   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   709   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   710   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   711   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   712  IFX_EXTERN boolean IfxCpu_waitEvent(IfxCpu_syncEvent *event, uint32 timeoutMilliSec);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   713  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   714  /** \brief This function sets a bit corresponding to the core in the event.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   715   * \param event Synchronous Event
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   716   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   717   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   718   * A coding example can be found in \ref IfxCpu_waitEvent
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   719   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   720   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   721  IFX_EXTERN void IfxCpu_emitEvent(IfxCpu_syncEvent *event);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   722  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   723  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   724  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   725  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   726  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   727  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   728  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   729  /** \brief Sets all CPUs to Idle mode except the Master CPU,index of which is given as the parameter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   730   * \param masterCpu Master CPU Index- All except this will be set to Idle Mode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   731   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   732   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   733  IFX_EXTERN void IfxCpu_setAllIdleExceptMasterCpu(IfxCpu_ResourceCpu masterCpu);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   734  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   735  /** \brief Disables interrupts for all CPUs except the Master CPU,index of which is given as the parameter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   736   * \param masterCpu Master CPU Index- All except this will have their interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   737   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   738   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   739  IFX_EXTERN void IfxCpu_disableInterruptsAllExceptMaster(IfxCpu_ResourceCpu masterCpu);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   740  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   741  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   742  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   743  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   744  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   745  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   746  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   747      Ifx_CPU_ICR reg;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   748      reg.U = __mfcr(CPU_ICR);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   749      return reg.B.IE != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   750  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   751  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   752  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   753  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   754  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   755      boolean enabled;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   756      enabled = IfxCpu_areInterruptsEnabled();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   757      __disable();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   758      __nop();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   759      return enabled;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   760  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   761  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   762  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   763  IFX_INLINE void IfxCpu_enableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   764  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   765      __enable();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   766  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   767  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   768  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   769  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   770  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   771      uint32 cpu_pmaVal;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   772      uint16 checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   773      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   774      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   775  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   776      /*resolve the restrictions*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   777      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   778      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xC);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   779  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   780      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   781      {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   782          segmentNumberMask |= checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   783      }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   784  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   785      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   786  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   787      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   788  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   789      /*The CPU_PMA registers are ENDINIT protected*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   790      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   791      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   792      /*Write to PMA0 register for selecting the cacheability for data cache*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   793      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   794      __mtcr(CPU_PMA0, cpu_pmaVal);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   795      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   796      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   797  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   798  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   799  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   800  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   801  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   802      uint32 cpu_pmaVal;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   803      uint16 checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   804      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   805      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   806  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   807      /*resolve the restrictions*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   808      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   809      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xD);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   810  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   811      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   812      {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   813          segmentNumberMask |= checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   814      }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   815  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   816      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   817  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   818      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   819  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   820      /*The CPU_PMA registers are ENDINIT protected*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   821      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   822      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   823      /*Write to PMA1 register for selecting the cacheability for data cache*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   824      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   825      __mtcr(CPU_PMA1, cpu_pmaVal);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   826      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   827      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   828  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   829  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   830  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   831  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   832  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   833      __disable();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   834      __nop();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   835  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   836  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   837  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   838  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   839  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   840      Ifx_CPU *module;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   841  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   842      if (cpu < IfxCpu_ResourceCpu_none)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   843      {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   844          module = (Ifx_CPU *)IfxCpu_cfg_indexMap[cpu].module;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   845      }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   846      else
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   847      {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   848          module = NULL_PTR;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   849      }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   850  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   851      return module;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   852  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   853  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   854  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   855  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   856  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   857      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   858  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   859  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   860  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   861  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   862  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   863      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   864  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   865  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   866  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   867  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   868  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   869      Ifx_CPU_CORE_ID reg;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   870      reg.U = __mfcr(CPU_CORE_ID);
	mfcr	d15,#65052
.L371:

; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   871      return (IfxCpu_Id)reg.B.CORE_ID;
	fcall	.cocofun_2
.L248:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   182  {
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   183      volatile IfxCpu_Trap trapWatch;
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   184      trapWatch = IfxCpu_Trap_extractTrapInfo(IfxCpu_Trap_Class_assertion, tin);
	st.d	[a10]0,e0
.L241:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   185      IFX_CFG_CPU_TRAP_ASSERT_HOOK(trapWatch);
	ld.d	e0,[a10]0
.L373:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   186      IFX_CFG_CPU_TRAP_DEBUG;
	debug
.L450:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   187      __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
	rslcx
.L451:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   188      __asm("rfe");
	rfe
.L452:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   189  }
	ret
.L236:
	
__IfxCpu_Trap_assertion_function_end:
	.size	IfxCpu_Trap_assertion,__IfxCpu_Trap_assertion_function_end-IfxCpu_Trap_assertion
.L77:
	; End of function
	
	.sdecl	'.text.IfxCpu_Trap.IfxCpu_Trap_systemCall_Cpu0',code,cluster('IfxCpu_Trap_systemCall_Cpu0')
	.sect	'.text.IfxCpu_Trap.IfxCpu_Trap_systemCall_Cpu0'
	.align	2
	
	.global	IfxCpu_Trap_systemCall_Cpu0

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   190  
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   191  
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   192  void IfxCpu_Trap_systemCall_Cpu0(uint32 tin)
; Function IfxCpu_Trap_systemCall_Cpu0
.L17:
IfxCpu_Trap_systemCall_Cpu0:	.type	func
	sub.a	a10,#8
.L254:

; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   348      __asm("mov.aa %0, a11": "=a" (res) : :"a11");      (inlined)
	
	mov.aa a15, a11
.L374:
	
.L260:
	fcall	.cocofun_3
.L262:

; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    42   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    43   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    44   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    45   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    46   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    47   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    48   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    49   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    50   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    51   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    52   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    53   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    54   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    55   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    56   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    57   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    58   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    59  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    60  #ifndef IFXCPU_H
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    61  #define IFXCPU_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    62  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    63  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    64  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    65  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    66  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    67  #include "_Impl/IfxCpu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    68  #include "IfxSrc_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    69  #include "IfxScu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    70  #include "IfxStm_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    71  #include "_Impl/IfxScu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    72  #include "_Utilities/Ifx_Assert.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    73  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    74  #include "Scu/Std/IfxScuCcu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    75  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    76  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    77  /*-----------------------------------Macros-----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    78  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    79  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    80  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    81   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    82   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    83   * the CPU number.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    84   * Example usage:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    85   *  \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    86   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    87   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    88   *  \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    89   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    90  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    91  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    92  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    93   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    94   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    95   * the CPU number.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    96   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    97   *   Example usage:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    98   *   \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    99   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   100   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   101   *   \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   102   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   103  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   104  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   105  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   106  /*------------------------------Type Definitions------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   107  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   108  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   109  /** \brief Lock type Spin lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   110   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   111  typedef unsigned int IfxCpu_spinLock;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   112  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   113  /** \brief Lock type Mutex lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   114   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   115  typedef unsigned int IfxCpu_mutexLock;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   116  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   117  /** \brief Event used for synchronisation.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   118   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   119  typedef unsigned int IfxCpu_syncEvent;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   120  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   121  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   122  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   123  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   124  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   125  /** \addtogroup IfxLld_Cpu_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   126   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   127  /** \brief Enumeration for the Cpu mode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   128   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   129  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   130  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   131      IfxCpu_CoreMode_halt,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   132      IfxCpu_CoreMode_run,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   133      IfxCpu_CoreMode_idle,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   134      IfxCpu_CoreMode_sleep,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   135      IfxCpu_CoreMode_stby,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   136      IfxCpu_CoreMode_unknown
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   137  } IfxCpu_CoreMode;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   138  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   139  /** \brief Performance conunter modes
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   140   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   141  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   142  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   143      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   144      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   145  } IfxCpu_CounterMode;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   147  /** \brief Overlay Address Mask: determines the overlay block size and the bits used for address comparison and translation
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   148   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   149  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   150  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   151      IfxCpu_OverlayAddressMask_32byte  = 0xFFF,  /**< \brief 32 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   152      IfxCpu_OverlayAddressMask_64byte  = 0xFFE,  /**< \brief 64 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   153      IfxCpu_OverlayAddressMask_128byte = 0xFFC,  /**< \brief 128 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   154      IfxCpu_OverlayAddressMask_256byte = 0xFF8,  /**< \brief 256 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   155      IfxCpu_OverlayAddressMask_512byte = 0xFF0,  /**< \brief 512 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   156      IfxCpu_OverlayAddressMask_1KB     = 0xFE0,  /**< \brief 1K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   157      IfxCpu_OverlayAddressMask_2KB     = 0xFC0,  /**< \brief 2K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   158      IfxCpu_OverlayAddressMask_4KB     = 0xF80,  /**< \brief 4K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   159      IfxCpu_OverlayAddressMask_8KB     = 0xF00,  /**< \brief 8K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   160      IfxCpu_OverlayAddressMask_16KB    = 0xE00,  /**< \brief 16K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   161      IfxCpu_OverlayAddressMask_32KB    = 0xC00,  /**< \brief 32K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   162      IfxCpu_OverlayAddressMask_64KB    = 0x800,  /**< \brief 64K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   163      IfxCpu_OverlayAddressMask_128KB   = 0x0     /**< \brief 128K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   164  } IfxCpu_OverlayAddressMask;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   165  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   166  /** \brief Selects overlay memory used for redirection
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   167   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   168  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   169  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   170      IfxCpu_OverlayMemorySelect_core0DsprPspr = 0,  /**< \brief Redirection to Core 0 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   171      IfxCpu_OverlayMemorySelect_core1DsprPspr = 1,  /**< \brief Redirection to Core 1 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   172      IfxCpu_OverlayMemorySelect_core2DsprPspr = 2,  /**< \brief Redirection to Core 2 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   173      IfxCpu_OverlayMemorySelect_core3DsprPspr = 3,  /**< \brief Redirection to Core 3 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   174      IfxCpu_OverlayMemorySelect_core4DsprPspr = 4,  /**< \brief Redirection to Core 4 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   175      IfxCpu_OverlayMemorySelect_core5DsprPspr = 5,  /**< \brief Redirection to Core 5 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   176      IfxCpu_OverlayMemorySelect_lmu           = 8,  /**< \brief Redirection to LMU memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   177      IfxCpu_OverlayMemorySelect_emem          = 9,  /**< \brief Redirection to EMEM memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   178      IfxCpu_OverlayMemorySelect_ebu           = 10  /**< \brief Redirection to EBU memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   179  } IfxCpu_OverlayMemorySelect;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   180  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   181  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   182  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   183      IfxCpu_ResetStatus_notCpuReset   = 0,  /**< \brief No Kernel Reset was executed */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   184      IfxCpu_ResetStatus_cpuResetBySmu = 1,  /**< \brief Kernel reset was requested by hardware since last clear (SMU) */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   185      IfxCpu_ResetStatus_cpuResetBySw  = 2   /**< \brief Kernel reset was requested by software since last clear (by writing KRST0.RST=1 and KRST1.RST=1) */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   186  } IfxCpu_ResetStatus;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   187  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   188  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   189  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   190  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   191  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   192  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   193  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   194  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   195   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   196  /** \brief counter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   197   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   198  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   199  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   200      uint32  counter;        /**< \brief Counter value */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   201      boolean overlfow;       /**< \brief sticky overlfow */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   202  } IfxCpu_Counter;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   203  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   204  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   205  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   206  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   207   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   208  /** \brief Performance counter result
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   209   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   210  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   211  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   212      IfxCpu_Counter instruction;       /**< \brief Instruction counter */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   213      IfxCpu_Counter clock;             /**< \brief CPU clock counter */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   214      IfxCpu_Counter counter1;          /**< \brief Multi counter 1 */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   215      IfxCpu_Counter counter2;          /**< \brief Multi counter 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   216      IfxCpu_Counter counter3;          /**< \brief Multi counter 3 */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   217  } IfxCpu_Perf;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   218  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   219  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   221  /** \addtogroup IfxLld_Cpu_Std_Core
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   222   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   223  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   224  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   225  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   226  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   227  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   228  /** \brief API to get the address for CPU HW module register memory map
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   229   * \param cpu Resource index of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   230   * \return CPU module register address
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   231   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   232  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   233  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   234  /** \brief API to get core id of the CPU of the caller.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   235   * Caution: Core id of the cpu's may not be continguous and shouldn't be used to index cpu.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   236   * Use IfxCpu_getCoreIndex() to get cpu no.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   237   * \return Resource index of the CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   238   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   239  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   240  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   241  /** \brief API to get cpu index of the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   242   * Note: This api can be used whereever cpu no/index is needed.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   243   * \return Resource index of the CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   244   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   245  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   246  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   247  /** \brief API to initialize the context save area of the CPU where this is called.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   248   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   249   * This API can initialize the CSA of the host CPU where this API is called. This API
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   250   * shall not be used to initialize the CSA of another CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   251   * \param csaBegin Pointer to start of context save area
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   252   * \param csaEnd Pointer to end of context save area
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   253   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   254   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   255  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   256  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   257  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   258   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   259   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   260  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   261  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   262  /** \brief Triggers Software Reset
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   263   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   264   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   265  IFX_INLINE void IfxCpu_triggerSwReset(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   266  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   267  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   268  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   269  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   271  /** \brief API to get current mode of CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   272   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   273   * \return Current mode of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   274   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   275  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   276  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   277  /** \brief API to get current mode of CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   278   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   279   * \return Resource index of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   280   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   281  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   282  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   283  /** \brief API to set mode of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   284   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   285   * \param mode CPU mode to be set by this API
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   286   * \return Success status of the activity (setting the core mode).
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   287   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   288   * \retval FALSE: If the activity can't be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   289   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   290  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   291  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   292  /** \brief API to set the program counter for the CPU specified.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   293   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   294   * \param programCounter Program counter value to be set
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   295   * \return success status of the activity (setting program counter value).
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   296   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   297   * \retval FALSE: If the activity can't be performed
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   298   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   299  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   300  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   301  /** \brief API to set the program counter for the CPU specified and start the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   302   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   303   * \param programCounter Program counter value to start the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   304   * \return success status of the activity (setting program counter value).
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   305   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   306   * \retval FALSE: If the activity can't be performed
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   307   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   308  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   309  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   310  /** \brief To request reset of a particular core, given by coreId
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   311   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   312   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   313  IFX_EXTERN void IfxCpu_triggerCpuReset(IfxCpu_ResourceCpu coreIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   314  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   315  /** \brief Retrieve the cause of reset(no reset, hardware(SMU) or software) since last clear by reading KRST0.RSTSTAT and clear it.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   316   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   317  IFX_EXTERN IfxCpu_ResetStatus IfxCpu_getCpuResetStatus(IfxCpu_ResourceCpu coreIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   318  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   319  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   320  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   321  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   322   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   323  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   324  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   325  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   326  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   327  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   328  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   329   * This API provides the status of CPU where this API is called
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   330   * \return Status of global interrupt enable bit.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   331   * \retval TRUE: Global interrupts enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   332   * \retval FALSE: Global interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   333   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   334  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   335  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   336  /** \brief API to disable global interrupt and return the previous status.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   337   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   338   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   339   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   340   * \return Previous status of global interrupt enable bit.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   341   * \retval TRUE: Previously, global interrupts enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   342   * \retval FALSE: Previously, global interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   343   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   344  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   345  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   346  /** \brief API to enable global interrupt.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   347   * This API simply enables the global interrupt.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   348   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   349   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   350  IFX_INLINE void IfxCpu_enableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   351  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   352  /** \brief Disable the Global Interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   353   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   354   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   355  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   356  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   357  /** \brief API to restore global interrupt with that of the passed parameter.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   358   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   359   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   360   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   361   * \param enabled Previous status of the global interrupt enable bit
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   362   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   363   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   364  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   365  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   366  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   367  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   368  /** \addtogroup IfxLld_Cpu_Std_Cache
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   369   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   370  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   371  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   372  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   373  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   374  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   375  /** \brief API to enable/ disable the data cacheability for selected segments
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   376   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   377   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   378   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   379   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   380   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   381   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   382  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   383  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   384  /** \brief API to enable/ disable the instruction cacheability for selected segments
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   385   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   386   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   387   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   388   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   389   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   390   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   391  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   392  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   393  /** \brief API to invalidate the program cache
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   394   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   395   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   396  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   397  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   398  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   399   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   400   * \return Status TRUE/FALSE
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   401   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   402  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   403  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   404  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   405   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   406   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   407   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   408   * \param enable Command to enable or bypass the data cache
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   409   * TRUE: Enable the data cache.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   410   * FALSE: Bypass the data cache.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   411   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   412   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   413  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   414  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   415  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   416   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   417   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   418   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   419   * \param enable Command to enable or bypass the program cache.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   420   * TRUE: Enable the program cache.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   421   * FALSE: Bypass the program cache
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   422   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   423   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   424  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   425  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   426  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   427  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   428  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   429   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   430  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   431  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   432  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   433  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   434  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   435  /** \brief API to read the clock counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   436   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   437   * This API can be used to read clock counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   438   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   439   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   440   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   441  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   442  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   443  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   444   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   445   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   446   * It cannot be used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   447   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   448   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   449   * reading the counter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   450   * \return Status of sticky overflow bit.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   451   * \retval TRUE: Sticky overflow bit is set.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   452   * \retval FALSE: Sticky overflow bit is reset
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   453   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   454  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   455  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   456  /** \brief API to read the instruction counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   457   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   458   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   459   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   460   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   461   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   462  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   463  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   464  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   465   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   466   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   467   * It cannot be used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   468   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   469   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   470   * reading the counter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   471   * \return Status of sticky overflow bit.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   472   * \retval TRUE: Sticky overflow bit is set.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   473   * \retval FALSE: Sticky overflow bit is reset
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   474   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   475  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   476  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   477  /** \brief API to read the performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   478   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   479   * \return counter value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   480   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   481  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint16 address);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   482  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   483  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   484   * This is generic function to get sticky overflow bit of any performance counters
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   485   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   486   * \return Status
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   487   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   488  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint16 address);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   489  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   490  /** \brief Reset and start instruction, clock and multi counters
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   491   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   492   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   493   * \param mode Counter mode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   494   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   495   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   496  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   497  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   498  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   500   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   501   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   502   * \param enable enable Command to enable or disable the performance counter.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   503   * TRUE: Enable the performance counter.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   504   * FALSE: Disable the performance counter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   505   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   506   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   507  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   508  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   509  #if !((defined(__cplusplus)) && (defined(__TASKING__)))
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   510  /** \brief Stop instruction and clock counters, return their values
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   511   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   512   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   513   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   514   * \return Performance counter result
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   515   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   516  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   517  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   518  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   519  /** \brief API to update clock counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   520   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   521   * This API can be used to update clock counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   522   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   523   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   524   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   525   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   526  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   527  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   528  /** \brief API to update Instruction counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   529   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   530   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   531   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   532   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   533   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   534   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   535  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   536  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   537  /** \brief API to update performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   538   * This is generic function to update any of the performance counters
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   539   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   540   * \param count Count
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   541   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   542   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   543  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   544  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   545  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   546  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   547  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   548   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   549  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   550  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   551  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   552  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   553  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   554  /** \brief API to acquire the mutex (binary semaphore).
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   555   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   556   * This API can be used to acquire/get the mutex.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   557   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   558   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   559   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   560   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   561   *    IfxCpu_mutexLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   562   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   563   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   564   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   565   *      IfxCpu_releaseMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   566   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   567   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   568   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   569   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   570  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   571  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   572  /** \brief API to unlock the mutex .
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   573   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   574   * This API can be used to unlock the previously acquired mutex
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   575   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   576   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   577   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   578   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   579   *    IfxCpu_mutexLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   580   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   581   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   582   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   583   *      IfxCpu_releaseMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   584   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   585   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   586   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   587   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   588  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   589  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   590  /** \brief API to unlock the resource .
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   591   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   592   * This API can be used to unlock the previously acquired lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   593   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   594   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   595   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   596  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   597  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   598  /** \brief API to lock the resource in spin mode with the given timeout.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   599   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   600   * This API can be used to spin lock for the lock for the given timeout period.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   601   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   602   * \param timeoutCount loop counter value used for timeout to acquire lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   603   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   604   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   605   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   606   *    IfxCpu_spinLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   607   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   608   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   609   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   610   *      IfxCpu_resetSpinLock(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   611   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   612   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   613   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   614   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   615  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   616  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   617  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   618  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   619  /** \addtogroup IfxLld_Cpu_Std_Utility
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   620   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   621  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   622  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   623  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   624  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   625  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   626  /** \brief This function disables the overlay memory.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   627   * \param cpu Core no
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   628   * \param overlayBlock Overlay Block
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   629   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   630   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   631  IFX_EXTERN void IfxCpu_disableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   632  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   633  /** \brief This function configures and enables the overlay memory.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   634   * Note:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   635   * The data overlay provides the capability to redirect selected data accesses to the Overlay memory. Data accesses made by the TriCore to Program Flash, Online Data Acquisition space, or EBU space can be redirected. Overlay memory may be located in the Local Memory (if present), in the Emulation Memory (Emulation Device only), or in the EBU space,or in the DPSR/PSPR memory.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   636   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   637   * How the overlay Memory works?
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   638   * Any data access to segment 8 or segment A is checked against all the activated overlay blocks. For each activated overlay block, address bits 27..5 are compared with the target base address , and this bit-wise comparison is qualified by the content of address mask. Address bits participate in the comparison if the corresponding mask bits are set to one. The access is redirected, if all the address bits selected by mask equal to the corresponding bits in target address.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   639   * The address for redirection is constructed as follows:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   640   * 1. Address bits 31..22 are set according to the overlay memory selection and the cache-ability of the original address.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   641   * 2. For address bits 21..5:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   642   * - If the corresponding address mask bit is set, the address bit value is taken from overlay base address .
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   643   * - If the corresponding address mask bit is cleared, the address bit value is taken from the original address.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   644   * 3. Address bits 4..0 are always taken directly from the original address.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   645   * If there is no redirection, the original address is used to perform the access.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   646   * Target address ranges for activated overlay blocks should not overlap or an exception may occur.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   647   * \param cpu Core no
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   648   * \param overlayBlock Overlay Block
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   649   * \param overlayMemorySelect Overlay Memory Select
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   650   * \param overlayAddressMask overlay Address Mask
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   651   * \param targetBaseAddress Target Base address (i.e Source address to be re-directed)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   652   * \param overlayBaseAddress Overlay or Re-directed Base address (Bits 21..5 of the base address the overlay memory block in the overlay memory)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   653   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   654   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   655  IFX_EXTERN void IfxCpu_enableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock, IfxCpu_OverlayMemorySelect overlayMemorySelect, IfxCpu_OverlayAddressMask overlayAddressMask, uint32 targetBaseAddress, uint32 overlayBaseAddress);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   656  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   657  /** \brief API to get random value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   658   * \param seed Pointer to seed value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   659   * \return random value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   660   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   661  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   662  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   663  /** \brief API to get random value with in the range
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   664   * \param seed Pointer to seed value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   665   * \param min minimum range value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   666   * \param max maximum range value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   667   * \return random value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   668   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   669  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   670  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   671  /** \brief This function waits till all the cores have set their corresponding bits in the event. This function along with
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   672   * IfxCpu_emitEvent() are used to achieve the synchronisation between the configured cores. By default
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   673   * "IFXCPU_CFG_ALLCORE_DONE" macro defined for all the cores. In case the user wants to check for
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   674   * synchronisation among the required cores, the macro can be redefined with the value accroing to the
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   675   * CORE_ID register.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   676   * The IfxCpu_emitEvent() is to be used in the Main functions of the Cores where the user wants to check for synchronisation.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   677   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   678   * e.g:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   679   * 1. Check for synchronisation between core 0 and core 5
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   680   * # define 0x41U
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   681   * 2. Check for synchronisation between core 0 to core 5
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   682   * # define 0x5FU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   683   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   684   * Note:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   685   * Core id values read from CORE_ID register will be as shown below. The value indicates the position of the bit needs to be set while building the macro.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   686   * Core 0: 0
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   687   * Core 1: 1
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   688   * Core 2: 2
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   689   * Core 3: 3
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   690   * Core 4: 4
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   691   * Core 5: 6
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   692   * \param event Synchronous Event
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   693   * \param timeoutMilliSec timeout in millisec
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   694   * \return Error condition
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   695   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   696   * The functions IfxCpu_waitEvent and IfxCpu_emitEvent are used to achieve synchronisation between all cores (i.e individual cores wait till all cores have reached the synchronisation point). The IfxCpu_waitEvent returns 1 incase a timeout occurs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   697   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   698   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   699   * // Global variable. preferably located in  shared memory.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   700   * IfxCpu_syncEvent event;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   701   * boolean errorVal;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   702   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   703   * // Below code should be repeated in Each core
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   704   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   705   * // Upon reaching Synchonisation point
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   706   * IfxCpu_emitEvent(&event);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   707   * errorVal = IfxCpu_waitEvent(&event, timeoutMilliSec); // timeoutMilliSec is timeout value to wait
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   708   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   709   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   710   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   711   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   712  IFX_EXTERN boolean IfxCpu_waitEvent(IfxCpu_syncEvent *event, uint32 timeoutMilliSec);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   713  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   714  /** \brief This function sets a bit corresponding to the core in the event.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   715   * \param event Synchronous Event
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   716   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   717   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   718   * A coding example can be found in \ref IfxCpu_waitEvent
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   719   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   720   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   721  IFX_EXTERN void IfxCpu_emitEvent(IfxCpu_syncEvent *event);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   722  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   723  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   724  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   725  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   726  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   727  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   728  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   729  /** \brief Sets all CPUs to Idle mode except the Master CPU,index of which is given as the parameter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   730   * \param masterCpu Master CPU Index- All except this will be set to Idle Mode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   731   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   732   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   733  IFX_EXTERN void IfxCpu_setAllIdleExceptMasterCpu(IfxCpu_ResourceCpu masterCpu);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   734  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   735  /** \brief Disables interrupts for all CPUs except the Master CPU,index of which is given as the parameter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   736   * \param masterCpu Master CPU Index- All except this will have their interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   737   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   738   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   739  IFX_EXTERN void IfxCpu_disableInterruptsAllExceptMaster(IfxCpu_ResourceCpu masterCpu);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   740  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   741  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   742  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   743  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   744  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   745  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   746  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   747      Ifx_CPU_ICR reg;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   748      reg.U = __mfcr(CPU_ICR);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   749      return reg.B.IE != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   750  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   751  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   752  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   753  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   754  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   755      boolean enabled;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   756      enabled = IfxCpu_areInterruptsEnabled();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   757      __disable();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   758      __nop();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   759      return enabled;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   760  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   761  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   762  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   763  IFX_INLINE void IfxCpu_enableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   764  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   765      __enable();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   766  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   767  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   768  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   769  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   770  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   771      uint32 cpu_pmaVal;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   772      uint16 checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   773      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   774      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   775  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   776      /*resolve the restrictions*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   777      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   778      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xC);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   779  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   780      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   781      {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   782          segmentNumberMask |= checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   783      }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   784  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   785      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   786  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   787      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   788  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   789      /*The CPU_PMA registers are ENDINIT protected*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   790      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   791      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   792      /*Write to PMA0 register for selecting the cacheability for data cache*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   793      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   794      __mtcr(CPU_PMA0, cpu_pmaVal);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   795      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   796      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   797  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   798  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   799  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   800  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   801  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   802      uint32 cpu_pmaVal;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   803      uint16 checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   804      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   805      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   806  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   807      /*resolve the restrictions*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   808      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   809      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xD);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   810  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   811      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   812      {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   813          segmentNumberMask |= checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   814      }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   815  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   816      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   817  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   818      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   819  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   820      /*The CPU_PMA registers are ENDINIT protected*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   821      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   822      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   823      /*Write to PMA1 register for selecting the cacheability for data cache*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   824      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   825      __mtcr(CPU_PMA1, cpu_pmaVal);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   826      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   827      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   828  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   829  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   830  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   831  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   832  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   833      __disable();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   834      __nop();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   835  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   836  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   837  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   838  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   839  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   840      Ifx_CPU *module;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   841  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   842      if (cpu < IfxCpu_ResourceCpu_none)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   843      {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   844          module = (Ifx_CPU *)IfxCpu_cfg_indexMap[cpu].module;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   845      }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   846      else
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   847      {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   848          module = NULL_PTR;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   849      }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   850  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   851      return module;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   852  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   853  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   854  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   855  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   856  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   857      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   858  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   859  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   860  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   861  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   862  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   863      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   864  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   865  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   866  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   867  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   868  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   869      Ifx_CPU_CORE_ID reg;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   870      reg.U = __mfcr(CPU_CORE_ID);
	mfcr	d15,#65052
.L457:

; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   871      return (IfxCpu_Id)reg.B.CORE_ID;
	fcall	.cocofun_2
.L263:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   193  {
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   194      volatile IfxCpu_Trap trapWatch;
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   195      trapWatch = IfxCpu_Trap_extractTrapInfo(IfxCpu_Trap_Class_systemCall, tin);
	st.d	[a10]0,e0
.L255:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   196      IFX_CFG_CPU_TRAP_SYSCALL_CPU0_HOOK(trapWatch);
	ld.d	e0,[a10]0
.L376:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   197      __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
	rslcx
.L458:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   198      __asm("rfe");
	rfe
.L459:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   199  }
	ret
.L250:
	
__IfxCpu_Trap_systemCall_Cpu0_function_end:
	.size	IfxCpu_Trap_systemCall_Cpu0,__IfxCpu_Trap_systemCall_Cpu0_function_end-IfxCpu_Trap_systemCall_Cpu0
.L82:
	; End of function
	
	.sdecl	'.text.IfxCpu_Trap..cocofun_3',code,cluster('.cocofun_3')
	.sect	'.text.IfxCpu_Trap..cocofun_3'
	.align	2
; Function .cocofun_3
.L19:
.cocofun_3:	.type	func
; Function body .cocofun_3, coco_iter:0
	insert	d1,d1,#6,#8,#8
	mov.d	d0,a15
.L375:
	insert	d1,d1,d4,#0,#8
	fret
.L152:
	; End of function
	.sdecl	'.text.IfxCpu_Trap.IfxCpu_Trap_systemCall_Cpu1',code,cluster('IfxCpu_Trap_systemCall_Cpu1')
	.sect	'.text.IfxCpu_Trap.IfxCpu_Trap_systemCall_Cpu1'
	.align	2
	
	.global	IfxCpu_Trap_systemCall_Cpu1

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   200  
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   201  #if IFXCPU_NUM_MODULES >= 2
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   202  void IfxCpu_Trap_systemCall_Cpu1(uint32 tin)
; Function IfxCpu_Trap_systemCall_Cpu1
.L21:
IfxCpu_Trap_systemCall_Cpu1:	.type	func
	sub.a	a10,#8
.L269:

; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   348      __asm("mov.aa %0, a11": "=a" (res) : :"a11");      (inlined)
	
	mov.aa a15, a11
.L378:
	
.L274:
	fcall	.cocofun_3
.L276:

; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    42   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    43   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    44   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    45   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    46   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    47   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    48   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    49   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    50   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    51   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    52   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    53   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    54   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    55   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    56   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    57   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    58   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    59  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    60  #ifndef IFXCPU_H
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    61  #define IFXCPU_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    62  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    63  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    64  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    65  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    66  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    67  #include "_Impl/IfxCpu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    68  #include "IfxSrc_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    69  #include "IfxScu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    70  #include "IfxStm_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    71  #include "_Impl/IfxScu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    72  #include "_Utilities/Ifx_Assert.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    73  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    74  #include "Scu/Std/IfxScuCcu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    75  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    76  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    77  /*-----------------------------------Macros-----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    78  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    79  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    80  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    81   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    82   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    83   * the CPU number.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    84   * Example usage:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    85   *  \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    86   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    87   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    88   *  \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    89   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    90  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    91  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    92  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    93   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    94   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    95   * the CPU number.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    96   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    97   *   Example usage:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    98   *   \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    99   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   100   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   101   *   \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   102   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   103  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   104  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   105  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   106  /*------------------------------Type Definitions------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   107  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   108  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   109  /** \brief Lock type Spin lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   110   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   111  typedef unsigned int IfxCpu_spinLock;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   112  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   113  /** \brief Lock type Mutex lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   114   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   115  typedef unsigned int IfxCpu_mutexLock;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   116  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   117  /** \brief Event used for synchronisation.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   118   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   119  typedef unsigned int IfxCpu_syncEvent;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   120  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   121  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   122  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   123  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   124  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   125  /** \addtogroup IfxLld_Cpu_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   126   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   127  /** \brief Enumeration for the Cpu mode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   128   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   129  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   130  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   131      IfxCpu_CoreMode_halt,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   132      IfxCpu_CoreMode_run,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   133      IfxCpu_CoreMode_idle,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   134      IfxCpu_CoreMode_sleep,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   135      IfxCpu_CoreMode_stby,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   136      IfxCpu_CoreMode_unknown
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   137  } IfxCpu_CoreMode;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   138  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   139  /** \brief Performance conunter modes
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   140   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   141  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   142  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   143      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   144      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   145  } IfxCpu_CounterMode;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   147  /** \brief Overlay Address Mask: determines the overlay block size and the bits used for address comparison and translation
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   148   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   149  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   150  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   151      IfxCpu_OverlayAddressMask_32byte  = 0xFFF,  /**< \brief 32 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   152      IfxCpu_OverlayAddressMask_64byte  = 0xFFE,  /**< \brief 64 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   153      IfxCpu_OverlayAddressMask_128byte = 0xFFC,  /**< \brief 128 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   154      IfxCpu_OverlayAddressMask_256byte = 0xFF8,  /**< \brief 256 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   155      IfxCpu_OverlayAddressMask_512byte = 0xFF0,  /**< \brief 512 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   156      IfxCpu_OverlayAddressMask_1KB     = 0xFE0,  /**< \brief 1K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   157      IfxCpu_OverlayAddressMask_2KB     = 0xFC0,  /**< \brief 2K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   158      IfxCpu_OverlayAddressMask_4KB     = 0xF80,  /**< \brief 4K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   159      IfxCpu_OverlayAddressMask_8KB     = 0xF00,  /**< \brief 8K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   160      IfxCpu_OverlayAddressMask_16KB    = 0xE00,  /**< \brief 16K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   161      IfxCpu_OverlayAddressMask_32KB    = 0xC00,  /**< \brief 32K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   162      IfxCpu_OverlayAddressMask_64KB    = 0x800,  /**< \brief 64K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   163      IfxCpu_OverlayAddressMask_128KB   = 0x0     /**< \brief 128K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   164  } IfxCpu_OverlayAddressMask;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   165  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   166  /** \brief Selects overlay memory used for redirection
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   167   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   168  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   169  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   170      IfxCpu_OverlayMemorySelect_core0DsprPspr = 0,  /**< \brief Redirection to Core 0 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   171      IfxCpu_OverlayMemorySelect_core1DsprPspr = 1,  /**< \brief Redirection to Core 1 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   172      IfxCpu_OverlayMemorySelect_core2DsprPspr = 2,  /**< \brief Redirection to Core 2 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   173      IfxCpu_OverlayMemorySelect_core3DsprPspr = 3,  /**< \brief Redirection to Core 3 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   174      IfxCpu_OverlayMemorySelect_core4DsprPspr = 4,  /**< \brief Redirection to Core 4 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   175      IfxCpu_OverlayMemorySelect_core5DsprPspr = 5,  /**< \brief Redirection to Core 5 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   176      IfxCpu_OverlayMemorySelect_lmu           = 8,  /**< \brief Redirection to LMU memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   177      IfxCpu_OverlayMemorySelect_emem          = 9,  /**< \brief Redirection to EMEM memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   178      IfxCpu_OverlayMemorySelect_ebu           = 10  /**< \brief Redirection to EBU memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   179  } IfxCpu_OverlayMemorySelect;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   180  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   181  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   182  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   183      IfxCpu_ResetStatus_notCpuReset   = 0,  /**< \brief No Kernel Reset was executed */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   184      IfxCpu_ResetStatus_cpuResetBySmu = 1,  /**< \brief Kernel reset was requested by hardware since last clear (SMU) */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   185      IfxCpu_ResetStatus_cpuResetBySw  = 2   /**< \brief Kernel reset was requested by software since last clear (by writing KRST0.RST=1 and KRST1.RST=1) */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   186  } IfxCpu_ResetStatus;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   187  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   188  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   189  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   190  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   191  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   192  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   193  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   194  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   195   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   196  /** \brief counter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   197   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   198  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   199  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   200      uint32  counter;        /**< \brief Counter value */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   201      boolean overlfow;       /**< \brief sticky overlfow */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   202  } IfxCpu_Counter;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   203  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   204  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   205  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   206  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   207   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   208  /** \brief Performance counter result
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   209   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   210  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   211  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   212      IfxCpu_Counter instruction;       /**< \brief Instruction counter */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   213      IfxCpu_Counter clock;             /**< \brief CPU clock counter */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   214      IfxCpu_Counter counter1;          /**< \brief Multi counter 1 */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   215      IfxCpu_Counter counter2;          /**< \brief Multi counter 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   216      IfxCpu_Counter counter3;          /**< \brief Multi counter 3 */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   217  } IfxCpu_Perf;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   218  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   219  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   221  /** \addtogroup IfxLld_Cpu_Std_Core
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   222   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   223  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   224  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   225  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   226  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   227  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   228  /** \brief API to get the address for CPU HW module register memory map
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   229   * \param cpu Resource index of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   230   * \return CPU module register address
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   231   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   232  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   233  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   234  /** \brief API to get core id of the CPU of the caller.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   235   * Caution: Core id of the cpu's may not be continguous and shouldn't be used to index cpu.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   236   * Use IfxCpu_getCoreIndex() to get cpu no.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   237   * \return Resource index of the CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   238   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   239  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   240  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   241  /** \brief API to get cpu index of the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   242   * Note: This api can be used whereever cpu no/index is needed.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   243   * \return Resource index of the CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   244   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   245  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   246  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   247  /** \brief API to initialize the context save area of the CPU where this is called.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   248   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   249   * This API can initialize the CSA of the host CPU where this API is called. This API
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   250   * shall not be used to initialize the CSA of another CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   251   * \param csaBegin Pointer to start of context save area
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   252   * \param csaEnd Pointer to end of context save area
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   253   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   254   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   255  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   256  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   257  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   258   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   259   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   260  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   261  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   262  /** \brief Triggers Software Reset
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   263   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   264   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   265  IFX_INLINE void IfxCpu_triggerSwReset(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   266  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   267  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   268  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   269  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   271  /** \brief API to get current mode of CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   272   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   273   * \return Current mode of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   274   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   275  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   276  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   277  /** \brief API to get current mode of CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   278   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   279   * \return Resource index of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   280   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   281  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   282  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   283  /** \brief API to set mode of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   284   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   285   * \param mode CPU mode to be set by this API
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   286   * \return Success status of the activity (setting the core mode).
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   287   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   288   * \retval FALSE: If the activity can't be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   289   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   290  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   291  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   292  /** \brief API to set the program counter for the CPU specified.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   293   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   294   * \param programCounter Program counter value to be set
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   295   * \return success status of the activity (setting program counter value).
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   296   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   297   * \retval FALSE: If the activity can't be performed
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   298   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   299  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   300  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   301  /** \brief API to set the program counter for the CPU specified and start the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   302   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   303   * \param programCounter Program counter value to start the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   304   * \return success status of the activity (setting program counter value).
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   305   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   306   * \retval FALSE: If the activity can't be performed
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   307   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   308  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   309  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   310  /** \brief To request reset of a particular core, given by coreId
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   311   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   312   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   313  IFX_EXTERN void IfxCpu_triggerCpuReset(IfxCpu_ResourceCpu coreIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   314  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   315  /** \brief Retrieve the cause of reset(no reset, hardware(SMU) or software) since last clear by reading KRST0.RSTSTAT and clear it.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   316   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   317  IFX_EXTERN IfxCpu_ResetStatus IfxCpu_getCpuResetStatus(IfxCpu_ResourceCpu coreIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   318  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   319  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   320  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   321  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   322   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   323  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   324  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   325  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   326  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   327  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   328  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   329   * This API provides the status of CPU where this API is called
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   330   * \return Status of global interrupt enable bit.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   331   * \retval TRUE: Global interrupts enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   332   * \retval FALSE: Global interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   333   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   334  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   335  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   336  /** \brief API to disable global interrupt and return the previous status.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   337   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   338   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   339   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   340   * \return Previous status of global interrupt enable bit.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   341   * \retval TRUE: Previously, global interrupts enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   342   * \retval FALSE: Previously, global interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   343   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   344  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   345  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   346  /** \brief API to enable global interrupt.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   347   * This API simply enables the global interrupt.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   348   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   349   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   350  IFX_INLINE void IfxCpu_enableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   351  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   352  /** \brief Disable the Global Interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   353   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   354   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   355  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   356  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   357  /** \brief API to restore global interrupt with that of the passed parameter.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   358   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   359   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   360   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   361   * \param enabled Previous status of the global interrupt enable bit
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   362   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   363   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   364  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   365  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   366  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   367  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   368  /** \addtogroup IfxLld_Cpu_Std_Cache
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   369   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   370  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   371  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   372  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   373  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   374  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   375  /** \brief API to enable/ disable the data cacheability for selected segments
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   376   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   377   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   378   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   379   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   380   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   381   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   382  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   383  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   384  /** \brief API to enable/ disable the instruction cacheability for selected segments
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   385   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   386   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   387   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   388   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   389   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   390   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   391  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   392  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   393  /** \brief API to invalidate the program cache
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   394   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   395   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   396  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   397  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   398  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   399   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   400   * \return Status TRUE/FALSE
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   401   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   402  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   403  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   404  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   405   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   406   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   407   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   408   * \param enable Command to enable or bypass the data cache
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   409   * TRUE: Enable the data cache.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   410   * FALSE: Bypass the data cache.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   411   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   412   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   413  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   414  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   415  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   416   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   417   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   418   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   419   * \param enable Command to enable or bypass the program cache.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   420   * TRUE: Enable the program cache.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   421   * FALSE: Bypass the program cache
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   422   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   423   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   424  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   425  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   426  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   427  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   428  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   429   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   430  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   431  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   432  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   433  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   434  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   435  /** \brief API to read the clock counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   436   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   437   * This API can be used to read clock counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   438   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   439   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   440   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   441  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   442  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   443  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   444   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   445   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   446   * It cannot be used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   447   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   448   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   449   * reading the counter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   450   * \return Status of sticky overflow bit.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   451   * \retval TRUE: Sticky overflow bit is set.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   452   * \retval FALSE: Sticky overflow bit is reset
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   453   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   454  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   455  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   456  /** \brief API to read the instruction counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   457   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   458   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   459   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   460   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   461   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   462  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   463  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   464  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   465   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   466   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   467   * It cannot be used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   468   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   469   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   470   * reading the counter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   471   * \return Status of sticky overflow bit.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   472   * \retval TRUE: Sticky overflow bit is set.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   473   * \retval FALSE: Sticky overflow bit is reset
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   474   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   475  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   476  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   477  /** \brief API to read the performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   478   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   479   * \return counter value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   480   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   481  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint16 address);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   482  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   483  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   484   * This is generic function to get sticky overflow bit of any performance counters
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   485   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   486   * \return Status
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   487   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   488  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint16 address);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   489  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   490  /** \brief Reset and start instruction, clock and multi counters
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   491   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   492   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   493   * \param mode Counter mode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   494   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   495   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   496  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   497  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   498  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   500   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   501   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   502   * \param enable enable Command to enable or disable the performance counter.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   503   * TRUE: Enable the performance counter.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   504   * FALSE: Disable the performance counter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   505   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   506   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   507  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   508  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   509  #if !((defined(__cplusplus)) && (defined(__TASKING__)))
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   510  /** \brief Stop instruction and clock counters, return their values
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   511   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   512   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   513   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   514   * \return Performance counter result
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   515   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   516  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   517  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   518  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   519  /** \brief API to update clock counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   520   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   521   * This API can be used to update clock counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   522   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   523   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   524   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   525   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   526  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   527  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   528  /** \brief API to update Instruction counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   529   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   530   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   531   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   532   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   533   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   534   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   535  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   536  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   537  /** \brief API to update performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   538   * This is generic function to update any of the performance counters
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   539   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   540   * \param count Count
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   541   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   542   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   543  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   544  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   545  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   546  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   547  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   548   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   549  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   550  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   551  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   552  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   553  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   554  /** \brief API to acquire the mutex (binary semaphore).
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   555   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   556   * This API can be used to acquire/get the mutex.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   557   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   558   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   559   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   560   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   561   *    IfxCpu_mutexLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   562   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   563   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   564   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   565   *      IfxCpu_releaseMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   566   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   567   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   568   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   569   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   570  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   571  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   572  /** \brief API to unlock the mutex .
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   573   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   574   * This API can be used to unlock the previously acquired mutex
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   575   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   576   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   577   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   578   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   579   *    IfxCpu_mutexLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   580   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   581   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   582   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   583   *      IfxCpu_releaseMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   584   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   585   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   586   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   587   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   588  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   589  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   590  /** \brief API to unlock the resource .
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   591   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   592   * This API can be used to unlock the previously acquired lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   593   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   594   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   595   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   596  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   597  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   598  /** \brief API to lock the resource in spin mode with the given timeout.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   599   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   600   * This API can be used to spin lock for the lock for the given timeout period.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   601   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   602   * \param timeoutCount loop counter value used for timeout to acquire lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   603   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   604   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   605   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   606   *    IfxCpu_spinLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   607   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   608   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   609   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   610   *      IfxCpu_resetSpinLock(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   611   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   612   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   613   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   614   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   615  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   616  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   617  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   618  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   619  /** \addtogroup IfxLld_Cpu_Std_Utility
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   620   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   621  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   622  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   623  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   624  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   625  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   626  /** \brief This function disables the overlay memory.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   627   * \param cpu Core no
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   628   * \param overlayBlock Overlay Block
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   629   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   630   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   631  IFX_EXTERN void IfxCpu_disableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   632  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   633  /** \brief This function configures and enables the overlay memory.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   634   * Note:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   635   * The data overlay provides the capability to redirect selected data accesses to the Overlay memory. Data accesses made by the TriCore to Program Flash, Online Data Acquisition space, or EBU space can be redirected. Overlay memory may be located in the Local Memory (if present), in the Emulation Memory (Emulation Device only), or in the EBU space,or in the DPSR/PSPR memory.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   636   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   637   * How the overlay Memory works?
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   638   * Any data access to segment 8 or segment A is checked against all the activated overlay blocks. For each activated overlay block, address bits 27..5 are compared with the target base address , and this bit-wise comparison is qualified by the content of address mask. Address bits participate in the comparison if the corresponding mask bits are set to one. The access is redirected, if all the address bits selected by mask equal to the corresponding bits in target address.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   639   * The address for redirection is constructed as follows:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   640   * 1. Address bits 31..22 are set according to the overlay memory selection and the cache-ability of the original address.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   641   * 2. For address bits 21..5:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   642   * - If the corresponding address mask bit is set, the address bit value is taken from overlay base address .
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   643   * - If the corresponding address mask bit is cleared, the address bit value is taken from the original address.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   644   * 3. Address bits 4..0 are always taken directly from the original address.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   645   * If there is no redirection, the original address is used to perform the access.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   646   * Target address ranges for activated overlay blocks should not overlap or an exception may occur.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   647   * \param cpu Core no
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   648   * \param overlayBlock Overlay Block
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   649   * \param overlayMemorySelect Overlay Memory Select
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   650   * \param overlayAddressMask overlay Address Mask
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   651   * \param targetBaseAddress Target Base address (i.e Source address to be re-directed)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   652   * \param overlayBaseAddress Overlay or Re-directed Base address (Bits 21..5 of the base address the overlay memory block in the overlay memory)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   653   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   654   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   655  IFX_EXTERN void IfxCpu_enableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock, IfxCpu_OverlayMemorySelect overlayMemorySelect, IfxCpu_OverlayAddressMask overlayAddressMask, uint32 targetBaseAddress, uint32 overlayBaseAddress);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   656  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   657  /** \brief API to get random value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   658   * \param seed Pointer to seed value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   659   * \return random value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   660   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   661  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   662  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   663  /** \brief API to get random value with in the range
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   664   * \param seed Pointer to seed value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   665   * \param min minimum range value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   666   * \param max maximum range value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   667   * \return random value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   668   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   669  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   670  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   671  /** \brief This function waits till all the cores have set their corresponding bits in the event. This function along with
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   672   * IfxCpu_emitEvent() are used to achieve the synchronisation between the configured cores. By default
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   673   * "IFXCPU_CFG_ALLCORE_DONE" macro defined for all the cores. In case the user wants to check for
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   674   * synchronisation among the required cores, the macro can be redefined with the value accroing to the
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   675   * CORE_ID register.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   676   * The IfxCpu_emitEvent() is to be used in the Main functions of the Cores where the user wants to check for synchronisation.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   677   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   678   * e.g:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   679   * 1. Check for synchronisation between core 0 and core 5
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   680   * # define 0x41U
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   681   * 2. Check for synchronisation between core 0 to core 5
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   682   * # define 0x5FU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   683   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   684   * Note:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   685   * Core id values read from CORE_ID register will be as shown below. The value indicates the position of the bit needs to be set while building the macro.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   686   * Core 0: 0
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   687   * Core 1: 1
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   688   * Core 2: 2
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   689   * Core 3: 3
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   690   * Core 4: 4
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   691   * Core 5: 6
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   692   * \param event Synchronous Event
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   693   * \param timeoutMilliSec timeout in millisec
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   694   * \return Error condition
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   695   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   696   * The functions IfxCpu_waitEvent and IfxCpu_emitEvent are used to achieve synchronisation between all cores (i.e individual cores wait till all cores have reached the synchronisation point). The IfxCpu_waitEvent returns 1 incase a timeout occurs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   697   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   698   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   699   * // Global variable. preferably located in  shared memory.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   700   * IfxCpu_syncEvent event;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   701   * boolean errorVal;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   702   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   703   * // Below code should be repeated in Each core
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   704   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   705   * // Upon reaching Synchonisation point
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   706   * IfxCpu_emitEvent(&event);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   707   * errorVal = IfxCpu_waitEvent(&event, timeoutMilliSec); // timeoutMilliSec is timeout value to wait
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   708   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   709   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   710   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   711   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   712  IFX_EXTERN boolean IfxCpu_waitEvent(IfxCpu_syncEvent *event, uint32 timeoutMilliSec);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   713  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   714  /** \brief This function sets a bit corresponding to the core in the event.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   715   * \param event Synchronous Event
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   716   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   717   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   718   * A coding example can be found in \ref IfxCpu_waitEvent
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   719   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   720   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   721  IFX_EXTERN void IfxCpu_emitEvent(IfxCpu_syncEvent *event);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   722  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   723  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   724  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   725  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   726  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   727  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   728  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   729  /** \brief Sets all CPUs to Idle mode except the Master CPU,index of which is given as the parameter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   730   * \param masterCpu Master CPU Index- All except this will be set to Idle Mode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   731   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   732   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   733  IFX_EXTERN void IfxCpu_setAllIdleExceptMasterCpu(IfxCpu_ResourceCpu masterCpu);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   734  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   735  /** \brief Disables interrupts for all CPUs except the Master CPU,index of which is given as the parameter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   736   * \param masterCpu Master CPU Index- All except this will have their interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   737   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   738   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   739  IFX_EXTERN void IfxCpu_disableInterruptsAllExceptMaster(IfxCpu_ResourceCpu masterCpu);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   740  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   741  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   742  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   743  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   744  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   745  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   746  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   747      Ifx_CPU_ICR reg;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   748      reg.U = __mfcr(CPU_ICR);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   749      return reg.B.IE != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   750  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   751  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   752  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   753  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   754  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   755      boolean enabled;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   756      enabled = IfxCpu_areInterruptsEnabled();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   757      __disable();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   758      __nop();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   759      return enabled;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   760  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   761  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   762  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   763  IFX_INLINE void IfxCpu_enableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   764  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   765      __enable();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   766  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   767  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   768  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   769  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   770  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   771      uint32 cpu_pmaVal;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   772      uint16 checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   773      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   774      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   775  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   776      /*resolve the restrictions*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   777      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   778      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xC);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   779  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   780      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   781      {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   782          segmentNumberMask |= checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   783      }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   784  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   785      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   786  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   787      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   788  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   789      /*The CPU_PMA registers are ENDINIT protected*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   790      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   791      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   792      /*Write to PMA0 register for selecting the cacheability for data cache*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   793      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   794      __mtcr(CPU_PMA0, cpu_pmaVal);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   795      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   796      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   797  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   798  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   799  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   800  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   801  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   802      uint32 cpu_pmaVal;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   803      uint16 checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   804      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   805      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   806  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   807      /*resolve the restrictions*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   808      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   809      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xD);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   810  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   811      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   812      {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   813          segmentNumberMask |= checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   814      }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   815  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   816      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   817  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   818      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   819  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   820      /*The CPU_PMA registers are ENDINIT protected*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   821      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   822      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   823      /*Write to PMA1 register for selecting the cacheability for data cache*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   824      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   825      __mtcr(CPU_PMA1, cpu_pmaVal);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   826      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   827      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   828  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   829  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   830  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   831  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   832  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   833      __disable();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   834      __nop();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   835  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   836  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   837  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   838  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   839  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   840      Ifx_CPU *module;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   841  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   842      if (cpu < IfxCpu_ResourceCpu_none)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   843      {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   844          module = (Ifx_CPU *)IfxCpu_cfg_indexMap[cpu].module;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   845      }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   846      else
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   847      {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   848          module = NULL_PTR;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   849      }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   850  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   851      return module;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   852  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   853  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   854  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   855  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   856  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   857      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   858  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   859  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   860  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   861  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   862  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   863      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   864  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   865  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   866  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   867  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   868  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   869      Ifx_CPU_CORE_ID reg;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   870      reg.U = __mfcr(CPU_CORE_ID);
	mfcr	d15,#65052
.L377:

; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   871      return (IfxCpu_Id)reg.B.CORE_ID;
	fcall	.cocofun_2
.L277:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   203  {
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   204      volatile IfxCpu_Trap trapWatch;
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   205      trapWatch = IfxCpu_Trap_extractTrapInfo(IfxCpu_Trap_Class_systemCall, tin);
	st.d	[a10]0,e0
.L270:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   206      IFX_CFG_CPU_TRAP_SYSCALL_CPU1_HOOK(trapWatch);
	ld.d	e0,[a10]0
.L379:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   207      __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
	rslcx
.L464:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   208      __asm("rfe");
	rfe
.L465:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   209  }
	ret
.L265:
	
__IfxCpu_Trap_systemCall_Cpu1_function_end:
	.size	IfxCpu_Trap_systemCall_Cpu1,__IfxCpu_Trap_systemCall_Cpu1_function_end-IfxCpu_Trap_systemCall_Cpu1
.L87:
	; End of function
	
	.sdecl	'.text.IfxCpu_Trap.IfxCpu_Trap_systemCall_Cpu2',code,cluster('IfxCpu_Trap_systemCall_Cpu2')
	.sect	'.text.IfxCpu_Trap.IfxCpu_Trap_systemCall_Cpu2'
	.align	2
	
	.global	IfxCpu_Trap_systemCall_Cpu2

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   210  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   211  
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   212  #if IFXCPU_NUM_MODULES >= 3
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   213  void IfxCpu_Trap_systemCall_Cpu2(uint32 tin)
; Function IfxCpu_Trap_systemCall_Cpu2
.L23:
IfxCpu_Trap_systemCall_Cpu2:	.type	func
	sub.a	a10,#8
.L283:

; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   348      __asm("mov.aa %0, a11": "=a" (res) : :"a11");      (inlined)
	
	mov.aa a15, a11
.L381:
	
.L288:
	fcall	.cocofun_3
.L290:

; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    42   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    43   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    44   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    45   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    46   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    47   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    48   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    49   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    50   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    51   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    52   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    53   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    54   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    55   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    56   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    57   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    58   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    59  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    60  #ifndef IFXCPU_H
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    61  #define IFXCPU_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    62  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    63  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    64  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    65  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    66  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    67  #include "_Impl/IfxCpu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    68  #include "IfxSrc_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    69  #include "IfxScu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    70  #include "IfxStm_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    71  #include "_Impl/IfxScu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    72  #include "_Utilities/Ifx_Assert.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    73  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    74  #include "Scu/Std/IfxScuCcu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    75  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    76  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    77  /*-----------------------------------Macros-----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    78  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    79  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    80  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    81   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    82   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    83   * the CPU number.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    84   * Example usage:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    85   *  \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    86   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    87   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    88   *  \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    89   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    90  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    91  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    92  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    93   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    94   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    95   * the CPU number.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    96   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    97   *   Example usage:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    98   *   \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    99   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   100   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   101   *   \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   102   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   103  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   104  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   105  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   106  /*------------------------------Type Definitions------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   107  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   108  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   109  /** \brief Lock type Spin lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   110   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   111  typedef unsigned int IfxCpu_spinLock;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   112  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   113  /** \brief Lock type Mutex lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   114   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   115  typedef unsigned int IfxCpu_mutexLock;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   116  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   117  /** \brief Event used for synchronisation.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   118   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   119  typedef unsigned int IfxCpu_syncEvent;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   120  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   121  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   122  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   123  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   124  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   125  /** \addtogroup IfxLld_Cpu_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   126   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   127  /** \brief Enumeration for the Cpu mode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   128   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   129  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   130  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   131      IfxCpu_CoreMode_halt,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   132      IfxCpu_CoreMode_run,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   133      IfxCpu_CoreMode_idle,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   134      IfxCpu_CoreMode_sleep,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   135      IfxCpu_CoreMode_stby,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   136      IfxCpu_CoreMode_unknown
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   137  } IfxCpu_CoreMode;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   138  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   139  /** \brief Performance conunter modes
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   140   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   141  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   142  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   143      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   144      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   145  } IfxCpu_CounterMode;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   147  /** \brief Overlay Address Mask: determines the overlay block size and the bits used for address comparison and translation
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   148   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   149  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   150  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   151      IfxCpu_OverlayAddressMask_32byte  = 0xFFF,  /**< \brief 32 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   152      IfxCpu_OverlayAddressMask_64byte  = 0xFFE,  /**< \brief 64 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   153      IfxCpu_OverlayAddressMask_128byte = 0xFFC,  /**< \brief 128 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   154      IfxCpu_OverlayAddressMask_256byte = 0xFF8,  /**< \brief 256 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   155      IfxCpu_OverlayAddressMask_512byte = 0xFF0,  /**< \brief 512 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   156      IfxCpu_OverlayAddressMask_1KB     = 0xFE0,  /**< \brief 1K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   157      IfxCpu_OverlayAddressMask_2KB     = 0xFC0,  /**< \brief 2K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   158      IfxCpu_OverlayAddressMask_4KB     = 0xF80,  /**< \brief 4K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   159      IfxCpu_OverlayAddressMask_8KB     = 0xF00,  /**< \brief 8K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   160      IfxCpu_OverlayAddressMask_16KB    = 0xE00,  /**< \brief 16K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   161      IfxCpu_OverlayAddressMask_32KB    = 0xC00,  /**< \brief 32K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   162      IfxCpu_OverlayAddressMask_64KB    = 0x800,  /**< \brief 64K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   163      IfxCpu_OverlayAddressMask_128KB   = 0x0     /**< \brief 128K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   164  } IfxCpu_OverlayAddressMask;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   165  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   166  /** \brief Selects overlay memory used for redirection
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   167   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   168  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   169  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   170      IfxCpu_OverlayMemorySelect_core0DsprPspr = 0,  /**< \brief Redirection to Core 0 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   171      IfxCpu_OverlayMemorySelect_core1DsprPspr = 1,  /**< \brief Redirection to Core 1 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   172      IfxCpu_OverlayMemorySelect_core2DsprPspr = 2,  /**< \brief Redirection to Core 2 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   173      IfxCpu_OverlayMemorySelect_core3DsprPspr = 3,  /**< \brief Redirection to Core 3 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   174      IfxCpu_OverlayMemorySelect_core4DsprPspr = 4,  /**< \brief Redirection to Core 4 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   175      IfxCpu_OverlayMemorySelect_core5DsprPspr = 5,  /**< \brief Redirection to Core 5 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   176      IfxCpu_OverlayMemorySelect_lmu           = 8,  /**< \brief Redirection to LMU memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   177      IfxCpu_OverlayMemorySelect_emem          = 9,  /**< \brief Redirection to EMEM memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   178      IfxCpu_OverlayMemorySelect_ebu           = 10  /**< \brief Redirection to EBU memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   179  } IfxCpu_OverlayMemorySelect;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   180  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   181  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   182  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   183      IfxCpu_ResetStatus_notCpuReset   = 0,  /**< \brief No Kernel Reset was executed */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   184      IfxCpu_ResetStatus_cpuResetBySmu = 1,  /**< \brief Kernel reset was requested by hardware since last clear (SMU) */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   185      IfxCpu_ResetStatus_cpuResetBySw  = 2   /**< \brief Kernel reset was requested by software since last clear (by writing KRST0.RST=1 and KRST1.RST=1) */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   186  } IfxCpu_ResetStatus;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   187  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   188  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   189  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   190  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   191  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   192  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   193  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   194  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   195   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   196  /** \brief counter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   197   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   198  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   199  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   200      uint32  counter;        /**< \brief Counter value */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   201      boolean overlfow;       /**< \brief sticky overlfow */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   202  } IfxCpu_Counter;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   203  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   204  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   205  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   206  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   207   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   208  /** \brief Performance counter result
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   209   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   210  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   211  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   212      IfxCpu_Counter instruction;       /**< \brief Instruction counter */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   213      IfxCpu_Counter clock;             /**< \brief CPU clock counter */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   214      IfxCpu_Counter counter1;          /**< \brief Multi counter 1 */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   215      IfxCpu_Counter counter2;          /**< \brief Multi counter 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   216      IfxCpu_Counter counter3;          /**< \brief Multi counter 3 */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   217  } IfxCpu_Perf;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   218  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   219  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   221  /** \addtogroup IfxLld_Cpu_Std_Core
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   222   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   223  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   224  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   225  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   226  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   227  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   228  /** \brief API to get the address for CPU HW module register memory map
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   229   * \param cpu Resource index of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   230   * \return CPU module register address
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   231   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   232  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   233  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   234  /** \brief API to get core id of the CPU of the caller.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   235   * Caution: Core id of the cpu's may not be continguous and shouldn't be used to index cpu.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   236   * Use IfxCpu_getCoreIndex() to get cpu no.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   237   * \return Resource index of the CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   238   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   239  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   240  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   241  /** \brief API to get cpu index of the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   242   * Note: This api can be used whereever cpu no/index is needed.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   243   * \return Resource index of the CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   244   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   245  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   246  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   247  /** \brief API to initialize the context save area of the CPU where this is called.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   248   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   249   * This API can initialize the CSA of the host CPU where this API is called. This API
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   250   * shall not be used to initialize the CSA of another CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   251   * \param csaBegin Pointer to start of context save area
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   252   * \param csaEnd Pointer to end of context save area
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   253   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   254   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   255  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   256  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   257  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   258   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   259   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   260  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   261  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   262  /** \brief Triggers Software Reset
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   263   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   264   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   265  IFX_INLINE void IfxCpu_triggerSwReset(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   266  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   267  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   268  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   269  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   271  /** \brief API to get current mode of CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   272   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   273   * \return Current mode of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   274   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   275  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   276  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   277  /** \brief API to get current mode of CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   278   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   279   * \return Resource index of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   280   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   281  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   282  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   283  /** \brief API to set mode of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   284   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   285   * \param mode CPU mode to be set by this API
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   286   * \return Success status of the activity (setting the core mode).
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   287   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   288   * \retval FALSE: If the activity can't be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   289   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   290  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   291  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   292  /** \brief API to set the program counter for the CPU specified.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   293   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   294   * \param programCounter Program counter value to be set
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   295   * \return success status of the activity (setting program counter value).
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   296   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   297   * \retval FALSE: If the activity can't be performed
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   298   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   299  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   300  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   301  /** \brief API to set the program counter for the CPU specified and start the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   302   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   303   * \param programCounter Program counter value to start the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   304   * \return success status of the activity (setting program counter value).
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   305   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   306   * \retval FALSE: If the activity can't be performed
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   307   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   308  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   309  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   310  /** \brief To request reset of a particular core, given by coreId
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   311   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   312   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   313  IFX_EXTERN void IfxCpu_triggerCpuReset(IfxCpu_ResourceCpu coreIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   314  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   315  /** \brief Retrieve the cause of reset(no reset, hardware(SMU) or software) since last clear by reading KRST0.RSTSTAT and clear it.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   316   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   317  IFX_EXTERN IfxCpu_ResetStatus IfxCpu_getCpuResetStatus(IfxCpu_ResourceCpu coreIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   318  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   319  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   320  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   321  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   322   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   323  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   324  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   325  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   326  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   327  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   328  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   329   * This API provides the status of CPU where this API is called
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   330   * \return Status of global interrupt enable bit.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   331   * \retval TRUE: Global interrupts enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   332   * \retval FALSE: Global interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   333   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   334  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   335  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   336  /** \brief API to disable global interrupt and return the previous status.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   337   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   338   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   339   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   340   * \return Previous status of global interrupt enable bit.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   341   * \retval TRUE: Previously, global interrupts enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   342   * \retval FALSE: Previously, global interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   343   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   344  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   345  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   346  /** \brief API to enable global interrupt.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   347   * This API simply enables the global interrupt.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   348   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   349   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   350  IFX_INLINE void IfxCpu_enableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   351  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   352  /** \brief Disable the Global Interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   353   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   354   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   355  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   356  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   357  /** \brief API to restore global interrupt with that of the passed parameter.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   358   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   359   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   360   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   361   * \param enabled Previous status of the global interrupt enable bit
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   362   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   363   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   364  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   365  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   366  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   367  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   368  /** \addtogroup IfxLld_Cpu_Std_Cache
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   369   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   370  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   371  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   372  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   373  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   374  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   375  /** \brief API to enable/ disable the data cacheability for selected segments
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   376   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   377   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   378   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   379   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   380   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   381   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   382  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   383  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   384  /** \brief API to enable/ disable the instruction cacheability for selected segments
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   385   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   386   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   387   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   388   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   389   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   390   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   391  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   392  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   393  /** \brief API to invalidate the program cache
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   394   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   395   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   396  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   397  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   398  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   399   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   400   * \return Status TRUE/FALSE
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   401   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   402  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   403  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   404  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   405   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   406   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   407   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   408   * \param enable Command to enable or bypass the data cache
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   409   * TRUE: Enable the data cache.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   410   * FALSE: Bypass the data cache.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   411   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   412   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   413  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   414  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   415  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   416   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   417   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   418   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   419   * \param enable Command to enable or bypass the program cache.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   420   * TRUE: Enable the program cache.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   421   * FALSE: Bypass the program cache
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   422   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   423   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   424  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   425  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   426  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   427  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   428  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   429   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   430  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   431  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   432  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   433  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   434  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   435  /** \brief API to read the clock counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   436   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   437   * This API can be used to read clock counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   438   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   439   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   440   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   441  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   442  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   443  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   444   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   445   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   446   * It cannot be used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   447   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   448   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   449   * reading the counter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   450   * \return Status of sticky overflow bit.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   451   * \retval TRUE: Sticky overflow bit is set.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   452   * \retval FALSE: Sticky overflow bit is reset
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   453   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   454  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   455  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   456  /** \brief API to read the instruction counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   457   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   458   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   459   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   460   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   461   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   462  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   463  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   464  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   465   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   466   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   467   * It cannot be used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   468   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   469   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   470   * reading the counter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   471   * \return Status of sticky overflow bit.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   472   * \retval TRUE: Sticky overflow bit is set.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   473   * \retval FALSE: Sticky overflow bit is reset
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   474   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   475  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   476  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   477  /** \brief API to read the performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   478   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   479   * \return counter value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   480   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   481  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint16 address);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   482  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   483  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   484   * This is generic function to get sticky overflow bit of any performance counters
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   485   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   486   * \return Status
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   487   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   488  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint16 address);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   489  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   490  /** \brief Reset and start instruction, clock and multi counters
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   491   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   492   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   493   * \param mode Counter mode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   494   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   495   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   496  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   497  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   498  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   500   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   501   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   502   * \param enable enable Command to enable or disable the performance counter.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   503   * TRUE: Enable the performance counter.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   504   * FALSE: Disable the performance counter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   505   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   506   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   507  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   508  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   509  #if !((defined(__cplusplus)) && (defined(__TASKING__)))
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   510  /** \brief Stop instruction and clock counters, return their values
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   511   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   512   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   513   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   514   * \return Performance counter result
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   515   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   516  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   517  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   518  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   519  /** \brief API to update clock counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   520   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   521   * This API can be used to update clock counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   522   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   523   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   524   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   525   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   526  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   527  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   528  /** \brief API to update Instruction counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   529   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   530   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   531   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   532   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   533   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   534   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   535  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   536  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   537  /** \brief API to update performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   538   * This is generic function to update any of the performance counters
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   539   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   540   * \param count Count
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   541   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   542   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   543  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   544  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   545  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   546  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   547  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   548   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   549  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   550  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   551  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   552  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   553  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   554  /** \brief API to acquire the mutex (binary semaphore).
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   555   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   556   * This API can be used to acquire/get the mutex.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   557   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   558   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   559   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   560   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   561   *    IfxCpu_mutexLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   562   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   563   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   564   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   565   *      IfxCpu_releaseMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   566   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   567   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   568   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   569   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   570  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   571  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   572  /** \brief API to unlock the mutex .
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   573   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   574   * This API can be used to unlock the previously acquired mutex
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   575   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   576   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   577   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   578   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   579   *    IfxCpu_mutexLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   580   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   581   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   582   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   583   *      IfxCpu_releaseMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   584   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   585   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   586   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   587   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   588  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   589  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   590  /** \brief API to unlock the resource .
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   591   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   592   * This API can be used to unlock the previously acquired lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   593   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   594   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   595   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   596  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   597  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   598  /** \brief API to lock the resource in spin mode with the given timeout.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   599   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   600   * This API can be used to spin lock for the lock for the given timeout period.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   601   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   602   * \param timeoutCount loop counter value used for timeout to acquire lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   603   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   604   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   605   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   606   *    IfxCpu_spinLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   607   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   608   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   609   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   610   *      IfxCpu_resetSpinLock(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   611   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   612   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   613   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   614   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   615  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   616  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   617  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   618  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   619  /** \addtogroup IfxLld_Cpu_Std_Utility
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   620   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   621  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   622  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   623  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   624  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   625  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   626  /** \brief This function disables the overlay memory.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   627   * \param cpu Core no
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   628   * \param overlayBlock Overlay Block
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   629   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   630   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   631  IFX_EXTERN void IfxCpu_disableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   632  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   633  /** \brief This function configures and enables the overlay memory.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   634   * Note:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   635   * The data overlay provides the capability to redirect selected data accesses to the Overlay memory. Data accesses made by the TriCore to Program Flash, Online Data Acquisition space, or EBU space can be redirected. Overlay memory may be located in the Local Memory (if present), in the Emulation Memory (Emulation Device only), or in the EBU space,or in the DPSR/PSPR memory.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   636   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   637   * How the overlay Memory works?
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   638   * Any data access to segment 8 or segment A is checked against all the activated overlay blocks. For each activated overlay block, address bits 27..5 are compared with the target base address , and this bit-wise comparison is qualified by the content of address mask. Address bits participate in the comparison if the corresponding mask bits are set to one. The access is redirected, if all the address bits selected by mask equal to the corresponding bits in target address.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   639   * The address for redirection is constructed as follows:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   640   * 1. Address bits 31..22 are set according to the overlay memory selection and the cache-ability of the original address.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   641   * 2. For address bits 21..5:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   642   * - If the corresponding address mask bit is set, the address bit value is taken from overlay base address .
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   643   * - If the corresponding address mask bit is cleared, the address bit value is taken from the original address.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   644   * 3. Address bits 4..0 are always taken directly from the original address.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   645   * If there is no redirection, the original address is used to perform the access.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   646   * Target address ranges for activated overlay blocks should not overlap or an exception may occur.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   647   * \param cpu Core no
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   648   * \param overlayBlock Overlay Block
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   649   * \param overlayMemorySelect Overlay Memory Select
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   650   * \param overlayAddressMask overlay Address Mask
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   651   * \param targetBaseAddress Target Base address (i.e Source address to be re-directed)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   652   * \param overlayBaseAddress Overlay or Re-directed Base address (Bits 21..5 of the base address the overlay memory block in the overlay memory)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   653   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   654   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   655  IFX_EXTERN void IfxCpu_enableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock, IfxCpu_OverlayMemorySelect overlayMemorySelect, IfxCpu_OverlayAddressMask overlayAddressMask, uint32 targetBaseAddress, uint32 overlayBaseAddress);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   656  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   657  /** \brief API to get random value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   658   * \param seed Pointer to seed value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   659   * \return random value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   660   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   661  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   662  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   663  /** \brief API to get random value with in the range
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   664   * \param seed Pointer to seed value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   665   * \param min minimum range value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   666   * \param max maximum range value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   667   * \return random value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   668   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   669  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   670  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   671  /** \brief This function waits till all the cores have set their corresponding bits in the event. This function along with
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   672   * IfxCpu_emitEvent() are used to achieve the synchronisation between the configured cores. By default
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   673   * "IFXCPU_CFG_ALLCORE_DONE" macro defined for all the cores. In case the user wants to check for
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   674   * synchronisation among the required cores, the macro can be redefined with the value accroing to the
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   675   * CORE_ID register.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   676   * The IfxCpu_emitEvent() is to be used in the Main functions of the Cores where the user wants to check for synchronisation.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   677   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   678   * e.g:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   679   * 1. Check for synchronisation between core 0 and core 5
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   680   * # define 0x41U
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   681   * 2. Check for synchronisation between core 0 to core 5
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   682   * # define 0x5FU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   683   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   684   * Note:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   685   * Core id values read from CORE_ID register will be as shown below. The value indicates the position of the bit needs to be set while building the macro.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   686   * Core 0: 0
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   687   * Core 1: 1
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   688   * Core 2: 2
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   689   * Core 3: 3
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   690   * Core 4: 4
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   691   * Core 5: 6
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   692   * \param event Synchronous Event
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   693   * \param timeoutMilliSec timeout in millisec
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   694   * \return Error condition
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   695   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   696   * The functions IfxCpu_waitEvent and IfxCpu_emitEvent are used to achieve synchronisation between all cores (i.e individual cores wait till all cores have reached the synchronisation point). The IfxCpu_waitEvent returns 1 incase a timeout occurs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   697   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   698   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   699   * // Global variable. preferably located in  shared memory.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   700   * IfxCpu_syncEvent event;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   701   * boolean errorVal;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   702   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   703   * // Below code should be repeated in Each core
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   704   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   705   * // Upon reaching Synchonisation point
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   706   * IfxCpu_emitEvent(&event);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   707   * errorVal = IfxCpu_waitEvent(&event, timeoutMilliSec); // timeoutMilliSec is timeout value to wait
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   708   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   709   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   710   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   711   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   712  IFX_EXTERN boolean IfxCpu_waitEvent(IfxCpu_syncEvent *event, uint32 timeoutMilliSec);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   713  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   714  /** \brief This function sets a bit corresponding to the core in the event.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   715   * \param event Synchronous Event
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   716   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   717   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   718   * A coding example can be found in \ref IfxCpu_waitEvent
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   719   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   720   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   721  IFX_EXTERN void IfxCpu_emitEvent(IfxCpu_syncEvent *event);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   722  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   723  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   724  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   725  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   726  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   727  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   728  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   729  /** \brief Sets all CPUs to Idle mode except the Master CPU,index of which is given as the parameter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   730   * \param masterCpu Master CPU Index- All except this will be set to Idle Mode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   731   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   732   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   733  IFX_EXTERN void IfxCpu_setAllIdleExceptMasterCpu(IfxCpu_ResourceCpu masterCpu);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   734  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   735  /** \brief Disables interrupts for all CPUs except the Master CPU,index of which is given as the parameter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   736   * \param masterCpu Master CPU Index- All except this will have their interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   737   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   738   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   739  IFX_EXTERN void IfxCpu_disableInterruptsAllExceptMaster(IfxCpu_ResourceCpu masterCpu);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   740  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   741  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   742  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   743  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   744  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   745  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   746  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   747      Ifx_CPU_ICR reg;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   748      reg.U = __mfcr(CPU_ICR);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   749      return reg.B.IE != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   750  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   751  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   752  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   753  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   754  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   755      boolean enabled;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   756      enabled = IfxCpu_areInterruptsEnabled();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   757      __disable();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   758      __nop();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   759      return enabled;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   760  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   761  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   762  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   763  IFX_INLINE void IfxCpu_enableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   764  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   765      __enable();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   766  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   767  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   768  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   769  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   770  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   771      uint32 cpu_pmaVal;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   772      uint16 checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   773      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   774      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   775  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   776      /*resolve the restrictions*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   777      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   778      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xC);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   779  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   780      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   781      {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   782          segmentNumberMask |= checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   783      }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   784  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   785      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   786  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   787      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   788  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   789      /*The CPU_PMA registers are ENDINIT protected*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   790      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   791      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   792      /*Write to PMA0 register for selecting the cacheability for data cache*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   793      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   794      __mtcr(CPU_PMA0, cpu_pmaVal);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   795      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   796      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   797  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   798  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   799  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   800  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   801  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   802      uint32 cpu_pmaVal;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   803      uint16 checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   804      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   805      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   806  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   807      /*resolve the restrictions*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   808      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   809      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xD);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   810  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   811      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   812      {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   813          segmentNumberMask |= checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   814      }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   815  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   816      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   817  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   818      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   819  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   820      /*The CPU_PMA registers are ENDINIT protected*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   821      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   822      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   823      /*Write to PMA1 register for selecting the cacheability for data cache*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   824      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   825      __mtcr(CPU_PMA1, cpu_pmaVal);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   826      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   827      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   828  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   829  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   830  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   831  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   832  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   833      __disable();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   834      __nop();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   835  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   836  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   837  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   838  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   839  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   840      Ifx_CPU *module;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   841  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   842      if (cpu < IfxCpu_ResourceCpu_none)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   843      {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   844          module = (Ifx_CPU *)IfxCpu_cfg_indexMap[cpu].module;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   845      }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   846      else
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   847      {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   848          module = NULL_PTR;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   849      }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   850  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   851      return module;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   852  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   853  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   854  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   855  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   856  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   857      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   858  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   859  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   860  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   861  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   862  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   863      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   864  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   865  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   866  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   867  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   868  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   869      Ifx_CPU_CORE_ID reg;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   870      reg.U = __mfcr(CPU_CORE_ID);
	mfcr	d15,#65052
.L380:

; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   871      return (IfxCpu_Id)reg.B.CORE_ID;
	fcall	.cocofun_2
.L291:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   214  {
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   215      volatile IfxCpu_Trap trapWatch;
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   216      trapWatch = IfxCpu_Trap_extractTrapInfo(IfxCpu_Trap_Class_systemCall, tin);
	st.d	[a10]0,e0
.L284:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   217      IFX_CFG_CPU_TRAP_SYSCALL_CPU2_HOOK(trapWatch);
	ld.d	e0,[a10]0
.L382:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   218      __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
	rslcx
.L470:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   219      __asm("rfe");
	rfe
.L471:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   220  }
	ret
.L279:
	
__IfxCpu_Trap_systemCall_Cpu2_function_end:
	.size	IfxCpu_Trap_systemCall_Cpu2,__IfxCpu_Trap_systemCall_Cpu2_function_end-IfxCpu_Trap_systemCall_Cpu2
.L92:
	; End of function
	
	.sdecl	'.text.IfxCpu_Trap.IfxCpu_Trap_systemCall_Cpu3',code,cluster('IfxCpu_Trap_systemCall_Cpu3')
	.sect	'.text.IfxCpu_Trap.IfxCpu_Trap_systemCall_Cpu3'
	.align	2
	
	.global	IfxCpu_Trap_systemCall_Cpu3

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   221  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   222  
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   223  #if IFXCPU_NUM_MODULES >= 4
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   224  void IfxCpu_Trap_systemCall_Cpu3(uint32 tin)
; Function IfxCpu_Trap_systemCall_Cpu3
.L25:
IfxCpu_Trap_systemCall_Cpu3:	.type	func
	sub.a	a10,#8
.L297:

; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   348      __asm("mov.aa %0, a11": "=a" (res) : :"a11");      (inlined)
	
	mov.aa a15, a11
.L384:
	
.L302:
	fcall	.cocofun_3
.L304:

; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    42   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    43   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    44   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    45   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    46   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    47   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    48   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    49   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    50   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    51   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    52   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    53   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    54   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    55   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    56   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    57   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    58   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    59  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    60  #ifndef IFXCPU_H
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    61  #define IFXCPU_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    62  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    63  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    64  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    65  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    66  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    67  #include "_Impl/IfxCpu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    68  #include "IfxSrc_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    69  #include "IfxScu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    70  #include "IfxStm_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    71  #include "_Impl/IfxScu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    72  #include "_Utilities/Ifx_Assert.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    73  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    74  #include "Scu/Std/IfxScuCcu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    75  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    76  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    77  /*-----------------------------------Macros-----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    78  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    79  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    80  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    81   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    82   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    83   * the CPU number.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    84   * Example usage:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    85   *  \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    86   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    87   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    88   *  \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    89   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    90  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    91  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    92  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    93   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    94   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    95   * the CPU number.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    96   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    97   *   Example usage:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    98   *   \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    99   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   100   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   101   *   \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   102   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   103  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   104  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   105  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   106  /*------------------------------Type Definitions------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   107  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   108  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   109  /** \brief Lock type Spin lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   110   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   111  typedef unsigned int IfxCpu_spinLock;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   112  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   113  /** \brief Lock type Mutex lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   114   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   115  typedef unsigned int IfxCpu_mutexLock;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   116  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   117  /** \brief Event used for synchronisation.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   118   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   119  typedef unsigned int IfxCpu_syncEvent;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   120  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   121  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   122  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   123  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   124  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   125  /** \addtogroup IfxLld_Cpu_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   126   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   127  /** \brief Enumeration for the Cpu mode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   128   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   129  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   130  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   131      IfxCpu_CoreMode_halt,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   132      IfxCpu_CoreMode_run,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   133      IfxCpu_CoreMode_idle,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   134      IfxCpu_CoreMode_sleep,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   135      IfxCpu_CoreMode_stby,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   136      IfxCpu_CoreMode_unknown
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   137  } IfxCpu_CoreMode;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   138  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   139  /** \brief Performance conunter modes
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   140   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   141  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   142  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   143      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   144      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   145  } IfxCpu_CounterMode;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   147  /** \brief Overlay Address Mask: determines the overlay block size and the bits used for address comparison and translation
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   148   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   149  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   150  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   151      IfxCpu_OverlayAddressMask_32byte  = 0xFFF,  /**< \brief 32 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   152      IfxCpu_OverlayAddressMask_64byte  = 0xFFE,  /**< \brief 64 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   153      IfxCpu_OverlayAddressMask_128byte = 0xFFC,  /**< \brief 128 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   154      IfxCpu_OverlayAddressMask_256byte = 0xFF8,  /**< \brief 256 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   155      IfxCpu_OverlayAddressMask_512byte = 0xFF0,  /**< \brief 512 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   156      IfxCpu_OverlayAddressMask_1KB     = 0xFE0,  /**< \brief 1K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   157      IfxCpu_OverlayAddressMask_2KB     = 0xFC0,  /**< \brief 2K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   158      IfxCpu_OverlayAddressMask_4KB     = 0xF80,  /**< \brief 4K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   159      IfxCpu_OverlayAddressMask_8KB     = 0xF00,  /**< \brief 8K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   160      IfxCpu_OverlayAddressMask_16KB    = 0xE00,  /**< \brief 16K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   161      IfxCpu_OverlayAddressMask_32KB    = 0xC00,  /**< \brief 32K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   162      IfxCpu_OverlayAddressMask_64KB    = 0x800,  /**< \brief 64K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   163      IfxCpu_OverlayAddressMask_128KB   = 0x0     /**< \brief 128K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   164  } IfxCpu_OverlayAddressMask;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   165  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   166  /** \brief Selects overlay memory used for redirection
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   167   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   168  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   169  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   170      IfxCpu_OverlayMemorySelect_core0DsprPspr = 0,  /**< \brief Redirection to Core 0 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   171      IfxCpu_OverlayMemorySelect_core1DsprPspr = 1,  /**< \brief Redirection to Core 1 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   172      IfxCpu_OverlayMemorySelect_core2DsprPspr = 2,  /**< \brief Redirection to Core 2 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   173      IfxCpu_OverlayMemorySelect_core3DsprPspr = 3,  /**< \brief Redirection to Core 3 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   174      IfxCpu_OverlayMemorySelect_core4DsprPspr = 4,  /**< \brief Redirection to Core 4 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   175      IfxCpu_OverlayMemorySelect_core5DsprPspr = 5,  /**< \brief Redirection to Core 5 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   176      IfxCpu_OverlayMemorySelect_lmu           = 8,  /**< \brief Redirection to LMU memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   177      IfxCpu_OverlayMemorySelect_emem          = 9,  /**< \brief Redirection to EMEM memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   178      IfxCpu_OverlayMemorySelect_ebu           = 10  /**< \brief Redirection to EBU memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   179  } IfxCpu_OverlayMemorySelect;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   180  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   181  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   182  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   183      IfxCpu_ResetStatus_notCpuReset   = 0,  /**< \brief No Kernel Reset was executed */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   184      IfxCpu_ResetStatus_cpuResetBySmu = 1,  /**< \brief Kernel reset was requested by hardware since last clear (SMU) */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   185      IfxCpu_ResetStatus_cpuResetBySw  = 2   /**< \brief Kernel reset was requested by software since last clear (by writing KRST0.RST=1 and KRST1.RST=1) */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   186  } IfxCpu_ResetStatus;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   187  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   188  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   189  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   190  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   191  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   192  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   193  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   194  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   195   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   196  /** \brief counter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   197   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   198  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   199  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   200      uint32  counter;        /**< \brief Counter value */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   201      boolean overlfow;       /**< \brief sticky overlfow */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   202  } IfxCpu_Counter;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   203  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   204  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   205  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   206  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   207   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   208  /** \brief Performance counter result
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   209   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   210  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   211  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   212      IfxCpu_Counter instruction;       /**< \brief Instruction counter */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   213      IfxCpu_Counter clock;             /**< \brief CPU clock counter */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   214      IfxCpu_Counter counter1;          /**< \brief Multi counter 1 */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   215      IfxCpu_Counter counter2;          /**< \brief Multi counter 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   216      IfxCpu_Counter counter3;          /**< \brief Multi counter 3 */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   217  } IfxCpu_Perf;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   218  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   219  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   221  /** \addtogroup IfxLld_Cpu_Std_Core
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   222   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   223  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   224  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   225  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   226  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   227  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   228  /** \brief API to get the address for CPU HW module register memory map
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   229   * \param cpu Resource index of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   230   * \return CPU module register address
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   231   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   232  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   233  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   234  /** \brief API to get core id of the CPU of the caller.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   235   * Caution: Core id of the cpu's may not be continguous and shouldn't be used to index cpu.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   236   * Use IfxCpu_getCoreIndex() to get cpu no.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   237   * \return Resource index of the CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   238   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   239  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   240  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   241  /** \brief API to get cpu index of the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   242   * Note: This api can be used whereever cpu no/index is needed.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   243   * \return Resource index of the CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   244   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   245  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   246  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   247  /** \brief API to initialize the context save area of the CPU where this is called.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   248   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   249   * This API can initialize the CSA of the host CPU where this API is called. This API
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   250   * shall not be used to initialize the CSA of another CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   251   * \param csaBegin Pointer to start of context save area
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   252   * \param csaEnd Pointer to end of context save area
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   253   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   254   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   255  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   256  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   257  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   258   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   259   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   260  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   261  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   262  /** \brief Triggers Software Reset
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   263   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   264   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   265  IFX_INLINE void IfxCpu_triggerSwReset(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   266  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   267  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   268  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   269  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   271  /** \brief API to get current mode of CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   272   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   273   * \return Current mode of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   274   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   275  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   276  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   277  /** \brief API to get current mode of CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   278   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   279   * \return Resource index of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   280   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   281  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   282  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   283  /** \brief API to set mode of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   284   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   285   * \param mode CPU mode to be set by this API
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   286   * \return Success status of the activity (setting the core mode).
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   287   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   288   * \retval FALSE: If the activity can't be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   289   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   290  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   291  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   292  /** \brief API to set the program counter for the CPU specified.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   293   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   294   * \param programCounter Program counter value to be set
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   295   * \return success status of the activity (setting program counter value).
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   296   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   297   * \retval FALSE: If the activity can't be performed
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   298   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   299  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   300  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   301  /** \brief API to set the program counter for the CPU specified and start the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   302   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   303   * \param programCounter Program counter value to start the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   304   * \return success status of the activity (setting program counter value).
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   305   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   306   * \retval FALSE: If the activity can't be performed
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   307   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   308  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   309  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   310  /** \brief To request reset of a particular core, given by coreId
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   311   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   312   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   313  IFX_EXTERN void IfxCpu_triggerCpuReset(IfxCpu_ResourceCpu coreIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   314  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   315  /** \brief Retrieve the cause of reset(no reset, hardware(SMU) or software) since last clear by reading KRST0.RSTSTAT and clear it.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   316   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   317  IFX_EXTERN IfxCpu_ResetStatus IfxCpu_getCpuResetStatus(IfxCpu_ResourceCpu coreIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   318  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   319  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   320  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   321  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   322   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   323  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   324  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   325  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   326  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   327  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   328  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   329   * This API provides the status of CPU where this API is called
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   330   * \return Status of global interrupt enable bit.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   331   * \retval TRUE: Global interrupts enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   332   * \retval FALSE: Global interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   333   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   334  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   335  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   336  /** \brief API to disable global interrupt and return the previous status.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   337   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   338   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   339   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   340   * \return Previous status of global interrupt enable bit.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   341   * \retval TRUE: Previously, global interrupts enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   342   * \retval FALSE: Previously, global interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   343   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   344  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   345  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   346  /** \brief API to enable global interrupt.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   347   * This API simply enables the global interrupt.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   348   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   349   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   350  IFX_INLINE void IfxCpu_enableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   351  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   352  /** \brief Disable the Global Interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   353   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   354   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   355  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   356  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   357  /** \brief API to restore global interrupt with that of the passed parameter.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   358   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   359   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   360   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   361   * \param enabled Previous status of the global interrupt enable bit
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   362   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   363   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   364  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   365  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   366  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   367  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   368  /** \addtogroup IfxLld_Cpu_Std_Cache
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   369   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   370  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   371  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   372  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   373  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   374  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   375  /** \brief API to enable/ disable the data cacheability for selected segments
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   376   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   377   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   378   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   379   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   380   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   381   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   382  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   383  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   384  /** \brief API to enable/ disable the instruction cacheability for selected segments
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   385   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   386   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   387   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   388   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   389   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   390   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   391  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   392  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   393  /** \brief API to invalidate the program cache
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   394   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   395   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   396  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   397  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   398  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   399   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   400   * \return Status TRUE/FALSE
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   401   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   402  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   403  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   404  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   405   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   406   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   407   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   408   * \param enable Command to enable or bypass the data cache
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   409   * TRUE: Enable the data cache.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   410   * FALSE: Bypass the data cache.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   411   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   412   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   413  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   414  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   415  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   416   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   417   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   418   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   419   * \param enable Command to enable or bypass the program cache.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   420   * TRUE: Enable the program cache.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   421   * FALSE: Bypass the program cache
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   422   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   423   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   424  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   425  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   426  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   427  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   428  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   429   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   430  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   431  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   432  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   433  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   434  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   435  /** \brief API to read the clock counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   436   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   437   * This API can be used to read clock counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   438   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   439   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   440   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   441  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   442  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   443  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   444   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   445   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   446   * It cannot be used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   447   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   448   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   449   * reading the counter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   450   * \return Status of sticky overflow bit.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   451   * \retval TRUE: Sticky overflow bit is set.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   452   * \retval FALSE: Sticky overflow bit is reset
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   453   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   454  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   455  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   456  /** \brief API to read the instruction counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   457   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   458   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   459   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   460   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   461   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   462  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   463  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   464  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   465   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   466   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   467   * It cannot be used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   468   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   469   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   470   * reading the counter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   471   * \return Status of sticky overflow bit.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   472   * \retval TRUE: Sticky overflow bit is set.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   473   * \retval FALSE: Sticky overflow bit is reset
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   474   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   475  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   476  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   477  /** \brief API to read the performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   478   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   479   * \return counter value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   480   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   481  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint16 address);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   482  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   483  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   484   * This is generic function to get sticky overflow bit of any performance counters
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   485   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   486   * \return Status
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   487   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   488  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint16 address);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   489  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   490  /** \brief Reset and start instruction, clock and multi counters
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   491   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   492   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   493   * \param mode Counter mode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   494   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   495   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   496  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   497  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   498  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   500   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   501   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   502   * \param enable enable Command to enable or disable the performance counter.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   503   * TRUE: Enable the performance counter.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   504   * FALSE: Disable the performance counter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   505   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   506   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   507  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   508  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   509  #if !((defined(__cplusplus)) && (defined(__TASKING__)))
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   510  /** \brief Stop instruction and clock counters, return their values
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   511   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   512   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   513   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   514   * \return Performance counter result
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   515   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   516  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   517  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   518  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   519  /** \brief API to update clock counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   520   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   521   * This API can be used to update clock counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   522   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   523   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   524   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   525   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   526  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   527  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   528  /** \brief API to update Instruction counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   529   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   530   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   531   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   532   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   533   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   534   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   535  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   536  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   537  /** \brief API to update performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   538   * This is generic function to update any of the performance counters
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   539   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   540   * \param count Count
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   541   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   542   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   543  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   544  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   545  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   546  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   547  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   548   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   549  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   550  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   551  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   552  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   553  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   554  /** \brief API to acquire the mutex (binary semaphore).
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   555   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   556   * This API can be used to acquire/get the mutex.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   557   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   558   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   559   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   560   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   561   *    IfxCpu_mutexLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   562   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   563   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   564   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   565   *      IfxCpu_releaseMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   566   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   567   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   568   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   569   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   570  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   571  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   572  /** \brief API to unlock the mutex .
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   573   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   574   * This API can be used to unlock the previously acquired mutex
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   575   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   576   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   577   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   578   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   579   *    IfxCpu_mutexLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   580   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   581   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   582   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   583   *      IfxCpu_releaseMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   584   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   585   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   586   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   587   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   588  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   589  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   590  /** \brief API to unlock the resource .
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   591   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   592   * This API can be used to unlock the previously acquired lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   593   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   594   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   595   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   596  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   597  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   598  /** \brief API to lock the resource in spin mode with the given timeout.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   599   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   600   * This API can be used to spin lock for the lock for the given timeout period.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   601   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   602   * \param timeoutCount loop counter value used for timeout to acquire lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   603   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   604   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   605   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   606   *    IfxCpu_spinLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   607   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   608   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   609   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   610   *      IfxCpu_resetSpinLock(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   611   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   612   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   613   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   614   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   615  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   616  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   617  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   618  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   619  /** \addtogroup IfxLld_Cpu_Std_Utility
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   620   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   621  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   622  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   623  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   624  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   625  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   626  /** \brief This function disables the overlay memory.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   627   * \param cpu Core no
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   628   * \param overlayBlock Overlay Block
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   629   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   630   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   631  IFX_EXTERN void IfxCpu_disableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   632  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   633  /** \brief This function configures and enables the overlay memory.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   634   * Note:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   635   * The data overlay provides the capability to redirect selected data accesses to the Overlay memory. Data accesses made by the TriCore to Program Flash, Online Data Acquisition space, or EBU space can be redirected. Overlay memory may be located in the Local Memory (if present), in the Emulation Memory (Emulation Device only), or in the EBU space,or in the DPSR/PSPR memory.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   636   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   637   * How the overlay Memory works?
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   638   * Any data access to segment 8 or segment A is checked against all the activated overlay blocks. For each activated overlay block, address bits 27..5 are compared with the target base address , and this bit-wise comparison is qualified by the content of address mask. Address bits participate in the comparison if the corresponding mask bits are set to one. The access is redirected, if all the address bits selected by mask equal to the corresponding bits in target address.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   639   * The address for redirection is constructed as follows:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   640   * 1. Address bits 31..22 are set according to the overlay memory selection and the cache-ability of the original address.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   641   * 2. For address bits 21..5:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   642   * - If the corresponding address mask bit is set, the address bit value is taken from overlay base address .
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   643   * - If the corresponding address mask bit is cleared, the address bit value is taken from the original address.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   644   * 3. Address bits 4..0 are always taken directly from the original address.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   645   * If there is no redirection, the original address is used to perform the access.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   646   * Target address ranges for activated overlay blocks should not overlap or an exception may occur.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   647   * \param cpu Core no
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   648   * \param overlayBlock Overlay Block
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   649   * \param overlayMemorySelect Overlay Memory Select
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   650   * \param overlayAddressMask overlay Address Mask
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   651   * \param targetBaseAddress Target Base address (i.e Source address to be re-directed)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   652   * \param overlayBaseAddress Overlay or Re-directed Base address (Bits 21..5 of the base address the overlay memory block in the overlay memory)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   653   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   654   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   655  IFX_EXTERN void IfxCpu_enableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock, IfxCpu_OverlayMemorySelect overlayMemorySelect, IfxCpu_OverlayAddressMask overlayAddressMask, uint32 targetBaseAddress, uint32 overlayBaseAddress);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   656  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   657  /** \brief API to get random value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   658   * \param seed Pointer to seed value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   659   * \return random value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   660   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   661  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   662  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   663  /** \brief API to get random value with in the range
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   664   * \param seed Pointer to seed value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   665   * \param min minimum range value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   666   * \param max maximum range value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   667   * \return random value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   668   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   669  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   670  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   671  /** \brief This function waits till all the cores have set their corresponding bits in the event. This function along with
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   672   * IfxCpu_emitEvent() are used to achieve the synchronisation between the configured cores. By default
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   673   * "IFXCPU_CFG_ALLCORE_DONE" macro defined for all the cores. In case the user wants to check for
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   674   * synchronisation among the required cores, the macro can be redefined with the value accroing to the
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   675   * CORE_ID register.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   676   * The IfxCpu_emitEvent() is to be used in the Main functions of the Cores where the user wants to check for synchronisation.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   677   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   678   * e.g:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   679   * 1. Check for synchronisation between core 0 and core 5
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   680   * # define 0x41U
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   681   * 2. Check for synchronisation between core 0 to core 5
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   682   * # define 0x5FU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   683   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   684   * Note:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   685   * Core id values read from CORE_ID register will be as shown below. The value indicates the position of the bit needs to be set while building the macro.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   686   * Core 0: 0
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   687   * Core 1: 1
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   688   * Core 2: 2
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   689   * Core 3: 3
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   690   * Core 4: 4
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   691   * Core 5: 6
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   692   * \param event Synchronous Event
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   693   * \param timeoutMilliSec timeout in millisec
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   694   * \return Error condition
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   695   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   696   * The functions IfxCpu_waitEvent and IfxCpu_emitEvent are used to achieve synchronisation between all cores (i.e individual cores wait till all cores have reached the synchronisation point). The IfxCpu_waitEvent returns 1 incase a timeout occurs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   697   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   698   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   699   * // Global variable. preferably located in  shared memory.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   700   * IfxCpu_syncEvent event;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   701   * boolean errorVal;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   702   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   703   * // Below code should be repeated in Each core
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   704   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   705   * // Upon reaching Synchonisation point
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   706   * IfxCpu_emitEvent(&event);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   707   * errorVal = IfxCpu_waitEvent(&event, timeoutMilliSec); // timeoutMilliSec is timeout value to wait
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   708   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   709   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   710   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   711   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   712  IFX_EXTERN boolean IfxCpu_waitEvent(IfxCpu_syncEvent *event, uint32 timeoutMilliSec);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   713  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   714  /** \brief This function sets a bit corresponding to the core in the event.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   715   * \param event Synchronous Event
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   716   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   717   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   718   * A coding example can be found in \ref IfxCpu_waitEvent
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   719   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   720   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   721  IFX_EXTERN void IfxCpu_emitEvent(IfxCpu_syncEvent *event);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   722  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   723  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   724  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   725  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   726  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   727  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   728  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   729  /** \brief Sets all CPUs to Idle mode except the Master CPU,index of which is given as the parameter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   730   * \param masterCpu Master CPU Index- All except this will be set to Idle Mode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   731   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   732   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   733  IFX_EXTERN void IfxCpu_setAllIdleExceptMasterCpu(IfxCpu_ResourceCpu masterCpu);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   734  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   735  /** \brief Disables interrupts for all CPUs except the Master CPU,index of which is given as the parameter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   736   * \param masterCpu Master CPU Index- All except this will have their interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   737   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   738   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   739  IFX_EXTERN void IfxCpu_disableInterruptsAllExceptMaster(IfxCpu_ResourceCpu masterCpu);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   740  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   741  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   742  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   743  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   744  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   745  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   746  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   747      Ifx_CPU_ICR reg;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   748      reg.U = __mfcr(CPU_ICR);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   749      return reg.B.IE != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   750  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   751  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   752  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   753  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   754  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   755      boolean enabled;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   756      enabled = IfxCpu_areInterruptsEnabled();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   757      __disable();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   758      __nop();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   759      return enabled;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   760  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   761  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   762  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   763  IFX_INLINE void IfxCpu_enableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   764  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   765      __enable();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   766  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   767  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   768  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   769  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   770  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   771      uint32 cpu_pmaVal;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   772      uint16 checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   773      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   774      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   775  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   776      /*resolve the restrictions*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   777      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   778      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xC);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   779  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   780      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   781      {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   782          segmentNumberMask |= checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   783      }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   784  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   785      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   786  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   787      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   788  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   789      /*The CPU_PMA registers are ENDINIT protected*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   790      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   791      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   792      /*Write to PMA0 register for selecting the cacheability for data cache*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   793      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   794      __mtcr(CPU_PMA0, cpu_pmaVal);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   795      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   796      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   797  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   798  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   799  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   800  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   801  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   802      uint32 cpu_pmaVal;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   803      uint16 checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   804      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   805      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   806  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   807      /*resolve the restrictions*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   808      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   809      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xD);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   810  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   811      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   812      {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   813          segmentNumberMask |= checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   814      }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   815  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   816      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   817  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   818      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   819  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   820      /*The CPU_PMA registers are ENDINIT protected*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   821      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   822      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   823      /*Write to PMA1 register for selecting the cacheability for data cache*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   824      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   825      __mtcr(CPU_PMA1, cpu_pmaVal);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   826      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   827      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   828  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   829  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   830  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   831  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   832  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   833      __disable();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   834      __nop();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   835  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   836  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   837  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   838  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   839  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   840      Ifx_CPU *module;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   841  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   842      if (cpu < IfxCpu_ResourceCpu_none)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   843      {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   844          module = (Ifx_CPU *)IfxCpu_cfg_indexMap[cpu].module;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   845      }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   846      else
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   847      {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   848          module = NULL_PTR;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   849      }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   850  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   851      return module;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   852  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   853  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   854  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   855  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   856  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   857      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   858  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   859  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   860  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   861  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   862  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   863      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   864  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   865  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   866  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   867  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   868  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   869      Ifx_CPU_CORE_ID reg;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   870      reg.U = __mfcr(CPU_CORE_ID);
	mfcr	d15,#65052
.L383:

; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   871      return (IfxCpu_Id)reg.B.CORE_ID;
	fcall	.cocofun_2
.L305:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   225  {
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   226      volatile IfxCpu_Trap trapWatch;
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   227      trapWatch = IfxCpu_Trap_extractTrapInfo(IfxCpu_Trap_Class_systemCall, tin);
	st.d	[a10]0,e0
.L298:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   228      IFX_CFG_CPU_TRAP_SYSCALL_CPU3_HOOK(trapWatch);
	ld.d	e0,[a10]0
.L385:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   229      __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
	rslcx
.L476:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   230      __asm("rfe");
	rfe
.L477:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   231  }
	ret
.L293:
	
__IfxCpu_Trap_systemCall_Cpu3_function_end:
	.size	IfxCpu_Trap_systemCall_Cpu3,__IfxCpu_Trap_systemCall_Cpu3_function_end-IfxCpu_Trap_systemCall_Cpu3
.L97:
	; End of function
	
	.sdecl	'.text.IfxCpu_Trap.IfxCpu_Trap_systemCall_Cpu4',code,cluster('IfxCpu_Trap_systemCall_Cpu4')
	.sect	'.text.IfxCpu_Trap.IfxCpu_Trap_systemCall_Cpu4'
	.align	2
	
	.global	IfxCpu_Trap_systemCall_Cpu4

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   232  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   233  
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   234  #if IFXCPU_NUM_MODULES >= 5
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   235  void IfxCpu_Trap_systemCall_Cpu4(uint32 tin)
; Function IfxCpu_Trap_systemCall_Cpu4
.L27:
IfxCpu_Trap_systemCall_Cpu4:	.type	func
	sub.a	a10,#8
.L311:

; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   348      __asm("mov.aa %0, a11": "=a" (res) : :"a11");      (inlined)
	
	mov.aa a15, a11
.L387:
	
.L316:
	fcall	.cocofun_3
.L318:

; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    42   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    43   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    44   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    45   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    46   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    47   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    48   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    49   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    50   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    51   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    52   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    53   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    54   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    55   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    56   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    57   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    58   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    59  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    60  #ifndef IFXCPU_H
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    61  #define IFXCPU_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    62  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    63  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    64  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    65  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    66  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    67  #include "_Impl/IfxCpu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    68  #include "IfxSrc_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    69  #include "IfxScu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    70  #include "IfxStm_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    71  #include "_Impl/IfxScu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    72  #include "_Utilities/Ifx_Assert.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    73  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    74  #include "Scu/Std/IfxScuCcu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    75  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    76  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    77  /*-----------------------------------Macros-----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    78  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    79  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    80  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    81   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    82   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    83   * the CPU number.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    84   * Example usage:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    85   *  \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    86   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    87   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    88   *  \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    89   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    90  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    91  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    92  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    93   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    94   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    95   * the CPU number.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    96   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    97   *   Example usage:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    98   *   \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    99   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   100   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   101   *   \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   102   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   103  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   104  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   105  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   106  /*------------------------------Type Definitions------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   107  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   108  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   109  /** \brief Lock type Spin lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   110   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   111  typedef unsigned int IfxCpu_spinLock;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   112  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   113  /** \brief Lock type Mutex lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   114   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   115  typedef unsigned int IfxCpu_mutexLock;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   116  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   117  /** \brief Event used for synchronisation.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   118   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   119  typedef unsigned int IfxCpu_syncEvent;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   120  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   121  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   122  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   123  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   124  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   125  /** \addtogroup IfxLld_Cpu_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   126   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   127  /** \brief Enumeration for the Cpu mode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   128   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   129  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   130  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   131      IfxCpu_CoreMode_halt,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   132      IfxCpu_CoreMode_run,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   133      IfxCpu_CoreMode_idle,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   134      IfxCpu_CoreMode_sleep,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   135      IfxCpu_CoreMode_stby,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   136      IfxCpu_CoreMode_unknown
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   137  } IfxCpu_CoreMode;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   138  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   139  /** \brief Performance conunter modes
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   140   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   141  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   142  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   143      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   144      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   145  } IfxCpu_CounterMode;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   147  /** \brief Overlay Address Mask: determines the overlay block size and the bits used for address comparison and translation
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   148   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   149  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   150  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   151      IfxCpu_OverlayAddressMask_32byte  = 0xFFF,  /**< \brief 32 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   152      IfxCpu_OverlayAddressMask_64byte  = 0xFFE,  /**< \brief 64 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   153      IfxCpu_OverlayAddressMask_128byte = 0xFFC,  /**< \brief 128 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   154      IfxCpu_OverlayAddressMask_256byte = 0xFF8,  /**< \brief 256 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   155      IfxCpu_OverlayAddressMask_512byte = 0xFF0,  /**< \brief 512 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   156      IfxCpu_OverlayAddressMask_1KB     = 0xFE0,  /**< \brief 1K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   157      IfxCpu_OverlayAddressMask_2KB     = 0xFC0,  /**< \brief 2K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   158      IfxCpu_OverlayAddressMask_4KB     = 0xF80,  /**< \brief 4K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   159      IfxCpu_OverlayAddressMask_8KB     = 0xF00,  /**< \brief 8K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   160      IfxCpu_OverlayAddressMask_16KB    = 0xE00,  /**< \brief 16K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   161      IfxCpu_OverlayAddressMask_32KB    = 0xC00,  /**< \brief 32K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   162      IfxCpu_OverlayAddressMask_64KB    = 0x800,  /**< \brief 64K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   163      IfxCpu_OverlayAddressMask_128KB   = 0x0     /**< \brief 128K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   164  } IfxCpu_OverlayAddressMask;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   165  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   166  /** \brief Selects overlay memory used for redirection
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   167   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   168  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   169  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   170      IfxCpu_OverlayMemorySelect_core0DsprPspr = 0,  /**< \brief Redirection to Core 0 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   171      IfxCpu_OverlayMemorySelect_core1DsprPspr = 1,  /**< \brief Redirection to Core 1 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   172      IfxCpu_OverlayMemorySelect_core2DsprPspr = 2,  /**< \brief Redirection to Core 2 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   173      IfxCpu_OverlayMemorySelect_core3DsprPspr = 3,  /**< \brief Redirection to Core 3 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   174      IfxCpu_OverlayMemorySelect_core4DsprPspr = 4,  /**< \brief Redirection to Core 4 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   175      IfxCpu_OverlayMemorySelect_core5DsprPspr = 5,  /**< \brief Redirection to Core 5 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   176      IfxCpu_OverlayMemorySelect_lmu           = 8,  /**< \brief Redirection to LMU memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   177      IfxCpu_OverlayMemorySelect_emem          = 9,  /**< \brief Redirection to EMEM memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   178      IfxCpu_OverlayMemorySelect_ebu           = 10  /**< \brief Redirection to EBU memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   179  } IfxCpu_OverlayMemorySelect;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   180  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   181  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   182  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   183      IfxCpu_ResetStatus_notCpuReset   = 0,  /**< \brief No Kernel Reset was executed */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   184      IfxCpu_ResetStatus_cpuResetBySmu = 1,  /**< \brief Kernel reset was requested by hardware since last clear (SMU) */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   185      IfxCpu_ResetStatus_cpuResetBySw  = 2   /**< \brief Kernel reset was requested by software since last clear (by writing KRST0.RST=1 and KRST1.RST=1) */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   186  } IfxCpu_ResetStatus;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   187  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   188  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   189  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   190  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   191  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   192  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   193  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   194  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   195   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   196  /** \brief counter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   197   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   198  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   199  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   200      uint32  counter;        /**< \brief Counter value */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   201      boolean overlfow;       /**< \brief sticky overlfow */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   202  } IfxCpu_Counter;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   203  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   204  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   205  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   206  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   207   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   208  /** \brief Performance counter result
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   209   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   210  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   211  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   212      IfxCpu_Counter instruction;       /**< \brief Instruction counter */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   213      IfxCpu_Counter clock;             /**< \brief CPU clock counter */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   214      IfxCpu_Counter counter1;          /**< \brief Multi counter 1 */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   215      IfxCpu_Counter counter2;          /**< \brief Multi counter 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   216      IfxCpu_Counter counter3;          /**< \brief Multi counter 3 */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   217  } IfxCpu_Perf;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   218  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   219  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   221  /** \addtogroup IfxLld_Cpu_Std_Core
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   222   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   223  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   224  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   225  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   226  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   227  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   228  /** \brief API to get the address for CPU HW module register memory map
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   229   * \param cpu Resource index of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   230   * \return CPU module register address
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   231   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   232  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   233  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   234  /** \brief API to get core id of the CPU of the caller.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   235   * Caution: Core id of the cpu's may not be continguous and shouldn't be used to index cpu.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   236   * Use IfxCpu_getCoreIndex() to get cpu no.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   237   * \return Resource index of the CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   238   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   239  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   240  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   241  /** \brief API to get cpu index of the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   242   * Note: This api can be used whereever cpu no/index is needed.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   243   * \return Resource index of the CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   244   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   245  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   246  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   247  /** \brief API to initialize the context save area of the CPU where this is called.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   248   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   249   * This API can initialize the CSA of the host CPU where this API is called. This API
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   250   * shall not be used to initialize the CSA of another CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   251   * \param csaBegin Pointer to start of context save area
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   252   * \param csaEnd Pointer to end of context save area
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   253   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   254   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   255  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   256  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   257  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   258   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   259   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   260  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   261  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   262  /** \brief Triggers Software Reset
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   263   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   264   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   265  IFX_INLINE void IfxCpu_triggerSwReset(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   266  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   267  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   268  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   269  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   271  /** \brief API to get current mode of CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   272   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   273   * \return Current mode of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   274   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   275  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   276  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   277  /** \brief API to get current mode of CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   278   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   279   * \return Resource index of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   280   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   281  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   282  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   283  /** \brief API to set mode of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   284   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   285   * \param mode CPU mode to be set by this API
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   286   * \return Success status of the activity (setting the core mode).
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   287   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   288   * \retval FALSE: If the activity can't be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   289   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   290  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   291  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   292  /** \brief API to set the program counter for the CPU specified.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   293   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   294   * \param programCounter Program counter value to be set
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   295   * \return success status of the activity (setting program counter value).
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   296   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   297   * \retval FALSE: If the activity can't be performed
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   298   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   299  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   300  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   301  /** \brief API to set the program counter for the CPU specified and start the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   302   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   303   * \param programCounter Program counter value to start the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   304   * \return success status of the activity (setting program counter value).
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   305   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   306   * \retval FALSE: If the activity can't be performed
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   307   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   308  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   309  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   310  /** \brief To request reset of a particular core, given by coreId
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   311   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   312   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   313  IFX_EXTERN void IfxCpu_triggerCpuReset(IfxCpu_ResourceCpu coreIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   314  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   315  /** \brief Retrieve the cause of reset(no reset, hardware(SMU) or software) since last clear by reading KRST0.RSTSTAT and clear it.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   316   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   317  IFX_EXTERN IfxCpu_ResetStatus IfxCpu_getCpuResetStatus(IfxCpu_ResourceCpu coreIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   318  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   319  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   320  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   321  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   322   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   323  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   324  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   325  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   326  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   327  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   328  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   329   * This API provides the status of CPU where this API is called
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   330   * \return Status of global interrupt enable bit.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   331   * \retval TRUE: Global interrupts enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   332   * \retval FALSE: Global interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   333   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   334  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   335  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   336  /** \brief API to disable global interrupt and return the previous status.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   337   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   338   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   339   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   340   * \return Previous status of global interrupt enable bit.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   341   * \retval TRUE: Previously, global interrupts enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   342   * \retval FALSE: Previously, global interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   343   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   344  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   345  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   346  /** \brief API to enable global interrupt.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   347   * This API simply enables the global interrupt.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   348   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   349   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   350  IFX_INLINE void IfxCpu_enableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   351  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   352  /** \brief Disable the Global Interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   353   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   354   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   355  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   356  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   357  /** \brief API to restore global interrupt with that of the passed parameter.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   358   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   359   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   360   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   361   * \param enabled Previous status of the global interrupt enable bit
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   362   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   363   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   364  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   365  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   366  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   367  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   368  /** \addtogroup IfxLld_Cpu_Std_Cache
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   369   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   370  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   371  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   372  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   373  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   374  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   375  /** \brief API to enable/ disable the data cacheability for selected segments
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   376   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   377   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   378   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   379   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   380   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   381   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   382  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   383  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   384  /** \brief API to enable/ disable the instruction cacheability for selected segments
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   385   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   386   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   387   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   388   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   389   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   390   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   391  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   392  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   393  /** \brief API to invalidate the program cache
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   394   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   395   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   396  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   397  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   398  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   399   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   400   * \return Status TRUE/FALSE
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   401   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   402  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   403  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   404  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   405   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   406   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   407   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   408   * \param enable Command to enable or bypass the data cache
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   409   * TRUE: Enable the data cache.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   410   * FALSE: Bypass the data cache.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   411   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   412   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   413  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   414  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   415  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   416   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   417   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   418   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   419   * \param enable Command to enable or bypass the program cache.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   420   * TRUE: Enable the program cache.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   421   * FALSE: Bypass the program cache
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   422   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   423   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   424  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   425  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   426  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   427  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   428  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   429   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   430  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   431  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   432  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   433  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   434  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   435  /** \brief API to read the clock counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   436   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   437   * This API can be used to read clock counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   438   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   439   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   440   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   441  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   442  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   443  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   444   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   445   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   446   * It cannot be used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   447   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   448   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   449   * reading the counter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   450   * \return Status of sticky overflow bit.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   451   * \retval TRUE: Sticky overflow bit is set.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   452   * \retval FALSE: Sticky overflow bit is reset
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   453   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   454  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   455  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   456  /** \brief API to read the instruction counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   457   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   458   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   459   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   460   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   461   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   462  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   463  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   464  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   465   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   466   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   467   * It cannot be used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   468   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   469   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   470   * reading the counter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   471   * \return Status of sticky overflow bit.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   472   * \retval TRUE: Sticky overflow bit is set.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   473   * \retval FALSE: Sticky overflow bit is reset
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   474   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   475  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   476  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   477  /** \brief API to read the performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   478   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   479   * \return counter value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   480   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   481  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint16 address);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   482  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   483  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   484   * This is generic function to get sticky overflow bit of any performance counters
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   485   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   486   * \return Status
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   487   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   488  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint16 address);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   489  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   490  /** \brief Reset and start instruction, clock and multi counters
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   491   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   492   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   493   * \param mode Counter mode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   494   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   495   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   496  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   497  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   498  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   500   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   501   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   502   * \param enable enable Command to enable or disable the performance counter.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   503   * TRUE: Enable the performance counter.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   504   * FALSE: Disable the performance counter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   505   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   506   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   507  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   508  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   509  #if !((defined(__cplusplus)) && (defined(__TASKING__)))
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   510  /** \brief Stop instruction and clock counters, return their values
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   511   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   512   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   513   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   514   * \return Performance counter result
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   515   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   516  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   517  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   518  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   519  /** \brief API to update clock counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   520   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   521   * This API can be used to update clock counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   522   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   523   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   524   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   525   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   526  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   527  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   528  /** \brief API to update Instruction counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   529   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   530   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   531   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   532   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   533   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   534   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   535  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   536  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   537  /** \brief API to update performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   538   * This is generic function to update any of the performance counters
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   539   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   540   * \param count Count
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   541   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   542   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   543  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   544  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   545  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   546  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   547  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   548   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   549  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   550  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   551  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   552  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   553  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   554  /** \brief API to acquire the mutex (binary semaphore).
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   555   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   556   * This API can be used to acquire/get the mutex.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   557   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   558   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   559   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   560   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   561   *    IfxCpu_mutexLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   562   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   563   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   564   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   565   *      IfxCpu_releaseMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   566   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   567   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   568   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   569   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   570  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   571  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   572  /** \brief API to unlock the mutex .
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   573   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   574   * This API can be used to unlock the previously acquired mutex
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   575   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   576   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   577   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   578   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   579   *    IfxCpu_mutexLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   580   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   581   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   582   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   583   *      IfxCpu_releaseMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   584   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   585   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   586   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   587   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   588  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   589  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   590  /** \brief API to unlock the resource .
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   591   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   592   * This API can be used to unlock the previously acquired lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   593   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   594   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   595   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   596  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   597  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   598  /** \brief API to lock the resource in spin mode with the given timeout.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   599   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   600   * This API can be used to spin lock for the lock for the given timeout period.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   601   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   602   * \param timeoutCount loop counter value used for timeout to acquire lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   603   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   604   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   605   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   606   *    IfxCpu_spinLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   607   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   608   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   609   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   610   *      IfxCpu_resetSpinLock(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   611   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   612   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   613   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   614   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   615  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   616  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   617  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   618  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   619  /** \addtogroup IfxLld_Cpu_Std_Utility
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   620   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   621  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   622  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   623  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   624  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   625  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   626  /** \brief This function disables the overlay memory.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   627   * \param cpu Core no
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   628   * \param overlayBlock Overlay Block
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   629   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   630   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   631  IFX_EXTERN void IfxCpu_disableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   632  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   633  /** \brief This function configures and enables the overlay memory.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   634   * Note:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   635   * The data overlay provides the capability to redirect selected data accesses to the Overlay memory. Data accesses made by the TriCore to Program Flash, Online Data Acquisition space, or EBU space can be redirected. Overlay memory may be located in the Local Memory (if present), in the Emulation Memory (Emulation Device only), or in the EBU space,or in the DPSR/PSPR memory.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   636   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   637   * How the overlay Memory works?
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   638   * Any data access to segment 8 or segment A is checked against all the activated overlay blocks. For each activated overlay block, address bits 27..5 are compared with the target base address , and this bit-wise comparison is qualified by the content of address mask. Address bits participate in the comparison if the corresponding mask bits are set to one. The access is redirected, if all the address bits selected by mask equal to the corresponding bits in target address.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   639   * The address for redirection is constructed as follows:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   640   * 1. Address bits 31..22 are set according to the overlay memory selection and the cache-ability of the original address.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   641   * 2. For address bits 21..5:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   642   * - If the corresponding address mask bit is set, the address bit value is taken from overlay base address .
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   643   * - If the corresponding address mask bit is cleared, the address bit value is taken from the original address.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   644   * 3. Address bits 4..0 are always taken directly from the original address.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   645   * If there is no redirection, the original address is used to perform the access.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   646   * Target address ranges for activated overlay blocks should not overlap or an exception may occur.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   647   * \param cpu Core no
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   648   * \param overlayBlock Overlay Block
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   649   * \param overlayMemorySelect Overlay Memory Select
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   650   * \param overlayAddressMask overlay Address Mask
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   651   * \param targetBaseAddress Target Base address (i.e Source address to be re-directed)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   652   * \param overlayBaseAddress Overlay or Re-directed Base address (Bits 21..5 of the base address the overlay memory block in the overlay memory)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   653   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   654   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   655  IFX_EXTERN void IfxCpu_enableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock, IfxCpu_OverlayMemorySelect overlayMemorySelect, IfxCpu_OverlayAddressMask overlayAddressMask, uint32 targetBaseAddress, uint32 overlayBaseAddress);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   656  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   657  /** \brief API to get random value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   658   * \param seed Pointer to seed value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   659   * \return random value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   660   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   661  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   662  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   663  /** \brief API to get random value with in the range
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   664   * \param seed Pointer to seed value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   665   * \param min minimum range value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   666   * \param max maximum range value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   667   * \return random value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   668   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   669  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   670  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   671  /** \brief This function waits till all the cores have set their corresponding bits in the event. This function along with
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   672   * IfxCpu_emitEvent() are used to achieve the synchronisation between the configured cores. By default
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   673   * "IFXCPU_CFG_ALLCORE_DONE" macro defined for all the cores. In case the user wants to check for
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   674   * synchronisation among the required cores, the macro can be redefined with the value accroing to the
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   675   * CORE_ID register.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   676   * The IfxCpu_emitEvent() is to be used in the Main functions of the Cores where the user wants to check for synchronisation.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   677   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   678   * e.g:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   679   * 1. Check for synchronisation between core 0 and core 5
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   680   * # define 0x41U
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   681   * 2. Check for synchronisation between core 0 to core 5
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   682   * # define 0x5FU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   683   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   684   * Note:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   685   * Core id values read from CORE_ID register will be as shown below. The value indicates the position of the bit needs to be set while building the macro.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   686   * Core 0: 0
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   687   * Core 1: 1
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   688   * Core 2: 2
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   689   * Core 3: 3
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   690   * Core 4: 4
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   691   * Core 5: 6
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   692   * \param event Synchronous Event
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   693   * \param timeoutMilliSec timeout in millisec
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   694   * \return Error condition
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   695   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   696   * The functions IfxCpu_waitEvent and IfxCpu_emitEvent are used to achieve synchronisation between all cores (i.e individual cores wait till all cores have reached the synchronisation point). The IfxCpu_waitEvent returns 1 incase a timeout occurs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   697   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   698   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   699   * // Global variable. preferably located in  shared memory.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   700   * IfxCpu_syncEvent event;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   701   * boolean errorVal;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   702   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   703   * // Below code should be repeated in Each core
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   704   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   705   * // Upon reaching Synchonisation point
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   706   * IfxCpu_emitEvent(&event);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   707   * errorVal = IfxCpu_waitEvent(&event, timeoutMilliSec); // timeoutMilliSec is timeout value to wait
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   708   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   709   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   710   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   711   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   712  IFX_EXTERN boolean IfxCpu_waitEvent(IfxCpu_syncEvent *event, uint32 timeoutMilliSec);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   713  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   714  /** \brief This function sets a bit corresponding to the core in the event.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   715   * \param event Synchronous Event
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   716   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   717   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   718   * A coding example can be found in \ref IfxCpu_waitEvent
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   719   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   720   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   721  IFX_EXTERN void IfxCpu_emitEvent(IfxCpu_syncEvent *event);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   722  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   723  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   724  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   725  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   726  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   727  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   728  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   729  /** \brief Sets all CPUs to Idle mode except the Master CPU,index of which is given as the parameter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   730   * \param masterCpu Master CPU Index- All except this will be set to Idle Mode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   731   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   732   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   733  IFX_EXTERN void IfxCpu_setAllIdleExceptMasterCpu(IfxCpu_ResourceCpu masterCpu);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   734  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   735  /** \brief Disables interrupts for all CPUs except the Master CPU,index of which is given as the parameter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   736   * \param masterCpu Master CPU Index- All except this will have their interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   737   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   738   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   739  IFX_EXTERN void IfxCpu_disableInterruptsAllExceptMaster(IfxCpu_ResourceCpu masterCpu);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   740  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   741  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   742  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   743  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   744  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   745  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   746  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   747      Ifx_CPU_ICR reg;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   748      reg.U = __mfcr(CPU_ICR);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   749      return reg.B.IE != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   750  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   751  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   752  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   753  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   754  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   755      boolean enabled;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   756      enabled = IfxCpu_areInterruptsEnabled();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   757      __disable();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   758      __nop();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   759      return enabled;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   760  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   761  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   762  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   763  IFX_INLINE void IfxCpu_enableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   764  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   765      __enable();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   766  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   767  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   768  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   769  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   770  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   771      uint32 cpu_pmaVal;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   772      uint16 checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   773      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   774      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   775  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   776      /*resolve the restrictions*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   777      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   778      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xC);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   779  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   780      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   781      {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   782          segmentNumberMask |= checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   783      }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   784  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   785      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   786  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   787      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   788  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   789      /*The CPU_PMA registers are ENDINIT protected*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   790      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   791      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   792      /*Write to PMA0 register for selecting the cacheability for data cache*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   793      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   794      __mtcr(CPU_PMA0, cpu_pmaVal);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   795      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   796      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   797  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   798  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   799  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   800  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   801  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   802      uint32 cpu_pmaVal;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   803      uint16 checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   804      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   805      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   806  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   807      /*resolve the restrictions*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   808      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   809      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xD);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   810  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   811      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   812      {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   813          segmentNumberMask |= checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   814      }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   815  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   816      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   817  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   818      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   819  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   820      /*The CPU_PMA registers are ENDINIT protected*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   821      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   822      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   823      /*Write to PMA1 register for selecting the cacheability for data cache*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   824      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   825      __mtcr(CPU_PMA1, cpu_pmaVal);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   826      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   827      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   828  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   829  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   830  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   831  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   832  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   833      __disable();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   834      __nop();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   835  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   836  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   837  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   838  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   839  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   840      Ifx_CPU *module;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   841  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   842      if (cpu < IfxCpu_ResourceCpu_none)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   843      {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   844          module = (Ifx_CPU *)IfxCpu_cfg_indexMap[cpu].module;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   845      }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   846      else
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   847      {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   848          module = NULL_PTR;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   849      }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   850  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   851      return module;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   852  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   853  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   854  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   855  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   856  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   857      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   858  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   859  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   860  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   861  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   862  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   863      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   864  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   865  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   866  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   867  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   868  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   869      Ifx_CPU_CORE_ID reg;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   870      reg.U = __mfcr(CPU_CORE_ID);
	mfcr	d15,#65052
.L386:

; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   871      return (IfxCpu_Id)reg.B.CORE_ID;
	fcall	.cocofun_2
.L319:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   236  {
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   237      volatile IfxCpu_Trap trapWatch;
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   238      trapWatch = IfxCpu_Trap_extractTrapInfo(IfxCpu_Trap_Class_systemCall, tin);
	st.d	[a10]0,e0
.L312:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   239      IFX_CFG_CPU_TRAP_SYSCALL_CPU4_HOOK(trapWatch);
	ld.d	e0,[a10]0
.L388:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   240      __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
	rslcx
.L482:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   241      __asm("rfe");
	rfe
.L483:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   242  }
	ret
.L307:
	
__IfxCpu_Trap_systemCall_Cpu4_function_end:
	.size	IfxCpu_Trap_systemCall_Cpu4,__IfxCpu_Trap_systemCall_Cpu4_function_end-IfxCpu_Trap_systemCall_Cpu4
.L102:
	; End of function
	
	.sdecl	'.text.IfxCpu_Trap.IfxCpu_Trap_systemCall_Cpu5',code,cluster('IfxCpu_Trap_systemCall_Cpu5')
	.sect	'.text.IfxCpu_Trap.IfxCpu_Trap_systemCall_Cpu5'
	.align	2
	
	.global	IfxCpu_Trap_systemCall_Cpu5

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   243  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   244  
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   245  #if IFXCPU_NUM_MODULES >= 6
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   246  void IfxCpu_Trap_systemCall_Cpu5(uint32 tin)
; Function IfxCpu_Trap_systemCall_Cpu5
.L29:
IfxCpu_Trap_systemCall_Cpu5:	.type	func
	sub.a	a10,#8
.L325:

; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   348      __asm("mov.aa %0, a11": "=a" (res) : :"a11");      (inlined)
	
	mov.aa a15, a11
.L390:
	
.L330:
	fcall	.cocofun_3
.L332:

; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    42   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    43   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    44   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    45   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    46   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    47   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    48   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    49   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    50   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    51   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    52   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    53   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    54   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    55   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    56   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    57   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    58   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    59  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    60  #ifndef IFXCPU_H
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    61  #define IFXCPU_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    62  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    63  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    64  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    65  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    66  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    67  #include "_Impl/IfxCpu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    68  #include "IfxSrc_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    69  #include "IfxScu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    70  #include "IfxStm_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    71  #include "_Impl/IfxScu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    72  #include "_Utilities/Ifx_Assert.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    73  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    74  #include "Scu/Std/IfxScuCcu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    75  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    76  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    77  /*-----------------------------------Macros-----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    78  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    79  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    80  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    81   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    82   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    83   * the CPU number.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    84   * Example usage:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    85   *  \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    86   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    87   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    88   *  \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    89   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    90  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    91  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    92  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    93   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    94   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    95   * the CPU number.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    96   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    97   *   Example usage:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    98   *   \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    99   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   100   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   101   *   \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   102   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   103  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   104  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   105  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   106  /*------------------------------Type Definitions------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   107  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   108  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   109  /** \brief Lock type Spin lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   110   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   111  typedef unsigned int IfxCpu_spinLock;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   112  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   113  /** \brief Lock type Mutex lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   114   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   115  typedef unsigned int IfxCpu_mutexLock;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   116  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   117  /** \brief Event used for synchronisation.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   118   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   119  typedef unsigned int IfxCpu_syncEvent;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   120  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   121  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   122  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   123  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   124  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   125  /** \addtogroup IfxLld_Cpu_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   126   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   127  /** \brief Enumeration for the Cpu mode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   128   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   129  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   130  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   131      IfxCpu_CoreMode_halt,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   132      IfxCpu_CoreMode_run,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   133      IfxCpu_CoreMode_idle,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   134      IfxCpu_CoreMode_sleep,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   135      IfxCpu_CoreMode_stby,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   136      IfxCpu_CoreMode_unknown
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   137  } IfxCpu_CoreMode;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   138  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   139  /** \brief Performance conunter modes
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   140   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   141  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   142  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   143      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   144      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   145  } IfxCpu_CounterMode;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   147  /** \brief Overlay Address Mask: determines the overlay block size and the bits used for address comparison and translation
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   148   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   149  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   150  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   151      IfxCpu_OverlayAddressMask_32byte  = 0xFFF,  /**< \brief 32 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   152      IfxCpu_OverlayAddressMask_64byte  = 0xFFE,  /**< \brief 64 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   153      IfxCpu_OverlayAddressMask_128byte = 0xFFC,  /**< \brief 128 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   154      IfxCpu_OverlayAddressMask_256byte = 0xFF8,  /**< \brief 256 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   155      IfxCpu_OverlayAddressMask_512byte = 0xFF0,  /**< \brief 512 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   156      IfxCpu_OverlayAddressMask_1KB     = 0xFE0,  /**< \brief 1K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   157      IfxCpu_OverlayAddressMask_2KB     = 0xFC0,  /**< \brief 2K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   158      IfxCpu_OverlayAddressMask_4KB     = 0xF80,  /**< \brief 4K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   159      IfxCpu_OverlayAddressMask_8KB     = 0xF00,  /**< \brief 8K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   160      IfxCpu_OverlayAddressMask_16KB    = 0xE00,  /**< \brief 16K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   161      IfxCpu_OverlayAddressMask_32KB    = 0xC00,  /**< \brief 32K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   162      IfxCpu_OverlayAddressMask_64KB    = 0x800,  /**< \brief 64K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   163      IfxCpu_OverlayAddressMask_128KB   = 0x0     /**< \brief 128K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   164  } IfxCpu_OverlayAddressMask;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   165  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   166  /** \brief Selects overlay memory used for redirection
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   167   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   168  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   169  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   170      IfxCpu_OverlayMemorySelect_core0DsprPspr = 0,  /**< \brief Redirection to Core 0 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   171      IfxCpu_OverlayMemorySelect_core1DsprPspr = 1,  /**< \brief Redirection to Core 1 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   172      IfxCpu_OverlayMemorySelect_core2DsprPspr = 2,  /**< \brief Redirection to Core 2 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   173      IfxCpu_OverlayMemorySelect_core3DsprPspr = 3,  /**< \brief Redirection to Core 3 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   174      IfxCpu_OverlayMemorySelect_core4DsprPspr = 4,  /**< \brief Redirection to Core 4 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   175      IfxCpu_OverlayMemorySelect_core5DsprPspr = 5,  /**< \brief Redirection to Core 5 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   176      IfxCpu_OverlayMemorySelect_lmu           = 8,  /**< \brief Redirection to LMU memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   177      IfxCpu_OverlayMemorySelect_emem          = 9,  /**< \brief Redirection to EMEM memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   178      IfxCpu_OverlayMemorySelect_ebu           = 10  /**< \brief Redirection to EBU memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   179  } IfxCpu_OverlayMemorySelect;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   180  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   181  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   182  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   183      IfxCpu_ResetStatus_notCpuReset   = 0,  /**< \brief No Kernel Reset was executed */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   184      IfxCpu_ResetStatus_cpuResetBySmu = 1,  /**< \brief Kernel reset was requested by hardware since last clear (SMU) */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   185      IfxCpu_ResetStatus_cpuResetBySw  = 2   /**< \brief Kernel reset was requested by software since last clear (by writing KRST0.RST=1 and KRST1.RST=1) */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   186  } IfxCpu_ResetStatus;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   187  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   188  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   189  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   190  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   191  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   192  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   193  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   194  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   195   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   196  /** \brief counter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   197   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   198  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   199  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   200      uint32  counter;        /**< \brief Counter value */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   201      boolean overlfow;       /**< \brief sticky overlfow */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   202  } IfxCpu_Counter;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   203  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   204  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   205  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   206  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   207   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   208  /** \brief Performance counter result
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   209   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   210  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   211  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   212      IfxCpu_Counter instruction;       /**< \brief Instruction counter */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   213      IfxCpu_Counter clock;             /**< \brief CPU clock counter */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   214      IfxCpu_Counter counter1;          /**< \brief Multi counter 1 */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   215      IfxCpu_Counter counter2;          /**< \brief Multi counter 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   216      IfxCpu_Counter counter3;          /**< \brief Multi counter 3 */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   217  } IfxCpu_Perf;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   218  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   219  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   221  /** \addtogroup IfxLld_Cpu_Std_Core
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   222   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   223  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   224  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   225  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   226  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   227  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   228  /** \brief API to get the address for CPU HW module register memory map
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   229   * \param cpu Resource index of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   230   * \return CPU module register address
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   231   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   232  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   233  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   234  /** \brief API to get core id of the CPU of the caller.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   235   * Caution: Core id of the cpu's may not be continguous and shouldn't be used to index cpu.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   236   * Use IfxCpu_getCoreIndex() to get cpu no.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   237   * \return Resource index of the CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   238   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   239  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   240  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   241  /** \brief API to get cpu index of the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   242   * Note: This api can be used whereever cpu no/index is needed.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   243   * \return Resource index of the CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   244   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   245  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   246  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   247  /** \brief API to initialize the context save area of the CPU where this is called.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   248   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   249   * This API can initialize the CSA of the host CPU where this API is called. This API
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   250   * shall not be used to initialize the CSA of another CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   251   * \param csaBegin Pointer to start of context save area
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   252   * \param csaEnd Pointer to end of context save area
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   253   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   254   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   255  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   256  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   257  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   258   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   259   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   260  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   261  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   262  /** \brief Triggers Software Reset
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   263   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   264   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   265  IFX_INLINE void IfxCpu_triggerSwReset(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   266  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   267  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   268  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   269  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   271  /** \brief API to get current mode of CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   272   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   273   * \return Current mode of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   274   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   275  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   276  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   277  /** \brief API to get current mode of CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   278   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   279   * \return Resource index of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   280   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   281  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   282  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   283  /** \brief API to set mode of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   284   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   285   * \param mode CPU mode to be set by this API
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   286   * \return Success status of the activity (setting the core mode).
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   287   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   288   * \retval FALSE: If the activity can't be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   289   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   290  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   291  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   292  /** \brief API to set the program counter for the CPU specified.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   293   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   294   * \param programCounter Program counter value to be set
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   295   * \return success status of the activity (setting program counter value).
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   296   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   297   * \retval FALSE: If the activity can't be performed
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   298   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   299  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   300  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   301  /** \brief API to set the program counter for the CPU specified and start the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   302   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   303   * \param programCounter Program counter value to start the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   304   * \return success status of the activity (setting program counter value).
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   305   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   306   * \retval FALSE: If the activity can't be performed
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   307   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   308  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   309  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   310  /** \brief To request reset of a particular core, given by coreId
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   311   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   312   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   313  IFX_EXTERN void IfxCpu_triggerCpuReset(IfxCpu_ResourceCpu coreIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   314  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   315  /** \brief Retrieve the cause of reset(no reset, hardware(SMU) or software) since last clear by reading KRST0.RSTSTAT and clear it.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   316   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   317  IFX_EXTERN IfxCpu_ResetStatus IfxCpu_getCpuResetStatus(IfxCpu_ResourceCpu coreIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   318  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   319  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   320  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   321  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   322   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   323  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   324  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   325  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   326  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   327  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   328  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   329   * This API provides the status of CPU where this API is called
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   330   * \return Status of global interrupt enable bit.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   331   * \retval TRUE: Global interrupts enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   332   * \retval FALSE: Global interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   333   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   334  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   335  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   336  /** \brief API to disable global interrupt and return the previous status.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   337   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   338   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   339   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   340   * \return Previous status of global interrupt enable bit.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   341   * \retval TRUE: Previously, global interrupts enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   342   * \retval FALSE: Previously, global interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   343   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   344  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   345  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   346  /** \brief API to enable global interrupt.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   347   * This API simply enables the global interrupt.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   348   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   349   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   350  IFX_INLINE void IfxCpu_enableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   351  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   352  /** \brief Disable the Global Interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   353   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   354   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   355  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   356  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   357  /** \brief API to restore global interrupt with that of the passed parameter.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   358   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   359   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   360   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   361   * \param enabled Previous status of the global interrupt enable bit
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   362   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   363   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   364  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   365  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   366  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   367  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   368  /** \addtogroup IfxLld_Cpu_Std_Cache
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   369   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   370  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   371  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   372  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   373  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   374  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   375  /** \brief API to enable/ disable the data cacheability for selected segments
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   376   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   377   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   378   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   379   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   380   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   381   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   382  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   383  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   384  /** \brief API to enable/ disable the instruction cacheability for selected segments
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   385   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   386   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   387   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   388   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   389   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   390   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   391  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   392  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   393  /** \brief API to invalidate the program cache
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   394   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   395   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   396  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   397  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   398  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   399   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   400   * \return Status TRUE/FALSE
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   401   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   402  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   403  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   404  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   405   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   406   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   407   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   408   * \param enable Command to enable or bypass the data cache
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   409   * TRUE: Enable the data cache.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   410   * FALSE: Bypass the data cache.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   411   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   412   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   413  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   414  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   415  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   416   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   417   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   418   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   419   * \param enable Command to enable or bypass the program cache.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   420   * TRUE: Enable the program cache.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   421   * FALSE: Bypass the program cache
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   422   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   423   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   424  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   425  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   426  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   427  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   428  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   429   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   430  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   431  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   432  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   433  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   434  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   435  /** \brief API to read the clock counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   436   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   437   * This API can be used to read clock counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   438   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   439   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   440   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   441  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   442  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   443  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   444   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   445   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   446   * It cannot be used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   447   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   448   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   449   * reading the counter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   450   * \return Status of sticky overflow bit.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   451   * \retval TRUE: Sticky overflow bit is set.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   452   * \retval FALSE: Sticky overflow bit is reset
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   453   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   454  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   455  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   456  /** \brief API to read the instruction counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   457   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   458   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   459   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   460   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   461   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   462  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   463  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   464  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   465   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   466   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   467   * It cannot be used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   468   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   469   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   470   * reading the counter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   471   * \return Status of sticky overflow bit.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   472   * \retval TRUE: Sticky overflow bit is set.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   473   * \retval FALSE: Sticky overflow bit is reset
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   474   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   475  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   476  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   477  /** \brief API to read the performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   478   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   479   * \return counter value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   480   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   481  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint16 address);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   482  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   483  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   484   * This is generic function to get sticky overflow bit of any performance counters
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   485   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   486   * \return Status
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   487   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   488  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint16 address);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   489  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   490  /** \brief Reset and start instruction, clock and multi counters
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   491   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   492   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   493   * \param mode Counter mode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   494   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   495   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   496  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   497  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   498  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   500   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   501   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   502   * \param enable enable Command to enable or disable the performance counter.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   503   * TRUE: Enable the performance counter.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   504   * FALSE: Disable the performance counter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   505   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   506   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   507  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   508  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   509  #if !((defined(__cplusplus)) && (defined(__TASKING__)))
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   510  /** \brief Stop instruction and clock counters, return their values
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   511   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   512   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   513   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   514   * \return Performance counter result
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   515   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   516  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   517  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   518  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   519  /** \brief API to update clock counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   520   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   521   * This API can be used to update clock counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   522   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   523   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   524   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   525   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   526  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   527  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   528  /** \brief API to update Instruction counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   529   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   530   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   531   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   532   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   533   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   534   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   535  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   536  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   537  /** \brief API to update performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   538   * This is generic function to update any of the performance counters
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   539   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   540   * \param count Count
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   541   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   542   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   543  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   544  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   545  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   546  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   547  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   548   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   549  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   550  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   551  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   552  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   553  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   554  /** \brief API to acquire the mutex (binary semaphore).
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   555   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   556   * This API can be used to acquire/get the mutex.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   557   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   558   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   559   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   560   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   561   *    IfxCpu_mutexLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   562   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   563   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   564   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   565   *      IfxCpu_releaseMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   566   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   567   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   568   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   569   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   570  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   571  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   572  /** \brief API to unlock the mutex .
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   573   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   574   * This API can be used to unlock the previously acquired mutex
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   575   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   576   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   577   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   578   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   579   *    IfxCpu_mutexLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   580   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   581   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   582   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   583   *      IfxCpu_releaseMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   584   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   585   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   586   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   587   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   588  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   589  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   590  /** \brief API to unlock the resource .
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   591   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   592   * This API can be used to unlock the previously acquired lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   593   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   594   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   595   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   596  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   597  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   598  /** \brief API to lock the resource in spin mode with the given timeout.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   599   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   600   * This API can be used to spin lock for the lock for the given timeout period.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   601   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   602   * \param timeoutCount loop counter value used for timeout to acquire lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   603   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   604   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   605   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   606   *    IfxCpu_spinLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   607   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   608   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   609   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   610   *      IfxCpu_resetSpinLock(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   611   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   612   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   613   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   614   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   615  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   616  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   617  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   618  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   619  /** \addtogroup IfxLld_Cpu_Std_Utility
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   620   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   621  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   622  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   623  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   624  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   625  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   626  /** \brief This function disables the overlay memory.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   627   * \param cpu Core no
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   628   * \param overlayBlock Overlay Block
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   629   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   630   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   631  IFX_EXTERN void IfxCpu_disableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   632  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   633  /** \brief This function configures and enables the overlay memory.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   634   * Note:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   635   * The data overlay provides the capability to redirect selected data accesses to the Overlay memory. Data accesses made by the TriCore to Program Flash, Online Data Acquisition space, or EBU space can be redirected. Overlay memory may be located in the Local Memory (if present), in the Emulation Memory (Emulation Device only), or in the EBU space,or in the DPSR/PSPR memory.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   636   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   637   * How the overlay Memory works?
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   638   * Any data access to segment 8 or segment A is checked against all the activated overlay blocks. For each activated overlay block, address bits 27..5 are compared with the target base address , and this bit-wise comparison is qualified by the content of address mask. Address bits participate in the comparison if the corresponding mask bits are set to one. The access is redirected, if all the address bits selected by mask equal to the corresponding bits in target address.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   639   * The address for redirection is constructed as follows:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   640   * 1. Address bits 31..22 are set according to the overlay memory selection and the cache-ability of the original address.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   641   * 2. For address bits 21..5:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   642   * - If the corresponding address mask bit is set, the address bit value is taken from overlay base address .
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   643   * - If the corresponding address mask bit is cleared, the address bit value is taken from the original address.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   644   * 3. Address bits 4..0 are always taken directly from the original address.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   645   * If there is no redirection, the original address is used to perform the access.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   646   * Target address ranges for activated overlay blocks should not overlap or an exception may occur.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   647   * \param cpu Core no
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   648   * \param overlayBlock Overlay Block
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   649   * \param overlayMemorySelect Overlay Memory Select
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   650   * \param overlayAddressMask overlay Address Mask
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   651   * \param targetBaseAddress Target Base address (i.e Source address to be re-directed)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   652   * \param overlayBaseAddress Overlay or Re-directed Base address (Bits 21..5 of the base address the overlay memory block in the overlay memory)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   653   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   654   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   655  IFX_EXTERN void IfxCpu_enableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock, IfxCpu_OverlayMemorySelect overlayMemorySelect, IfxCpu_OverlayAddressMask overlayAddressMask, uint32 targetBaseAddress, uint32 overlayBaseAddress);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   656  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   657  /** \brief API to get random value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   658   * \param seed Pointer to seed value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   659   * \return random value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   660   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   661  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   662  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   663  /** \brief API to get random value with in the range
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   664   * \param seed Pointer to seed value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   665   * \param min minimum range value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   666   * \param max maximum range value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   667   * \return random value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   668   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   669  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   670  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   671  /** \brief This function waits till all the cores have set their corresponding bits in the event. This function along with
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   672   * IfxCpu_emitEvent() are used to achieve the synchronisation between the configured cores. By default
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   673   * "IFXCPU_CFG_ALLCORE_DONE" macro defined for all the cores. In case the user wants to check for
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   674   * synchronisation among the required cores, the macro can be redefined with the value accroing to the
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   675   * CORE_ID register.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   676   * The IfxCpu_emitEvent() is to be used in the Main functions of the Cores where the user wants to check for synchronisation.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   677   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   678   * e.g:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   679   * 1. Check for synchronisation between core 0 and core 5
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   680   * # define 0x41U
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   681   * 2. Check for synchronisation between core 0 to core 5
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   682   * # define 0x5FU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   683   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   684   * Note:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   685   * Core id values read from CORE_ID register will be as shown below. The value indicates the position of the bit needs to be set while building the macro.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   686   * Core 0: 0
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   687   * Core 1: 1
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   688   * Core 2: 2
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   689   * Core 3: 3
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   690   * Core 4: 4
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   691   * Core 5: 6
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   692   * \param event Synchronous Event
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   693   * \param timeoutMilliSec timeout in millisec
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   694   * \return Error condition
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   695   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   696   * The functions IfxCpu_waitEvent and IfxCpu_emitEvent are used to achieve synchronisation between all cores (i.e individual cores wait till all cores have reached the synchronisation point). The IfxCpu_waitEvent returns 1 incase a timeout occurs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   697   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   698   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   699   * // Global variable. preferably located in  shared memory.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   700   * IfxCpu_syncEvent event;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   701   * boolean errorVal;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   702   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   703   * // Below code should be repeated in Each core
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   704   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   705   * // Upon reaching Synchonisation point
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   706   * IfxCpu_emitEvent(&event);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   707   * errorVal = IfxCpu_waitEvent(&event, timeoutMilliSec); // timeoutMilliSec is timeout value to wait
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   708   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   709   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   710   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   711   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   712  IFX_EXTERN boolean IfxCpu_waitEvent(IfxCpu_syncEvent *event, uint32 timeoutMilliSec);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   713  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   714  /** \brief This function sets a bit corresponding to the core in the event.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   715   * \param event Synchronous Event
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   716   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   717   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   718   * A coding example can be found in \ref IfxCpu_waitEvent
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   719   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   720   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   721  IFX_EXTERN void IfxCpu_emitEvent(IfxCpu_syncEvent *event);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   722  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   723  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   724  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   725  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   726  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   727  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   728  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   729  /** \brief Sets all CPUs to Idle mode except the Master CPU,index of which is given as the parameter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   730   * \param masterCpu Master CPU Index- All except this will be set to Idle Mode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   731   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   732   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   733  IFX_EXTERN void IfxCpu_setAllIdleExceptMasterCpu(IfxCpu_ResourceCpu masterCpu);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   734  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   735  /** \brief Disables interrupts for all CPUs except the Master CPU,index of which is given as the parameter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   736   * \param masterCpu Master CPU Index- All except this will have their interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   737   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   738   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   739  IFX_EXTERN void IfxCpu_disableInterruptsAllExceptMaster(IfxCpu_ResourceCpu masterCpu);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   740  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   741  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   742  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   743  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   744  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   745  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   746  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   747      Ifx_CPU_ICR reg;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   748      reg.U = __mfcr(CPU_ICR);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   749      return reg.B.IE != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   750  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   751  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   752  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   753  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   754  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   755      boolean enabled;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   756      enabled = IfxCpu_areInterruptsEnabled();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   757      __disable();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   758      __nop();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   759      return enabled;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   760  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   761  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   762  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   763  IFX_INLINE void IfxCpu_enableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   764  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   765      __enable();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   766  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   767  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   768  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   769  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   770  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   771      uint32 cpu_pmaVal;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   772      uint16 checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   773      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   774      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   775  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   776      /*resolve the restrictions*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   777      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   778      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xC);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   779  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   780      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   781      {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   782          segmentNumberMask |= checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   783      }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   784  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   785      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   786  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   787      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   788  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   789      /*The CPU_PMA registers are ENDINIT protected*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   790      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   791      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   792      /*Write to PMA0 register for selecting the cacheability for data cache*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   793      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   794      __mtcr(CPU_PMA0, cpu_pmaVal);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   795      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   796      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   797  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   798  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   799  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   800  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   801  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   802      uint32 cpu_pmaVal;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   803      uint16 checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   804      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   805      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   806  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   807      /*resolve the restrictions*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   808      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   809      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xD);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   810  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   811      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   812      {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   813          segmentNumberMask |= checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   814      }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   815  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   816      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   817  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   818      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   819  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   820      /*The CPU_PMA registers are ENDINIT protected*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   821      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   822      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   823      /*Write to PMA1 register for selecting the cacheability for data cache*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   824      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   825      __mtcr(CPU_PMA1, cpu_pmaVal);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   826      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   827      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   828  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   829  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   830  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   831  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   832  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   833      __disable();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   834      __nop();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   835  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   836  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   837  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   838  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   839  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   840      Ifx_CPU *module;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   841  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   842      if (cpu < IfxCpu_ResourceCpu_none)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   843      {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   844          module = (Ifx_CPU *)IfxCpu_cfg_indexMap[cpu].module;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   845      }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   846      else
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   847      {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   848          module = NULL_PTR;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   849      }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   850  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   851      return module;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   852  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   853  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   854  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   855  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   856  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   857      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   858  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   859  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   860  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   861  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   862  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   863      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   864  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   865  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   866  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   867  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   868  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   869      Ifx_CPU_CORE_ID reg;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   870      reg.U = __mfcr(CPU_CORE_ID);
	mfcr	d15,#65052
.L389:

; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   871      return (IfxCpu_Id)reg.B.CORE_ID;
	fcall	.cocofun_2
.L333:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   247  {
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   248      volatile IfxCpu_Trap trapWatch;
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   249      trapWatch = IfxCpu_Trap_extractTrapInfo(IfxCpu_Trap_Class_systemCall, tin);
	st.d	[a10]0,e0
.L326:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   250      IFX_CFG_CPU_TRAP_SYSCALL_CPU5_HOOK(trapWatch);
	ld.d	e0,[a10]0
.L391:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   251      __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
	rslcx
.L488:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   252      __asm("rfe");
	rfe
.L489:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   253  }
	ret
.L321:
	
__IfxCpu_Trap_systemCall_Cpu5_function_end:
	.size	IfxCpu_Trap_systemCall_Cpu5,__IfxCpu_Trap_systemCall_Cpu5_function_end-IfxCpu_Trap_systemCall_Cpu5
.L107:
	; End of function
	
	.sdecl	'.text.IfxCpu_Trap.IfxCpu_Trap_nonMaskableInterrupt',code,cluster('IfxCpu_Trap_nonMaskableInterrupt')
	.sect	'.text.IfxCpu_Trap.IfxCpu_Trap_nonMaskableInterrupt'
	.align	2
	
	.global	IfxCpu_Trap_nonMaskableInterrupt

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   254  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   255  
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   256  void IfxCpu_Trap_nonMaskableInterrupt(uint32 tin)
; Function IfxCpu_Trap_nonMaskableInterrupt
.L31:
IfxCpu_Trap_nonMaskableInterrupt:	.type	func
	sub.a	a10,#8
.L339:

; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   348      __asm("mov.aa %0, a11": "=a" (res) : :"a11");      (inlined)
	
	mov.aa a15, a11
.L393:
	
.L494:
	mov.d	d0,a15
.L344:
	insert	d1,d1,#7,#8,#8
.L495:
	insert	d1,d1,d4,#0,#8
.L346:

; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    42   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    43   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    44   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    45   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    46   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    47   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    48   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    49   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    50   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    51   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    52   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    53   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    54   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    55   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    56   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    57   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    58   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    59  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    60  #ifndef IFXCPU_H
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    61  #define IFXCPU_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    62  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    63  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    64  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    65  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    66  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    67  #include "_Impl/IfxCpu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    68  #include "IfxSrc_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    69  #include "IfxScu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    70  #include "IfxStm_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    71  #include "_Impl/IfxScu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    72  #include "_Utilities/Ifx_Assert.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    73  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    74  #include "Scu/Std/IfxScuCcu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    75  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    76  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    77  /*-----------------------------------Macros-----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    78  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    79  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    80  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    81   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    82   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    83   * the CPU number.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    84   * Example usage:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    85   *  \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    86   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    87   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    88   *  \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    89   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    90  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    91  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    92  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    93   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    94   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    95   * the CPU number.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    96   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    97   *   Example usage:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    98   *   \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    99   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   100   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   101   *   \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   102   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   103  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   104  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   105  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   106  /*------------------------------Type Definitions------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   107  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   108  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   109  /** \brief Lock type Spin lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   110   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   111  typedef unsigned int IfxCpu_spinLock;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   112  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   113  /** \brief Lock type Mutex lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   114   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   115  typedef unsigned int IfxCpu_mutexLock;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   116  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   117  /** \brief Event used for synchronisation.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   118   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   119  typedef unsigned int IfxCpu_syncEvent;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   120  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   121  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   122  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   123  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   124  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   125  /** \addtogroup IfxLld_Cpu_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   126   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   127  /** \brief Enumeration for the Cpu mode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   128   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   129  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   130  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   131      IfxCpu_CoreMode_halt,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   132      IfxCpu_CoreMode_run,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   133      IfxCpu_CoreMode_idle,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   134      IfxCpu_CoreMode_sleep,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   135      IfxCpu_CoreMode_stby,
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   136      IfxCpu_CoreMode_unknown
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   137  } IfxCpu_CoreMode;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   138  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   139  /** \brief Performance conunter modes
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   140   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   141  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   142  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   143      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   144      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   145  } IfxCpu_CounterMode;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   147  /** \brief Overlay Address Mask: determines the overlay block size and the bits used for address comparison and translation
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   148   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   149  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   150  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   151      IfxCpu_OverlayAddressMask_32byte  = 0xFFF,  /**< \brief 32 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   152      IfxCpu_OverlayAddressMask_64byte  = 0xFFE,  /**< \brief 64 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   153      IfxCpu_OverlayAddressMask_128byte = 0xFFC,  /**< \brief 128 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   154      IfxCpu_OverlayAddressMask_256byte = 0xFF8,  /**< \brief 256 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   155      IfxCpu_OverlayAddressMask_512byte = 0xFF0,  /**< \brief 512 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   156      IfxCpu_OverlayAddressMask_1KB     = 0xFE0,  /**< \brief 1K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   157      IfxCpu_OverlayAddressMask_2KB     = 0xFC0,  /**< \brief 2K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   158      IfxCpu_OverlayAddressMask_4KB     = 0xF80,  /**< \brief 4K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   159      IfxCpu_OverlayAddressMask_8KB     = 0xF00,  /**< \brief 8K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   160      IfxCpu_OverlayAddressMask_16KB    = 0xE00,  /**< \brief 16K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   161      IfxCpu_OverlayAddressMask_32KB    = 0xC00,  /**< \brief 32K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   162      IfxCpu_OverlayAddressMask_64KB    = 0x800,  /**< \brief 64K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   163      IfxCpu_OverlayAddressMask_128KB   = 0x0     /**< \brief 128K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   164  } IfxCpu_OverlayAddressMask;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   165  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   166  /** \brief Selects overlay memory used for redirection
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   167   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   168  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   169  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   170      IfxCpu_OverlayMemorySelect_core0DsprPspr = 0,  /**< \brief Redirection to Core 0 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   171      IfxCpu_OverlayMemorySelect_core1DsprPspr = 1,  /**< \brief Redirection to Core 1 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   172      IfxCpu_OverlayMemorySelect_core2DsprPspr = 2,  /**< \brief Redirection to Core 2 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   173      IfxCpu_OverlayMemorySelect_core3DsprPspr = 3,  /**< \brief Redirection to Core 3 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   174      IfxCpu_OverlayMemorySelect_core4DsprPspr = 4,  /**< \brief Redirection to Core 4 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   175      IfxCpu_OverlayMemorySelect_core5DsprPspr = 5,  /**< \brief Redirection to Core 5 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   176      IfxCpu_OverlayMemorySelect_lmu           = 8,  /**< \brief Redirection to LMU memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   177      IfxCpu_OverlayMemorySelect_emem          = 9,  /**< \brief Redirection to EMEM memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   178      IfxCpu_OverlayMemorySelect_ebu           = 10  /**< \brief Redirection to EBU memory */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   179  } IfxCpu_OverlayMemorySelect;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   180  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   181  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   182  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   183      IfxCpu_ResetStatus_notCpuReset   = 0,  /**< \brief No Kernel Reset was executed */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   184      IfxCpu_ResetStatus_cpuResetBySmu = 1,  /**< \brief Kernel reset was requested by hardware since last clear (SMU) */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   185      IfxCpu_ResetStatus_cpuResetBySw  = 2   /**< \brief Kernel reset was requested by software since last clear (by writing KRST0.RST=1 and KRST1.RST=1) */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   186  } IfxCpu_ResetStatus;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   187  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   188  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   189  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   190  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   191  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   192  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   193  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   194  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   195   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   196  /** \brief counter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   197   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   198  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   199  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   200      uint32  counter;        /**< \brief Counter value */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   201      boolean overlfow;       /**< \brief sticky overlfow */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   202  } IfxCpu_Counter;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   203  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   204  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   205  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   206  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   207   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   208  /** \brief Performance counter result
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   209   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   210  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   211  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   212      IfxCpu_Counter instruction;       /**< \brief Instruction counter */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   213      IfxCpu_Counter clock;             /**< \brief CPU clock counter */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   214      IfxCpu_Counter counter1;          /**< \brief Multi counter 1 */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   215      IfxCpu_Counter counter2;          /**< \brief Multi counter 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   216      IfxCpu_Counter counter3;          /**< \brief Multi counter 3 */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   217  } IfxCpu_Perf;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   218  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   219  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   221  /** \addtogroup IfxLld_Cpu_Std_Core
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   222   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   223  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   224  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   225  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   226  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   227  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   228  /** \brief API to get the address for CPU HW module register memory map
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   229   * \param cpu Resource index of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   230   * \return CPU module register address
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   231   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   232  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   233  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   234  /** \brief API to get core id of the CPU of the caller.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   235   * Caution: Core id of the cpu's may not be continguous and shouldn't be used to index cpu.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   236   * Use IfxCpu_getCoreIndex() to get cpu no.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   237   * \return Resource index of the CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   238   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   239  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   240  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   241  /** \brief API to get cpu index of the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   242   * Note: This api can be used whereever cpu no/index is needed.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   243   * \return Resource index of the CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   244   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   245  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   246  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   247  /** \brief API to initialize the context save area of the CPU where this is called.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   248   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   249   * This API can initialize the CSA of the host CPU where this API is called. This API
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   250   * shall not be used to initialize the CSA of another CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   251   * \param csaBegin Pointer to start of context save area
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   252   * \param csaEnd Pointer to end of context save area
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   253   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   254   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   255  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   256  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   257  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   258   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   259   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   260  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   261  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   262  /** \brief Triggers Software Reset
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   263   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   264   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   265  IFX_INLINE void IfxCpu_triggerSwReset(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   266  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   267  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   268  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   269  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   271  /** \brief API to get current mode of CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   272   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   273   * \return Current mode of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   274   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   275  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   276  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   277  /** \brief API to get current mode of CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   278   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   279   * \return Resource index of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   280   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   281  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   282  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   283  /** \brief API to set mode of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   284   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   285   * \param mode CPU mode to be set by this API
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   286   * \return Success status of the activity (setting the core mode).
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   287   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   288   * \retval FALSE: If the activity can't be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   289   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   290  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   291  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   292  /** \brief API to set the program counter for the CPU specified.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   293   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   294   * \param programCounter Program counter value to be set
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   295   * \return success status of the activity (setting program counter value).
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   296   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   297   * \retval FALSE: If the activity can't be performed
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   298   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   299  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   300  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   301  /** \brief API to set the program counter for the CPU specified and start the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   302   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   303   * \param programCounter Program counter value to start the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   304   * \return success status of the activity (setting program counter value).
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   305   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   306   * \retval FALSE: If the activity can't be performed
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   307   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   308  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   309  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   310  /** \brief To request reset of a particular core, given by coreId
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   311   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   312   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   313  IFX_EXTERN void IfxCpu_triggerCpuReset(IfxCpu_ResourceCpu coreIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   314  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   315  /** \brief Retrieve the cause of reset(no reset, hardware(SMU) or software) since last clear by reading KRST0.RSTSTAT and clear it.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   316   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   317  IFX_EXTERN IfxCpu_ResetStatus IfxCpu_getCpuResetStatus(IfxCpu_ResourceCpu coreIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   318  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   319  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   320  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   321  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   322   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   323  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   324  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   325  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   326  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   327  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   328  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   329   * This API provides the status of CPU where this API is called
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   330   * \return Status of global interrupt enable bit.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   331   * \retval TRUE: Global interrupts enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   332   * \retval FALSE: Global interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   333   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   334  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   335  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   336  /** \brief API to disable global interrupt and return the previous status.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   337   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   338   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   339   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   340   * \return Previous status of global interrupt enable bit.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   341   * \retval TRUE: Previously, global interrupts enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   342   * \retval FALSE: Previously, global interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   343   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   344  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   345  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   346  /** \brief API to enable global interrupt.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   347   * This API simply enables the global interrupt.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   348   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   349   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   350  IFX_INLINE void IfxCpu_enableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   351  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   352  /** \brief Disable the Global Interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   353   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   354   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   355  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   356  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   357  /** \brief API to restore global interrupt with that of the passed parameter.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   358   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   359   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   360   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   361   * \param enabled Previous status of the global interrupt enable bit
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   362   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   363   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   364  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   365  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   366  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   367  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   368  /** \addtogroup IfxLld_Cpu_Std_Cache
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   369   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   370  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   371  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   372  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   373  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   374  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   375  /** \brief API to enable/ disable the data cacheability for selected segments
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   376   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   377   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   378   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   379   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   380   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   381   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   382  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   383  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   384  /** \brief API to enable/ disable the instruction cacheability for selected segments
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   385   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   386   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   387   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   388   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   389   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   390   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   391  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   392  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   393  /** \brief API to invalidate the program cache
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   394   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   395   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   396  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   397  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   398  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   399   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   400   * \return Status TRUE/FALSE
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   401   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   402  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   403  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   404  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   405   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   406   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   407   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   408   * \param enable Command to enable or bypass the data cache
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   409   * TRUE: Enable the data cache.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   410   * FALSE: Bypass the data cache.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   411   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   412   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   413  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   414  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   415  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   416   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   417   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   418   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   419   * \param enable Command to enable or bypass the program cache.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   420   * TRUE: Enable the program cache.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   421   * FALSE: Bypass the program cache
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   422   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   423   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   424  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   425  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   426  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   427  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   428  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   429   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   430  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   431  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   432  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   433  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   434  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   435  /** \brief API to read the clock counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   436   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   437   * This API can be used to read clock counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   438   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   439   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   440   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   441  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   442  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   443  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   444   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   445   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   446   * It cannot be used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   447   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   448   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   449   * reading the counter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   450   * \return Status of sticky overflow bit.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   451   * \retval TRUE: Sticky overflow bit is set.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   452   * \retval FALSE: Sticky overflow bit is reset
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   453   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   454  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   455  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   456  /** \brief API to read the instruction counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   457   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   458   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   459   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   460   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   461   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   462  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   463  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   464  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   465   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   466   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   467   * It cannot be used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   468   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   469   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   470   * reading the counter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   471   * \return Status of sticky overflow bit.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   472   * \retval TRUE: Sticky overflow bit is set.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   473   * \retval FALSE: Sticky overflow bit is reset
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   474   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   475  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   476  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   477  /** \brief API to read the performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   478   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   479   * \return counter value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   480   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   481  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint16 address);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   482  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   483  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   484   * This is generic function to get sticky overflow bit of any performance counters
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   485   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   486   * \return Status
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   487   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   488  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint16 address);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   489  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   490  /** \brief Reset and start instruction, clock and multi counters
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   491   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   492   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   493   * \param mode Counter mode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   494   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   495   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   496  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   497  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   498  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   500   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   501   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   502   * \param enable enable Command to enable or disable the performance counter.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   503   * TRUE: Enable the performance counter.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   504   * FALSE: Disable the performance counter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   505   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   506   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   507  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   508  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   509  #if !((defined(__cplusplus)) && (defined(__TASKING__)))
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   510  /** \brief Stop instruction and clock counters, return their values
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   511   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   512   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   513   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   514   * \return Performance counter result
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   515   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   516  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   517  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   518  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   519  /** \brief API to update clock counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   520   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   521   * This API can be used to update clock counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   522   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   523   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   524   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   525   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   526  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   527  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   528  /** \brief API to update Instruction counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   529   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   530   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   531   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   532   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   533   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   534   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   535  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   536  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   537  /** \brief API to update performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   538   * This is generic function to update any of the performance counters
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   539   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   540   * \param count Count
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   541   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   542   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   543  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   544  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   545  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   546  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   547  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   548   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   549  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   550  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   551  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   552  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   553  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   554  /** \brief API to acquire the mutex (binary semaphore).
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   555   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   556   * This API can be used to acquire/get the mutex.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   557   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   558   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   559   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   560   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   561   *    IfxCpu_mutexLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   562   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   563   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   564   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   565   *      IfxCpu_releaseMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   566   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   567   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   568   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   569   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   570  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   571  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   572  /** \brief API to unlock the mutex .
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   573   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   574   * This API can be used to unlock the previously acquired mutex
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   575   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   576   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   577   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   578   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   579   *    IfxCpu_mutexLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   580   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   581   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   582   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   583   *      IfxCpu_releaseMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   584   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   585   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   586   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   587   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   588  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   589  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   590  /** \brief API to unlock the resource .
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   591   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   592   * This API can be used to unlock the previously acquired lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   593   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   594   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   595   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   596  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   597  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   598  /** \brief API to lock the resource in spin mode with the given timeout.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   599   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   600   * This API can be used to spin lock for the lock for the given timeout period.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   601   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   602   * \param timeoutCount loop counter value used for timeout to acquire lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   603   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   604   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   605   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   606   *    IfxCpu_spinLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   607   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   608   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   609   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   610   *      IfxCpu_resetSpinLock(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   611   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   612   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   613   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   614   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   615  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   616  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   617  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   618  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   619  /** \addtogroup IfxLld_Cpu_Std_Utility
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   620   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   621  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   622  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   623  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   624  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   625  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   626  /** \brief This function disables the overlay memory.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   627   * \param cpu Core no
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   628   * \param overlayBlock Overlay Block
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   629   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   630   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   631  IFX_EXTERN void IfxCpu_disableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   632  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   633  /** \brief This function configures and enables the overlay memory.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   634   * Note:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   635   * The data overlay provides the capability to redirect selected data accesses to the Overlay memory. Data accesses made by the TriCore to Program Flash, Online Data Acquisition space, or EBU space can be redirected. Overlay memory may be located in the Local Memory (if present), in the Emulation Memory (Emulation Device only), or in the EBU space,or in the DPSR/PSPR memory.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   636   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   637   * How the overlay Memory works?
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   638   * Any data access to segment 8 or segment A is checked against all the activated overlay blocks. For each activated overlay block, address bits 27..5 are compared with the target base address , and this bit-wise comparison is qualified by the content of address mask. Address bits participate in the comparison if the corresponding mask bits are set to one. The access is redirected, if all the address bits selected by mask equal to the corresponding bits in target address.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   639   * The address for redirection is constructed as follows:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   640   * 1. Address bits 31..22 are set according to the overlay memory selection and the cache-ability of the original address.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   641   * 2. For address bits 21..5:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   642   * - If the corresponding address mask bit is set, the address bit value is taken from overlay base address .
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   643   * - If the corresponding address mask bit is cleared, the address bit value is taken from the original address.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   644   * 3. Address bits 4..0 are always taken directly from the original address.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   645   * If there is no redirection, the original address is used to perform the access.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   646   * Target address ranges for activated overlay blocks should not overlap or an exception may occur.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   647   * \param cpu Core no
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   648   * \param overlayBlock Overlay Block
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   649   * \param overlayMemorySelect Overlay Memory Select
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   650   * \param overlayAddressMask overlay Address Mask
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   651   * \param targetBaseAddress Target Base address (i.e Source address to be re-directed)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   652   * \param overlayBaseAddress Overlay or Re-directed Base address (Bits 21..5 of the base address the overlay memory block in the overlay memory)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   653   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   654   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   655  IFX_EXTERN void IfxCpu_enableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock, IfxCpu_OverlayMemorySelect overlayMemorySelect, IfxCpu_OverlayAddressMask overlayAddressMask, uint32 targetBaseAddress, uint32 overlayBaseAddress);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   656  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   657  /** \brief API to get random value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   658   * \param seed Pointer to seed value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   659   * \return random value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   660   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   661  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   662  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   663  /** \brief API to get random value with in the range
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   664   * \param seed Pointer to seed value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   665   * \param min minimum range value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   666   * \param max maximum range value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   667   * \return random value
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   668   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   669  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   670  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   671  /** \brief This function waits till all the cores have set their corresponding bits in the event. This function along with
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   672   * IfxCpu_emitEvent() are used to achieve the synchronisation between the configured cores. By default
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   673   * "IFXCPU_CFG_ALLCORE_DONE" macro defined for all the cores. In case the user wants to check for
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   674   * synchronisation among the required cores, the macro can be redefined with the value accroing to the
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   675   * CORE_ID register.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   676   * The IfxCpu_emitEvent() is to be used in the Main functions of the Cores where the user wants to check for synchronisation.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   677   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   678   * e.g:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   679   * 1. Check for synchronisation between core 0 and core 5
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   680   * # define 0x41U
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   681   * 2. Check for synchronisation between core 0 to core 5
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   682   * # define 0x5FU
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   683   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   684   * Note:
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   685   * Core id values read from CORE_ID register will be as shown below. The value indicates the position of the bit needs to be set while building the macro.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   686   * Core 0: 0
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   687   * Core 1: 1
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   688   * Core 2: 2
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   689   * Core 3: 3
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   690   * Core 4: 4
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   691   * Core 5: 6
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   692   * \param event Synchronous Event
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   693   * \param timeoutMilliSec timeout in millisec
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   694   * \return Error condition
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   695   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   696   * The functions IfxCpu_waitEvent and IfxCpu_emitEvent are used to achieve synchronisation between all cores (i.e individual cores wait till all cores have reached the synchronisation point). The IfxCpu_waitEvent returns 1 incase a timeout occurs.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   697   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   698   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   699   * // Global variable. preferably located in  shared memory.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   700   * IfxCpu_syncEvent event;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   701   * boolean errorVal;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   702   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   703   * // Below code should be repeated in Each core
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   704   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   705   * // Upon reaching Synchonisation point
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   706   * IfxCpu_emitEvent(&event);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   707   * errorVal = IfxCpu_waitEvent(&event, timeoutMilliSec); // timeoutMilliSec is timeout value to wait
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   708   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   709   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   710   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   711   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   712  IFX_EXTERN boolean IfxCpu_waitEvent(IfxCpu_syncEvent *event, uint32 timeoutMilliSec);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   713  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   714  /** \brief This function sets a bit corresponding to the core in the event.
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   715   * \param event Synchronous Event
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   716   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   717   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   718   * A coding example can be found in \ref IfxCpu_waitEvent
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   719   *
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   720   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   721  IFX_EXTERN void IfxCpu_emitEvent(IfxCpu_syncEvent *event);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   722  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   723  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   724  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   725  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   726  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   727  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   728  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   729  /** \brief Sets all CPUs to Idle mode except the Master CPU,index of which is given as the parameter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   730   * \param masterCpu Master CPU Index- All except this will be set to Idle Mode
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   731   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   732   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   733  IFX_EXTERN void IfxCpu_setAllIdleExceptMasterCpu(IfxCpu_ResourceCpu masterCpu);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   734  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   735  /** \brief Disables interrupts for all CPUs except the Master CPU,index of which is given as the parameter
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   736   * \param masterCpu Master CPU Index- All except this will have their interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   737   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   738   */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   739  IFX_EXTERN void IfxCpu_disableInterruptsAllExceptMaster(IfxCpu_ResourceCpu masterCpu);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   740  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   741  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   742  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   743  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   744  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   745  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   746  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   747      Ifx_CPU_ICR reg;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   748      reg.U = __mfcr(CPU_ICR);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   749      return reg.B.IE != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   750  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   751  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   752  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   753  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   754  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   755      boolean enabled;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   756      enabled = IfxCpu_areInterruptsEnabled();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   757      __disable();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   758      __nop();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   759      return enabled;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   760  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   761  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   762  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   763  IFX_INLINE void IfxCpu_enableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   764  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   765      __enable();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   766  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   767  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   768  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   769  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   770  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   771      uint32 cpu_pmaVal;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   772      uint16 checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   773      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   774      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   775  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   776      /*resolve the restrictions*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   777      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   778      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xC);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   779  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   780      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   781      {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   782          segmentNumberMask |= checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   783      }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   784  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   785      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   786  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   787      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   788  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   789      /*The CPU_PMA registers are ENDINIT protected*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   790      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   791      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   792      /*Write to PMA0 register for selecting the cacheability for data cache*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   793      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   794      __mtcr(CPU_PMA0, cpu_pmaVal);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   795      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   796      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   797  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   798  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   799  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   800  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   801  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   802      uint32 cpu_pmaVal;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   803      uint16 checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   804      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   805      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   806  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   807      /*resolve the restrictions*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   808      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   809      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xD);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   810  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   811      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   812      {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   813          segmentNumberMask |= checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   814      }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   815  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   816      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   817  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   818      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   819  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   820      /*The CPU_PMA registers are ENDINIT protected*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   821      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   822      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   823      /*Write to PMA1 register for selecting the cacheability for data cache*/
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   824      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   825      __mtcr(CPU_PMA1, cpu_pmaVal);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   826      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   827      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   828  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   829  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   830  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   831  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   832  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   833      __disable();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   834      __nop();
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   835  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   836  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   837  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   838  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   839  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   840      Ifx_CPU *module;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   841  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   842      if (cpu < IfxCpu_ResourceCpu_none)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   843      {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   844          module = (Ifx_CPU *)IfxCpu_cfg_indexMap[cpu].module;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   845      }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   846      else
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   847      {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   848          module = NULL_PTR;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   849      }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   850  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   851      return module;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   852  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   853  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   854  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   855  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   856  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   857      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   858  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   859  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   860  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   861  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   862  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   863      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   864  }
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   865  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   866  
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   867  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void)
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   868  {
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   869      Ifx_CPU_CORE_ID reg;
; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   870      reg.U = __mfcr(CPU_CORE_ID);
	mfcr	d15,#65052
.L392:

; D:\WorkSpace\Tasking\Tasking_TC397_UART_Logging\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   871      return (IfxCpu_Id)reg.B.CORE_ID;
	fcall	.cocofun_2
.L347:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   257  {
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   258      volatile IfxCpu_Trap trapWatch;
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   259      trapWatch = IfxCpu_Trap_extractTrapInfo(IfxCpu_Trap_Class_nonMaskableInterrupt, tin);
	st.d	[a10]0,e0
.L340:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   260      IFX_CFG_CPU_TRAP_NMI_HOOK(trapWatch);    
	ld.d	e0,[a10]0
.L394:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   261      __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
	rslcx
.L496:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   262      __asm("rfe");
	rfe
.L497:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   263  }
	ret
.L335:
	
__IfxCpu_Trap_nonMaskableInterrupt_function_end:
	.size	IfxCpu_Trap_nonMaskableInterrupt,__IfxCpu_Trap_nonMaskableInterrupt_function_end-IfxCpu_Trap_nonMaskableInterrupt
.L112:
	; End of function
	
	.sdecl	'.text.traptab_cpu0',code,cluster('IfxCpu_Trap_vectorTable0'),protect
	.sect	'.text.traptab_cpu0'
	.align	2
	
	.global	IfxCpu_Trap_vectorTable0

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   264  
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   265  
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   266  #if defined(__HIGHTEC__)
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   267  #pragma section
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   268  #pragma section ".traptab_cpu0" awx
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   269  #pragma GCC optimize ("O2")
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   270  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   271  #if defined(__DCC__)
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   272  #pragma section
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   273  #pragma section CODE ".traptab_cpu0" X
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   274  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   275  #if defined(__TASKING__)
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   276  #pragma protect on
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   277  #pragma section code "traptab_cpu0"
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   278  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   279  #if defined(__ghs__)
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   280  #pragma ghs section
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   281  #pragma ghs section text=".traptab_cpu0"
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   282  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   283  void IfxCpu_Trap_vectorTable0(void)
; Function IfxCpu_Trap_vectorTable0
.L33:
IfxCpu_Trap_vectorTable0:	.type	func

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   284  {
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   285      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_memoryManagementError);
	 .align 32
	movh.a	a15,#@his(IfxCpu_Trap_memoryManagementError)
	lea	a15,[a15]@los(IfxCpu_Trap_memoryManagementError)
	
	svlcx
	mov	d4,d15
	ji	a15

	
.L502:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   286      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_internalProtectionError);
	 .align 32
	movh.a	a15,#@his(IfxCpu_Trap_internalProtectionError)
	lea	a15,[a15]@los(IfxCpu_Trap_internalProtectionError)
	
	svlcx
	mov	d4,d15
	ji	a15

	
.L503:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   287      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_instructionError);
	 .align 32
	movh.a	a15,#@his(IfxCpu_Trap_instructionError)
	lea	a15,[a15]@los(IfxCpu_Trap_instructionError)
	
	svlcx
	mov	d4,d15
	ji	a15

	
.L504:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   288      IfxCpu_Tsr_CallCSATSR(IfxCpu_Trap_contextManagementError);
	 .align 32
	movh.a	a15,#@his(IfxCpu_Trap_contextManagementError)
	lea	a15,[a15]@los(IfxCpu_Trap_contextManagementError)
	
	mov	d4,d15
	ji	a15

	
.L505:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   289      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_busError);
	 .align 32
	movh.a	a15,#@his(IfxCpu_Trap_busError)
	lea	a15,[a15]@los(IfxCpu_Trap_busError)
	
	svlcx
	mov	d4,d15
	ji	a15

	
.L506:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   290      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_assertion);
	 .align 32
	movh.a	a15,#@his(IfxCpu_Trap_assertion)
	lea	a15,[a15]@los(IfxCpu_Trap_assertion)
	
	svlcx
	mov	d4,d15
	ji	a15

	
.L507:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   291      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_systemCall_Cpu0);
	 .align 32
	movh.a	a15,#@his(IfxCpu_Trap_systemCall_Cpu0)
	lea	a15,[a15]@los(IfxCpu_Trap_systemCall_Cpu0)
	
	svlcx
	mov	d4,d15
	ji	a15

	
.L508:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   292      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_nonMaskableInterrupt);
	 .align 32
	movh.a	a15,#@his(IfxCpu_Trap_nonMaskableInterrupt)
	lea	a15,[a15]@los(IfxCpu_Trap_nonMaskableInterrupt)
	
	svlcx
	mov	d4,d15
	ji	a15

	
.L509:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   293  }
	ret
.L349:
	
__IfxCpu_Trap_vectorTable0_function_end:
	.size	IfxCpu_Trap_vectorTable0,__IfxCpu_Trap_vectorTable0_function_end-IfxCpu_Trap_vectorTable0
.L117:
	; End of function
	
	.sdecl	'.text.traptab_cpu1',code,cluster('IfxCpu_Trap_vectorTable1'),protect
	.sect	'.text.traptab_cpu1'
	.align	2
	
	.global	IfxCpu_Trap_vectorTable1

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   294  
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   295  
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   296  #if IFXCPU_NUM_MODULES >= 2
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   297  #if defined(__HIGHTEC__)
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   298  #pragma section
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   299  #pragma section ".traptab_cpu1" awx
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   300  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   301  #if defined(__DCC__)
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   302  #pragma section
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   303  #pragma section CODE ".traptab_cpu1" X
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   304  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   305  #if defined(__TASKING__)
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   306  #pragma section code "traptab_cpu1"
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   307  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   308  #if defined(__ghs__)
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   309  #pragma ghs section
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   310  #pragma ghs section text=".traptab_cpu1"
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   311  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   312  void IfxCpu_Trap_vectorTable1(void)
; Function IfxCpu_Trap_vectorTable1
.L35:
IfxCpu_Trap_vectorTable1:	.type	func

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   313  {
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   314      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_memoryManagementError);
	 .align 32
	movh.a	a15,#@his(IfxCpu_Trap_memoryManagementError)
	lea	a15,[a15]@los(IfxCpu_Trap_memoryManagementError)
	
	svlcx
	mov	d4,d15
	ji	a15

	
.L514:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   315      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_internalProtectionError);
	 .align 32
	movh.a	a15,#@his(IfxCpu_Trap_internalProtectionError)
	lea	a15,[a15]@los(IfxCpu_Trap_internalProtectionError)
	
	svlcx
	mov	d4,d15
	ji	a15

	
.L515:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   316      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_instructionError);
	 .align 32
	movh.a	a15,#@his(IfxCpu_Trap_instructionError)
	lea	a15,[a15]@los(IfxCpu_Trap_instructionError)
	
	svlcx
	mov	d4,d15
	ji	a15

	
.L516:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   317      IfxCpu_Tsr_CallCSATSR(IfxCpu_Trap_contextManagementError);
	 .align 32
	movh.a	a15,#@his(IfxCpu_Trap_contextManagementError)
	lea	a15,[a15]@los(IfxCpu_Trap_contextManagementError)
	
	mov	d4,d15
	ji	a15

	
.L517:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   318      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_busError);
	 .align 32
	movh.a	a15,#@his(IfxCpu_Trap_busError)
	lea	a15,[a15]@los(IfxCpu_Trap_busError)
	
	svlcx
	mov	d4,d15
	ji	a15

	
.L518:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   319      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_assertion);
	 .align 32
	movh.a	a15,#@his(IfxCpu_Trap_assertion)
	lea	a15,[a15]@los(IfxCpu_Trap_assertion)
	
	svlcx
	mov	d4,d15
	ji	a15

	
.L519:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   320      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_systemCall_Cpu1);
	 .align 32
	movh.a	a15,#@his(IfxCpu_Trap_systemCall_Cpu1)
	lea	a15,[a15]@los(IfxCpu_Trap_systemCall_Cpu1)
	
	svlcx
	mov	d4,d15
	ji	a15

	
.L520:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   321      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_nonMaskableInterrupt);
	 .align 32
	movh.a	a15,#@his(IfxCpu_Trap_nonMaskableInterrupt)
	lea	a15,[a15]@los(IfxCpu_Trap_nonMaskableInterrupt)
	
	svlcx
	mov	d4,d15
	ji	a15

	
.L521:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   322  }
	ret
.L350:
	
__IfxCpu_Trap_vectorTable1_function_end:
	.size	IfxCpu_Trap_vectorTable1,__IfxCpu_Trap_vectorTable1_function_end-IfxCpu_Trap_vectorTable1
.L122:
	; End of function
	
	.sdecl	'.text.traptab_cpu2',code,cluster('IfxCpu_Trap_vectorTable2'),protect
	.sect	'.text.traptab_cpu2'
	.align	2
	
	.global	IfxCpu_Trap_vectorTable2

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   323  
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   324  
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   325  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   326  
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   327  #if IFXCPU_NUM_MODULES >= 3
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   328  #if defined(__HIGHTEC__)
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   329  #pragma section
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   330  #pragma section ".traptab_cpu2" awx
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   331  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   332  #if defined(__DCC__)
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   333  #pragma section
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   334  #pragma section CODE ".traptab_cpu2" X
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   335  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   336  #if defined(__TASKING__)
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   337  #pragma section code "traptab_cpu2"
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   338  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   339  #if defined(__ghs__)
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   340  #pragma ghs section
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   341  #pragma ghs section text=".traptab_cpu2"
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   342  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   343  
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   344  void IfxCpu_Trap_vectorTable2(void)
; Function IfxCpu_Trap_vectorTable2
.L37:
IfxCpu_Trap_vectorTable2:	.type	func

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   345  {
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   346      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_memoryManagementError);
	 .align 32
	movh.a	a15,#@his(IfxCpu_Trap_memoryManagementError)
	lea	a15,[a15]@los(IfxCpu_Trap_memoryManagementError)
	
	svlcx
	mov	d4,d15
	ji	a15

	
.L526:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   347      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_internalProtectionError);
	 .align 32
	movh.a	a15,#@his(IfxCpu_Trap_internalProtectionError)
	lea	a15,[a15]@los(IfxCpu_Trap_internalProtectionError)
	
	svlcx
	mov	d4,d15
	ji	a15

	
.L527:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   348      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_instructionError);
	 .align 32
	movh.a	a15,#@his(IfxCpu_Trap_instructionError)
	lea	a15,[a15]@los(IfxCpu_Trap_instructionError)
	
	svlcx
	mov	d4,d15
	ji	a15

	
.L528:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   349      IfxCpu_Tsr_CallCSATSR(IfxCpu_Trap_contextManagementError);
	 .align 32
	movh.a	a15,#@his(IfxCpu_Trap_contextManagementError)
	lea	a15,[a15]@los(IfxCpu_Trap_contextManagementError)
	
	mov	d4,d15
	ji	a15

	
.L529:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   350      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_busError);
	 .align 32
	movh.a	a15,#@his(IfxCpu_Trap_busError)
	lea	a15,[a15]@los(IfxCpu_Trap_busError)
	
	svlcx
	mov	d4,d15
	ji	a15

	
.L530:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   351      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_assertion);
	 .align 32
	movh.a	a15,#@his(IfxCpu_Trap_assertion)
	lea	a15,[a15]@los(IfxCpu_Trap_assertion)
	
	svlcx
	mov	d4,d15
	ji	a15

	
.L531:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   352      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_systemCall_Cpu2);
	 .align 32
	movh.a	a15,#@his(IfxCpu_Trap_systemCall_Cpu2)
	lea	a15,[a15]@los(IfxCpu_Trap_systemCall_Cpu2)
	
	svlcx
	mov	d4,d15
	ji	a15

	
.L532:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   353      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_nonMaskableInterrupt);
	 .align 32
	movh.a	a15,#@his(IfxCpu_Trap_nonMaskableInterrupt)
	lea	a15,[a15]@los(IfxCpu_Trap_nonMaskableInterrupt)
	
	svlcx
	mov	d4,d15
	ji	a15

	
.L533:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   354  }
	ret
.L351:
	
__IfxCpu_Trap_vectorTable2_function_end:
	.size	IfxCpu_Trap_vectorTable2,__IfxCpu_Trap_vectorTable2_function_end-IfxCpu_Trap_vectorTable2
.L127:
	; End of function
	
	.sdecl	'.text.traptab_cpu3',code,cluster('IfxCpu_Trap_vectorTable3'),protect
	.sect	'.text.traptab_cpu3'
	.align	2
	
	.global	IfxCpu_Trap_vectorTable3

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   355  
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   356  
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   357  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   358  
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   359  #if IFXCPU_NUM_MODULES >= 4
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   360  #if defined(__HIGHTEC__)
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   361  #pragma section
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   362  #pragma section ".traptab_cpu3" awx
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   363  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   364  #if defined(__DCC__)
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   365  #pragma section
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   366  #pragma section CODE ".traptab_cpu3" X
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   367  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   368  #if defined(__TASKING__)
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   369  #pragma section code "traptab_cpu3"
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   370  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   371  #if defined(__ghs__)
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   372  #pragma ghs section
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   373  #pragma ghs section text=".traptab_cpu3"
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   374  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   375  
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   376  
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   377  void IfxCpu_Trap_vectorTable3(void)
; Function IfxCpu_Trap_vectorTable3
.L39:
IfxCpu_Trap_vectorTable3:	.type	func

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   378  {
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   379      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_memoryManagementError);
	 .align 32
	movh.a	a15,#@his(IfxCpu_Trap_memoryManagementError)
	lea	a15,[a15]@los(IfxCpu_Trap_memoryManagementError)
	
	svlcx
	mov	d4,d15
	ji	a15

	
.L538:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   380      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_internalProtectionError);
	 .align 32
	movh.a	a15,#@his(IfxCpu_Trap_internalProtectionError)
	lea	a15,[a15]@los(IfxCpu_Trap_internalProtectionError)
	
	svlcx
	mov	d4,d15
	ji	a15

	
.L539:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   381      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_instructionError);
	 .align 32
	movh.a	a15,#@his(IfxCpu_Trap_instructionError)
	lea	a15,[a15]@los(IfxCpu_Trap_instructionError)
	
	svlcx
	mov	d4,d15
	ji	a15

	
.L540:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   382      IfxCpu_Tsr_CallCSATSR(IfxCpu_Trap_contextManagementError);
	 .align 32
	movh.a	a15,#@his(IfxCpu_Trap_contextManagementError)
	lea	a15,[a15]@los(IfxCpu_Trap_contextManagementError)
	
	mov	d4,d15
	ji	a15

	
.L541:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   383      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_busError);
	 .align 32
	movh.a	a15,#@his(IfxCpu_Trap_busError)
	lea	a15,[a15]@los(IfxCpu_Trap_busError)
	
	svlcx
	mov	d4,d15
	ji	a15

	
.L542:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   384      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_assertion);
	 .align 32
	movh.a	a15,#@his(IfxCpu_Trap_assertion)
	lea	a15,[a15]@los(IfxCpu_Trap_assertion)
	
	svlcx
	mov	d4,d15
	ji	a15

	
.L543:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   385      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_systemCall_Cpu3);
	 .align 32
	movh.a	a15,#@his(IfxCpu_Trap_systemCall_Cpu3)
	lea	a15,[a15]@los(IfxCpu_Trap_systemCall_Cpu3)
	
	svlcx
	mov	d4,d15
	ji	a15

	
.L544:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   386      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_nonMaskableInterrupt);
	 .align 32
	movh.a	a15,#@his(IfxCpu_Trap_nonMaskableInterrupt)
	lea	a15,[a15]@los(IfxCpu_Trap_nonMaskableInterrupt)
	
	svlcx
	mov	d4,d15
	ji	a15

	
.L545:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   387  }
	ret
.L352:
	
__IfxCpu_Trap_vectorTable3_function_end:
	.size	IfxCpu_Trap_vectorTable3,__IfxCpu_Trap_vectorTable3_function_end-IfxCpu_Trap_vectorTable3
.L132:
	; End of function
	
	.sdecl	'.text.traptab_cpu4',code,cluster('IfxCpu_Trap_vectorTable4'),protect
	.sect	'.text.traptab_cpu4'
	.align	2
	
	.global	IfxCpu_Trap_vectorTable4

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   388  
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   389  
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   390  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   391  
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   392  #if IFXCPU_NUM_MODULES >= 5
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   393  #if defined(__HIGHTEC__)
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   394  #pragma section
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   395  #pragma section ".traptab_cpu4" awx
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   396  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   397  #if defined(__DCC__)
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   398  #pragma section
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   399  #pragma section CODE ".traptab_cpu4" X
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   400  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   401  #if defined(__TASKING__)
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   402  #pragma section code "traptab_cpu4"
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   403  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   404  #if defined(__ghs__)
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   405  #pragma ghs section
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   406  #pragma ghs section text=".traptab_cpu4"
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   407  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   408  
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   409  void IfxCpu_Trap_vectorTable4(void)
; Function IfxCpu_Trap_vectorTable4
.L41:
IfxCpu_Trap_vectorTable4:	.type	func

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   410  {
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   411      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_memoryManagementError);
	 .align 32
	movh.a	a15,#@his(IfxCpu_Trap_memoryManagementError)
	lea	a15,[a15]@los(IfxCpu_Trap_memoryManagementError)
	
	svlcx
	mov	d4,d15
	ji	a15

	
.L550:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   412      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_internalProtectionError);
	 .align 32
	movh.a	a15,#@his(IfxCpu_Trap_internalProtectionError)
	lea	a15,[a15]@los(IfxCpu_Trap_internalProtectionError)
	
	svlcx
	mov	d4,d15
	ji	a15

	
.L551:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   413      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_instructionError);
	 .align 32
	movh.a	a15,#@his(IfxCpu_Trap_instructionError)
	lea	a15,[a15]@los(IfxCpu_Trap_instructionError)
	
	svlcx
	mov	d4,d15
	ji	a15

	
.L552:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   414      IfxCpu_Tsr_CallCSATSR(IfxCpu_Trap_contextManagementError);
	 .align 32
	movh.a	a15,#@his(IfxCpu_Trap_contextManagementError)
	lea	a15,[a15]@los(IfxCpu_Trap_contextManagementError)
	
	mov	d4,d15
	ji	a15

	
.L553:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   415      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_busError);
	 .align 32
	movh.a	a15,#@his(IfxCpu_Trap_busError)
	lea	a15,[a15]@los(IfxCpu_Trap_busError)
	
	svlcx
	mov	d4,d15
	ji	a15

	
.L554:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   416      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_assertion);
	 .align 32
	movh.a	a15,#@his(IfxCpu_Trap_assertion)
	lea	a15,[a15]@los(IfxCpu_Trap_assertion)
	
	svlcx
	mov	d4,d15
	ji	a15

	
.L555:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   417      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_systemCall_Cpu4);
	 .align 32
	movh.a	a15,#@his(IfxCpu_Trap_systemCall_Cpu4)
	lea	a15,[a15]@los(IfxCpu_Trap_systemCall_Cpu4)
	
	svlcx
	mov	d4,d15
	ji	a15

	
.L556:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   418      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_nonMaskableInterrupt);
	 .align 32
	movh.a	a15,#@his(IfxCpu_Trap_nonMaskableInterrupt)
	lea	a15,[a15]@los(IfxCpu_Trap_nonMaskableInterrupt)
	
	svlcx
	mov	d4,d15
	ji	a15

	
.L557:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   419  }
	ret
.L353:
	
__IfxCpu_Trap_vectorTable4_function_end:
	.size	IfxCpu_Trap_vectorTable4,__IfxCpu_Trap_vectorTable4_function_end-IfxCpu_Trap_vectorTable4
.L137:
	; End of function
	
	.sdecl	'.text.traptab_cpu5',code,cluster('IfxCpu_Trap_vectorTable5'),protect
	.sect	'.text.traptab_cpu5'
	.align	2
	
	.global	IfxCpu_Trap_vectorTable5

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   420  
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   421  
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   422  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   423  
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   424  #if IFXCPU_NUM_MODULES >= 6
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   425  #if defined(__HIGHTEC__)
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   426  #pragma section
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   427  #pragma section ".traptab_cpu5" awx
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   428  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   429  #if defined(__DCC__)
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   430  #pragma section
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   431  #pragma section CODE ".traptab_cpu5" X
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   432  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   433  #if defined(__TASKING__)
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   434  #pragma section code "traptab_cpu5"
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   435  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   436  #if defined(__ghs__)
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   437  #pragma ghs section
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   438  #pragma ghs section text=".traptab_cpu5"
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   439  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   440  
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   441  void IfxCpu_Trap_vectorTable5(void)
; Function IfxCpu_Trap_vectorTable5
.L43:
IfxCpu_Trap_vectorTable5:	.type	func

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   442  {
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   443      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_memoryManagementError);
	 .align 32
	movh.a	a15,#@his(IfxCpu_Trap_memoryManagementError)
	lea	a15,[a15]@los(IfxCpu_Trap_memoryManagementError)
	
	svlcx
	mov	d4,d15
	ji	a15

	
.L562:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   444      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_internalProtectionError);
	 .align 32
	movh.a	a15,#@his(IfxCpu_Trap_internalProtectionError)
	lea	a15,[a15]@los(IfxCpu_Trap_internalProtectionError)
	
	svlcx
	mov	d4,d15
	ji	a15

	
.L563:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   445      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_instructionError);
	 .align 32
	movh.a	a15,#@his(IfxCpu_Trap_instructionError)
	lea	a15,[a15]@los(IfxCpu_Trap_instructionError)
	
	svlcx
	mov	d4,d15
	ji	a15

	
.L564:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   446      IfxCpu_Tsr_CallCSATSR(IfxCpu_Trap_contextManagementError);
	 .align 32
	movh.a	a15,#@his(IfxCpu_Trap_contextManagementError)
	lea	a15,[a15]@los(IfxCpu_Trap_contextManagementError)
	
	mov	d4,d15
	ji	a15

	
.L565:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   447      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_busError);
	 .align 32
	movh.a	a15,#@his(IfxCpu_Trap_busError)
	lea	a15,[a15]@los(IfxCpu_Trap_busError)
	
	svlcx
	mov	d4,d15
	ji	a15

	
.L566:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   448      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_assertion);
	 .align 32
	movh.a	a15,#@his(IfxCpu_Trap_assertion)
	lea	a15,[a15]@los(IfxCpu_Trap_assertion)
	
	svlcx
	mov	d4,d15
	ji	a15

	
.L567:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   449      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_systemCall_Cpu5);
	 .align 32
	movh.a	a15,#@his(IfxCpu_Trap_systemCall_Cpu5)
	lea	a15,[a15]@los(IfxCpu_Trap_systemCall_Cpu5)
	
	svlcx
	mov	d4,d15
	ji	a15

	
.L568:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   450      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_nonMaskableInterrupt);
	 .align 32
	movh.a	a15,#@his(IfxCpu_Trap_nonMaskableInterrupt)
	lea	a15,[a15]@los(IfxCpu_Trap_nonMaskableInterrupt)
	
	svlcx
	mov	d4,d15
	ji	a15

	
.L569:

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   451  }
	ret
.L354:
	
__IfxCpu_Trap_vectorTable5_function_end:
	.size	IfxCpu_Trap_vectorTable5,__IfxCpu_Trap_vectorTable5_function_end-IfxCpu_Trap_vectorTable5
.L142:
	; End of function
	
	.calls	'__INDIRECT__','IfxCpu_Trap_memoryManagementError'
	.calls	'__INDIRECT__','IfxCpu_Trap_internalProtectionError'
	.calls	'__INDIRECT__','IfxCpu_Trap_instructionError'
	.calls	'__INDIRECT__','IfxCpu_Trap_contextManagementError'
	.calls	'__INDIRECT__','IfxCpu_Trap_busError'
	.calls	'__INDIRECT__','IfxCpu_Trap_assertion'
	.calls	'__INDIRECT__','IfxCpu_Trap_systemCall_Cpu0'
	.calls	'__INDIRECT__','IfxCpu_Trap_systemCall_Cpu1'
	.calls	'__INDIRECT__','IfxCpu_Trap_systemCall_Cpu2'
	.calls	'__INDIRECT__','IfxCpu_Trap_systemCall_Cpu3'
	.calls	'__INDIRECT__','IfxCpu_Trap_systemCall_Cpu4'
	.calls	'__INDIRECT__','IfxCpu_Trap_systemCall_Cpu5'
	.calls	'__INDIRECT__','IfxCpu_Trap_nonMaskableInterrupt'
	.calls	'IfxCpu_Trap_memoryManagementError','.cocofun_2'
	.calls	'IfxCpu_Trap_internalProtectionError','.cocofun_2'
	.calls	'IfxCpu_Trap_instructionError','.cocofun_2'
	.calls	'IfxCpu_Trap_contextManagementError','.cocofun_2'
	.calls	'IfxCpu_Trap_busError','.cocofun_2'
	.calls	'IfxCpu_Trap_assertion','.cocofun_2'
	.calls	'IfxCpu_Trap_systemCall_Cpu0','.cocofun_3'
	.calls	'IfxCpu_Trap_systemCall_Cpu0','.cocofun_2'
	.calls	'IfxCpu_Trap_systemCall_Cpu1','.cocofun_3'
	.calls	'IfxCpu_Trap_systemCall_Cpu1','.cocofun_2'
	.calls	'IfxCpu_Trap_systemCall_Cpu2','.cocofun_3'
	.calls	'IfxCpu_Trap_systemCall_Cpu2','.cocofun_2'
	.calls	'IfxCpu_Trap_systemCall_Cpu3','.cocofun_3'
	.calls	'IfxCpu_Trap_systemCall_Cpu3','.cocofun_2'
	.calls	'IfxCpu_Trap_systemCall_Cpu4','.cocofun_3'
	.calls	'IfxCpu_Trap_systemCall_Cpu4','.cocofun_2'
	.calls	'IfxCpu_Trap_systemCall_Cpu5','.cocofun_3'
	.calls	'IfxCpu_Trap_systemCall_Cpu5','.cocofun_2'
	.calls	'IfxCpu_Trap_nonMaskableInterrupt','.cocofun_2'
	.calls	'IfxCpu_Trap_memoryManagementError','',8
	.calls	'.cocofun_2','',0
	.calls	'IfxCpu_Trap_internalProtectionError','',8
	.calls	'IfxCpu_Trap_instructionError','',8
	.calls	'IfxCpu_Trap_contextManagementError','',8
	.calls	'IfxCpu_Trap_busError','',8
	.calls	'IfxCpu_Trap_assertion','',8
	.calls	'IfxCpu_Trap_systemCall_Cpu0','',8
	.calls	'.cocofun_3','',0
	.calls	'IfxCpu_Trap_systemCall_Cpu1','',8
	.calls	'IfxCpu_Trap_systemCall_Cpu2','',8
	.calls	'IfxCpu_Trap_systemCall_Cpu3','',8
	.calls	'IfxCpu_Trap_systemCall_Cpu4','',8
	.calls	'IfxCpu_Trap_systemCall_Cpu5','',8
	.calls	'IfxCpu_Trap_nonMaskableInterrupt','',8
	.calls	'IfxCpu_Trap_vectorTable0','',0
	.calls	'IfxCpu_Trap_vectorTable1','',0
	.calls	'IfxCpu_Trap_vectorTable2','',0
	.calls	'IfxCpu_Trap_vectorTable3','',0
	.calls	'IfxCpu_Trap_vectorTable4','',0
	.extern	__INDIRECT__
	.calls	'IfxCpu_Trap_vectorTable5','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L45:
	.word	99075
	.half	3
	.word	.L46
	.byte	4
.L44:
	.byte	1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap\\IfxCpu_Trap.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\Debug\\',0,12,1
	.word	.L47
	.byte	2,1,1,3
	.word	164
	.byte	4
	.byte	'Ifx__jump_and_link',0,3,1,58,17,1,1,5
	.byte	'fun',0,1,58,43
	.word	167
	.byte	6,0,7
	.byte	'__fract',0,4,128,1,7
	.byte	'float',0,4,4,8
	.byte	'Ifx__float_to_fract',0,3,1,149,2,18
	.word	212
	.byte	1,1,5
	.byte	'a',0,1,149,2,44
	.word	224
	.byte	6,0,4
	.byte	'Ifx__stopPerfCounters',0,3,1,169,2,17,1,1,6,0,9
	.byte	'void',0,3
	.word	310
.L168:
	.byte	8
	.byte	'Ifx__getA11',0,3,1,217,2,18
	.word	316
	.byte	1,1
.L170:
	.byte	6,0,7
	.byte	'unsigned long long int',0,8,7,8
	.byte	'__ld64',0,3,2,132,1,19
	.word	347
	.byte	1,1,5
	.byte	'addr',0,2,132,1,32
	.word	316
	.byte	6,0,4
	.byte	'__st64',0,3,2,140,1,17,1,1,5
	.byte	'addr',0,2,140,1,30
	.word	316
	.byte	5
	.byte	'value',0,2,140,1,43
	.word	347
	.byte	6,0,7
	.byte	'unsigned int',0,4,7,7
	.byte	'int',0,4,5,7
	.byte	'unsigned int',0,4,7,10
	.byte	'_Ifx_SCU_WDTCPU_CON0_Bits',0,4,238,9,16,4,11
	.byte	'ENDINIT',0,4
	.word	477
	.byte	1,31,2,35,0,11
	.byte	'LCK',0,4
	.word	477
	.byte	1,30,2,35,0,11
	.byte	'PW',0,4
	.word	477
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	477
	.byte	16,0,2,35,0,0,12,4,189,16,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	493
	.byte	4,2,35,0,0,7
	.byte	'unsigned char',0,1,8,7
	.byte	'unsigned short int',0,2,7,10
	.byte	'_Ifx_SCU_WDTCPU_CON1_Bits',0,4,247,9,16,4,11
	.byte	'reserved_0',0,1
	.word	629
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	629
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	629
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	629
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	629
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	629
	.byte	1,2,2,35,0,11
	.byte	'UR',0,1
	.word	629
	.byte	1,1,2,35,0,11
	.byte	'PAR',0,1
	.word	629
	.byte	1,0,2,35,0,11
	.byte	'TCR',0,1
	.word	629
	.byte	1,7,2,35,1,11
	.byte	'TCTR',0,1
	.word	629
	.byte	7,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	646
	.byte	16,0,2,35,2,0,12,4,197,16,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	668
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_SCU_WDTCPU_SR_Bits',0,4,135,10,16,4,11
	.byte	'AE',0,1
	.word	629
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	629
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	629
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	629
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	629
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	629
	.byte	1,2,2,35,0,11
	.byte	'US',0,1
	.word	629
	.byte	1,1,2,35,0,11
	.byte	'PAS',0,1
	.word	629
	.byte	1,0,2,35,0,11
	.byte	'TCS',0,1
	.word	629
	.byte	1,7,2,35,1,11
	.byte	'TCT',0,1
	.word	629
	.byte	7,0,2,35,1,11
	.byte	'TIM',0,2
	.word	646
	.byte	16,0,2,35,2,0,12,4,205,16,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	934
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_SCU_WDTCPU',0,4,136,17,25,12,13
	.byte	'CON0',0
	.word	589
	.byte	4,2,35,0,13
	.byte	'CON1',0
	.word	894
	.byte	4,2,35,4,13
	.byte	'SR',0
	.word	1125
	.byte	4,2,35,8,0,14
	.word	1165
	.byte	3
	.word	1228
	.byte	4
	.byte	'IfxScuWdt_clearCpuEndinitInline',0,3,3,164,4,17,1,1,5
	.byte	'watchdog',0,3,164,4,65
	.word	1233
	.byte	5
	.byte	'password',0,3,164,4,82
	.word	646
	.byte	6,0,4
	.byte	'IfxScuWdt_clearSafetyEndinitInline',0,3,3,197,4,17,1,1,5
	.byte	'password',0,3,197,4,59
	.word	646
	.byte	6,0,4
	.byte	'IfxScuWdt_setCpuEndinitInline',0,3,3,144,5,17,1,1,5
	.byte	'watchdog',0,3,144,5,63
	.word	1233
	.byte	5
	.byte	'password',0,3,144,5,80
	.word	646
	.byte	6,0,4
	.byte	'IfxScuWdt_setSafetyEndinitInline',0,3,3,177,5,17,1,1,5
	.byte	'password',0,3,177,5,57
	.word	646
	.byte	6,0,8
	.byte	'IfxScuWdt_getCpuWatchdogPasswordInline',0,3,3,220,4,19
	.word	646
	.byte	1,1,5
	.byte	'watchdog',0,3,220,4,74
	.word	1233
	.byte	6,0,8
	.byte	'IfxScuWdt_getSafetyWatchdogPasswordInline',0,3,3,129,5,19
	.word	646
	.byte	1,1,6,0,10
	.byte	'_Ifx_P_OUT_Bits',0,6,145,3,16,4,11
	.byte	'P0',0,1
	.word	629
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	629
	.byte	1,6,2,35,0,11
	.byte	'P2',0,1
	.word	629
	.byte	1,5,2,35,0,11
	.byte	'P3',0,1
	.word	629
	.byte	1,4,2,35,0,11
	.byte	'P4',0,1
	.word	629
	.byte	1,3,2,35,0,11
	.byte	'P5',0,1
	.word	629
	.byte	1,2,2,35,0,11
	.byte	'P6',0,1
	.word	629
	.byte	1,1,2,35,0,11
	.byte	'P7',0,1
	.word	629
	.byte	1,0,2,35,0,11
	.byte	'P8',0,1
	.word	629
	.byte	1,7,2,35,1,11
	.byte	'P9',0,1
	.word	629
	.byte	1,6,2,35,1,11
	.byte	'P10',0,1
	.word	629
	.byte	1,5,2,35,1,11
	.byte	'P11',0,1
	.word	629
	.byte	1,4,2,35,1,11
	.byte	'P12',0,1
	.word	629
	.byte	1,3,2,35,1,11
	.byte	'P13',0,1
	.word	629
	.byte	1,2,2,35,1,11
	.byte	'P14',0,1
	.word	629
	.byte	1,1,2,35,1,11
	.byte	'P15',0,1
	.word	629
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	646
	.byte	16,0,2,35,2,0,12,6,171,5,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	1643
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMR_Bits',0,6,171,2,16,4,11
	.byte	'PS0',0,1
	.word	629
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	629
	.byte	1,6,2,35,0,11
	.byte	'PS2',0,1
	.word	629
	.byte	1,5,2,35,0,11
	.byte	'PS3',0,1
	.word	629
	.byte	1,4,2,35,0,11
	.byte	'PS4',0,1
	.word	629
	.byte	1,3,2,35,0,11
	.byte	'PS5',0,1
	.word	629
	.byte	1,2,2,35,0,11
	.byte	'PS6',0,1
	.word	629
	.byte	1,1,2,35,0,11
	.byte	'PS7',0,1
	.word	629
	.byte	1,0,2,35,0,11
	.byte	'PS8',0,1
	.word	629
	.byte	1,7,2,35,1,11
	.byte	'PS9',0,1
	.word	629
	.byte	1,6,2,35,1,11
	.byte	'PS10',0,1
	.word	629
	.byte	1,5,2,35,1,11
	.byte	'PS11',0,1
	.word	629
	.byte	1,4,2,35,1,11
	.byte	'PS12',0,1
	.word	629
	.byte	1,3,2,35,1,11
	.byte	'PS13',0,1
	.word	629
	.byte	1,2,2,35,1,11
	.byte	'PS14',0,1
	.word	629
	.byte	1,1,2,35,1,11
	.byte	'PS15',0,1
	.word	629
	.byte	1,0,2,35,1,11
	.byte	'PCL0',0,1
	.word	629
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	629
	.byte	1,6,2,35,2,11
	.byte	'PCL2',0,1
	.word	629
	.byte	1,5,2,35,2,11
	.byte	'PCL3',0,1
	.word	629
	.byte	1,4,2,35,2,11
	.byte	'PCL4',0,1
	.word	629
	.byte	1,3,2,35,2,11
	.byte	'PCL5',0,1
	.word	629
	.byte	1,2,2,35,2,11
	.byte	'PCL6',0,1
	.word	629
	.byte	1,1,2,35,2,11
	.byte	'PCL7',0,1
	.word	629
	.byte	1,0,2,35,2,11
	.byte	'PCL8',0,1
	.word	629
	.byte	1,7,2,35,3,11
	.byte	'PCL9',0,1
	.word	629
	.byte	1,6,2,35,3,11
	.byte	'PCL10',0,1
	.word	629
	.byte	1,5,2,35,3,11
	.byte	'PCL11',0,1
	.word	629
	.byte	1,4,2,35,3,11
	.byte	'PCL12',0,1
	.word	629
	.byte	1,3,2,35,3,11
	.byte	'PCL13',0,1
	.word	629
	.byte	1,2,2,35,3,11
	.byte	'PCL14',0,1
	.word	629
	.byte	1,1,2,35,3,11
	.byte	'PCL15',0,1
	.word	629
	.byte	1,0,2,35,3,0,12,6,251,4,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	1959
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_ID_Bits',0,6,133,1,16,4,11
	.byte	'MODREV',0,1
	.word	629
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	629
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	646
	.byte	16,0,2,35,2,0,12,6,155,4,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2530
	.byte	4,2,35,0,0,15,4
	.word	629
	.byte	16,3,0,10
	.byte	'_Ifx_P_IOCR0_Bits',0,6,163,1,16,4,11
	.byte	'reserved_0',0,1
	.word	629
	.byte	3,5,2,35,0,11
	.byte	'PC0',0,1
	.word	629
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	629
	.byte	3,5,2,35,1,11
	.byte	'PC1',0,1
	.word	629
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	629
	.byte	3,5,2,35,2,11
	.byte	'PC2',0,1
	.word	629
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	629
	.byte	3,5,2,35,3,11
	.byte	'PC3',0,1
	.word	629
	.byte	5,0,2,35,3,0,12,6,171,4,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2659
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR4_Bits',0,6,189,1,16,4,11
	.byte	'reserved_0',0,1
	.word	629
	.byte	3,5,2,35,0,11
	.byte	'PC4',0,1
	.word	629
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	629
	.byte	3,5,2,35,1,11
	.byte	'PC5',0,1
	.word	629
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	629
	.byte	3,5,2,35,2,11
	.byte	'PC6',0,1
	.word	629
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	629
	.byte	3,5,2,35,3,11
	.byte	'PC7',0,1
	.word	629
	.byte	5,0,2,35,3,0,12,6,187,4,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2874
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR8_Bits',0,6,202,1,16,4,11
	.byte	'reserved_0',0,1
	.word	629
	.byte	3,5,2,35,0,11
	.byte	'PC8',0,1
	.word	629
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	629
	.byte	3,5,2,35,1,11
	.byte	'PC9',0,1
	.word	629
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	629
	.byte	3,5,2,35,2,11
	.byte	'PC10',0,1
	.word	629
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	629
	.byte	3,5,2,35,3,11
	.byte	'PC11',0,1
	.word	629
	.byte	5,0,2,35,3,0,12,6,195,4,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3089
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR12_Bits',0,6,176,1,16,4,11
	.byte	'reserved_0',0,1
	.word	629
	.byte	3,5,2,35,0,11
	.byte	'PC12',0,1
	.word	629
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	629
	.byte	3,5,2,35,1,11
	.byte	'PC13',0,1
	.word	629
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	629
	.byte	3,5,2,35,2,11
	.byte	'PC14',0,1
	.word	629
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	629
	.byte	3,5,2,35,3,11
	.byte	'PC15',0,1
	.word	629
	.byte	5,0,2,35,3,0,12,6,179,4,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3306
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IN_Bits',0,6,141,1,16,4,11
	.byte	'P0',0,1
	.word	629
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	629
	.byte	1,6,2,35,0,11
	.byte	'P2',0,1
	.word	629
	.byte	1,5,2,35,0,11
	.byte	'P3',0,1
	.word	629
	.byte	1,4,2,35,0,11
	.byte	'P4',0,1
	.word	629
	.byte	1,3,2,35,0,11
	.byte	'P5',0,1
	.word	629
	.byte	1,2,2,35,0,11
	.byte	'P6',0,1
	.word	629
	.byte	1,1,2,35,0,11
	.byte	'P7',0,1
	.word	629
	.byte	1,0,2,35,0,11
	.byte	'P8',0,1
	.word	629
	.byte	1,7,2,35,1,11
	.byte	'P9',0,1
	.word	629
	.byte	1,6,2,35,1,11
	.byte	'P10',0,1
	.word	629
	.byte	1,5,2,35,1,11
	.byte	'P11',0,1
	.word	629
	.byte	1,4,2,35,1,11
	.byte	'P12',0,1
	.word	629
	.byte	1,3,2,35,1,11
	.byte	'P13',0,1
	.word	629
	.byte	1,2,2,35,1,11
	.byte	'P14',0,1
	.word	629
	.byte	1,1,2,35,1,11
	.byte	'P15',0,1
	.word	629
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	646
	.byte	16,0,2,35,2,0,12,6,163,4,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3526
	.byte	4,2,35,0,0,15,24
	.word	629
	.byte	16,23,0,10
	.byte	'_Ifx_P_PDR0_Bits',0,6,212,3,16,4,11
	.byte	'PD0',0,1
	.word	629
	.byte	2,6,2,35,0,11
	.byte	'PL0',0,1
	.word	629
	.byte	2,4,2,35,0,11
	.byte	'PD1',0,1
	.word	629
	.byte	2,2,2,35,0,11
	.byte	'PL1',0,1
	.word	629
	.byte	2,0,2,35,0,11
	.byte	'PD2',0,1
	.word	629
	.byte	2,6,2,35,1,11
	.byte	'PL2',0,1
	.word	629
	.byte	2,4,2,35,1,11
	.byte	'PD3',0,1
	.word	629
	.byte	2,2,2,35,1,11
	.byte	'PL3',0,1
	.word	629
	.byte	2,0,2,35,1,11
	.byte	'PD4',0,1
	.word	629
	.byte	2,6,2,35,2,11
	.byte	'PL4',0,1
	.word	629
	.byte	2,4,2,35,2,11
	.byte	'PD5',0,1
	.word	629
	.byte	2,2,2,35,2,11
	.byte	'PL5',0,1
	.word	629
	.byte	2,0,2,35,2,11
	.byte	'PD6',0,1
	.word	629
	.byte	2,6,2,35,3,11
	.byte	'PL6',0,1
	.word	629
	.byte	2,4,2,35,3,11
	.byte	'PD7',0,1
	.word	629
	.byte	2,2,2,35,3,11
	.byte	'PL7',0,1
	.word	629
	.byte	2,0,2,35,3,0,12,6,195,5,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3850
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_PDR1_Bits',0,6,233,3,16,4,11
	.byte	'PD8',0,1
	.word	629
	.byte	2,6,2,35,0,11
	.byte	'PL8',0,1
	.word	629
	.byte	2,4,2,35,0,11
	.byte	'PD9',0,1
	.word	629
	.byte	2,2,2,35,0,11
	.byte	'PL9',0,1
	.word	629
	.byte	2,0,2,35,0,11
	.byte	'PD10',0,1
	.word	629
	.byte	2,6,2,35,1,11
	.byte	'PL10',0,1
	.word	629
	.byte	2,4,2,35,1,11
	.byte	'PD11',0,1
	.word	629
	.byte	2,2,2,35,1,11
	.byte	'PL11',0,1
	.word	629
	.byte	2,0,2,35,1,11
	.byte	'PD12',0,1
	.word	629
	.byte	2,6,2,35,2,11
	.byte	'PL12',0,1
	.word	629
	.byte	2,4,2,35,2,11
	.byte	'PD13',0,1
	.word	629
	.byte	2,2,2,35,2,11
	.byte	'PL13',0,1
	.word	629
	.byte	2,0,2,35,2,11
	.byte	'PD14',0,1
	.word	629
	.byte	2,6,2,35,3,11
	.byte	'PL14',0,1
	.word	629
	.byte	2,4,2,35,3,11
	.byte	'PD15',0,1
	.word	629
	.byte	2,2,2,35,3,11
	.byte	'PL15',0,1
	.word	629
	.byte	2,0,2,35,3,0,12,6,203,5,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4154
	.byte	4,2,35,0,0,15,8
	.word	629
	.byte	16,7,0,10
	.byte	'_Ifx_P_ESR_Bits',0,6,111,16,4,11
	.byte	'EN0',0,1
	.word	629
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	629
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	629
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	629
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	629
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	629
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	629
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	629
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	629
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	629
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	629
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	629
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	629
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	629
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	629
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	629
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	646
	.byte	16,0,2,35,2,0,12,6,147,4,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4479
	.byte	4,2,35,0,0,15,12
	.word	629
	.byte	16,11,0,10
	.byte	'_Ifx_P_PDISC_Bits',0,6,190,3,16,4,11
	.byte	'PDIS0',0,1
	.word	629
	.byte	1,7,2,35,0,11
	.byte	'PDIS1',0,1
	.word	629
	.byte	1,6,2,35,0,11
	.byte	'PDIS2',0,1
	.word	629
	.byte	1,5,2,35,0,11
	.byte	'PDIS3',0,1
	.word	629
	.byte	1,4,2,35,0,11
	.byte	'PDIS4',0,1
	.word	629
	.byte	1,3,2,35,0,11
	.byte	'PDIS5',0,1
	.word	629
	.byte	1,2,2,35,0,11
	.byte	'PDIS6',0,1
	.word	629
	.byte	1,1,2,35,0,11
	.byte	'PDIS7',0,1
	.word	629
	.byte	1,0,2,35,0,11
	.byte	'PDIS8',0,1
	.word	629
	.byte	1,7,2,35,1,11
	.byte	'PDIS9',0,1
	.word	629
	.byte	1,6,2,35,1,11
	.byte	'PDIS10',0,1
	.word	629
	.byte	1,5,2,35,1,11
	.byte	'PDIS11',0,1
	.word	629
	.byte	1,4,2,35,1,11
	.byte	'PDIS12',0,1
	.word	629
	.byte	1,3,2,35,1,11
	.byte	'PDIS13',0,1
	.word	629
	.byte	1,2,2,35,1,11
	.byte	'PDIS14',0,1
	.word	629
	.byte	1,1,2,35,1,11
	.byte	'PDIS15',0,1
	.word	629
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	646
	.byte	16,0,2,35,2,0,12,6,187,5,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4819
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_PCSR_Bits',0,6,167,3,16,4,11
	.byte	'SEL0',0,1
	.word	629
	.byte	1,7,2,35,0,11
	.byte	'SEL1',0,1
	.word	629
	.byte	1,6,2,35,0,11
	.byte	'SEL2',0,1
	.word	629
	.byte	1,5,2,35,0,11
	.byte	'SEL3',0,1
	.word	629
	.byte	1,4,2,35,0,11
	.byte	'SEL4',0,1
	.word	629
	.byte	1,3,2,35,0,11
	.byte	'SEL5',0,1
	.word	629
	.byte	1,2,2,35,0,11
	.byte	'SEL6',0,1
	.word	629
	.byte	1,1,2,35,0,11
	.byte	'SEL7',0,1
	.word	629
	.byte	1,0,2,35,0,11
	.byte	'SEL8',0,1
	.word	629
	.byte	1,7,2,35,1,11
	.byte	'SEL9',0,1
	.word	629
	.byte	1,6,2,35,1,11
	.byte	'SEL10',0,1
	.word	629
	.byte	1,5,2,35,1,11
	.byte	'SEL11',0,1
	.word	629
	.byte	1,4,2,35,1,11
	.byte	'SEL12',0,1
	.word	629
	.byte	1,3,2,35,1,11
	.byte	'SEL13',0,1
	.word	629
	.byte	1,2,2,35,1,11
	.byte	'SEL14',0,1
	.word	629
	.byte	1,1,2,35,1,11
	.byte	'SEL15',0,1
	.word	629
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	646
	.byte	15,1,2,35,2,11
	.byte	'LCK',0,1
	.word	629
	.byte	1,0,2,35,3,0,12,6,179,5,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5185
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR0_Bits',0,6,230,2,16,4,11
	.byte	'PS0',0,1
	.word	629
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	629
	.byte	1,6,2,35,0,11
	.byte	'PS2',0,1
	.word	629
	.byte	1,5,2,35,0,11
	.byte	'PS3',0,1
	.word	629
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	454
	.byte	28,0,2,35,0,0,12,6,139,5,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5549
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR4_Bits',0,6,251,2,16,4,11
	.byte	'reserved_0',0,1
	.word	629
	.byte	4,4,2,35,0,11
	.byte	'PS4',0,1
	.word	629
	.byte	1,3,2,35,0,11
	.byte	'PS5',0,1
	.word	629
	.byte	1,2,2,35,0,11
	.byte	'PS6',0,1
	.word	629
	.byte	1,1,2,35,0,11
	.byte	'PS7',0,1
	.word	629
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	454
	.byte	24,0,2,35,0,0,12,6,155,5,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5696
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR8_Bits',0,6,134,3,16,4,11
	.byte	'reserved_0',0,1
	.word	629
	.byte	8,0,2,35,0,11
	.byte	'PS8',0,1
	.word	629
	.byte	1,7,2,35,1,11
	.byte	'PS9',0,1
	.word	629
	.byte	1,6,2,35,1,11
	.byte	'PS10',0,1
	.word	629
	.byte	1,5,2,35,1,11
	.byte	'PS11',0,1
	.word	629
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,4
	.word	454
	.byte	20,0,2,35,0,0,12,6,163,5,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5865
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR12_Bits',0,6,240,2,16,4,11
	.byte	'reserved_0',0,2
	.word	646
	.byte	12,4,2,35,0,11
	.byte	'PS12',0,1
	.word	629
	.byte	1,3,2,35,1,11
	.byte	'PS13',0,1
	.word	629
	.byte	1,2,2,35,1,11
	.byte	'PS14',0,1
	.word	629
	.byte	1,1,2,35,1,11
	.byte	'PS15',0,1
	.word	629
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	646
	.byte	16,0,2,35,2,0,12,6,147,5,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6037
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR0_Bits',0,6,128,2,16,4,11
	.byte	'reserved_0',0,2
	.word	646
	.byte	16,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	629
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	629
	.byte	1,6,2,35,2,11
	.byte	'PCL2',0,1
	.word	629
	.byte	1,5,2,35,2,11
	.byte	'PCL3',0,1
	.word	629
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,2
	.word	646
	.byte	12,0,2,35,2,0,12,6,219,4,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6212
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR4_Bits',0,6,149,2,16,4,11
	.byte	'reserved_0',0,4
	.word	454
	.byte	20,12,2,35,0,11
	.byte	'PCL4',0,1
	.word	629
	.byte	1,3,2,35,2,11
	.byte	'PCL5',0,1
	.word	629
	.byte	1,2,2,35,2,11
	.byte	'PCL6',0,1
	.word	629
	.byte	1,1,2,35,2,11
	.byte	'PCL7',0,1
	.word	629
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	629
	.byte	8,0,2,35,3,0,12,6,235,4,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6386
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR8_Bits',0,6,160,2,16,4,11
	.byte	'reserved_0',0,4
	.word	454
	.byte	24,8,2,35,0,11
	.byte	'PCL8',0,1
	.word	629
	.byte	1,7,2,35,3,11
	.byte	'PCL9',0,1
	.word	629
	.byte	1,6,2,35,3,11
	.byte	'PCL10',0,1
	.word	629
	.byte	1,5,2,35,3,11
	.byte	'PCL11',0,1
	.word	629
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	629
	.byte	4,0,2,35,3,0,12,6,243,4,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6560
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR12_Bits',0,6,139,2,16,4,11
	.byte	'reserved_0',0,4
	.word	454
	.byte	28,4,2,35,0,11
	.byte	'PCL12',0,1
	.word	629
	.byte	1,3,2,35,3,11
	.byte	'PCL13',0,1
	.word	629
	.byte	1,2,2,35,3,11
	.byte	'PCL14',0,1
	.word	629
	.byte	1,1,2,35,3,11
	.byte	'PCL15',0,1
	.word	629
	.byte	1,0,2,35,3,0,12,6,227,4,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6736
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR_Bits',0,6,208,2,16,4,11
	.byte	'PS0',0,1
	.word	629
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	629
	.byte	1,6,2,35,0,11
	.byte	'PS2',0,1
	.word	629
	.byte	1,5,2,35,0,11
	.byte	'PS3',0,1
	.word	629
	.byte	1,4,2,35,0,11
	.byte	'PS4',0,1
	.word	629
	.byte	1,3,2,35,0,11
	.byte	'PS5',0,1
	.word	629
	.byte	1,2,2,35,0,11
	.byte	'PS6',0,1
	.word	629
	.byte	1,1,2,35,0,11
	.byte	'PS7',0,1
	.word	629
	.byte	1,0,2,35,0,11
	.byte	'PS8',0,1
	.word	629
	.byte	1,7,2,35,1,11
	.byte	'PS9',0,1
	.word	629
	.byte	1,6,2,35,1,11
	.byte	'PS10',0,1
	.word	629
	.byte	1,5,2,35,1,11
	.byte	'PS11',0,1
	.word	629
	.byte	1,4,2,35,1,11
	.byte	'PS12',0,1
	.word	629
	.byte	1,3,2,35,1,11
	.byte	'PS13',0,1
	.word	629
	.byte	1,2,2,35,1,11
	.byte	'PS14',0,1
	.word	629
	.byte	1,1,2,35,1,11
	.byte	'PS15',0,1
	.word	629
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	646
	.byte	16,0,2,35,2,0,12,6,131,5,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6892
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR_Bits',0,6,234,1,16,4,11
	.byte	'reserved_0',0,2
	.word	646
	.byte	16,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	629
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	629
	.byte	1,6,2,35,2,11
	.byte	'PCL2',0,1
	.word	629
	.byte	1,5,2,35,2,11
	.byte	'PCL3',0,1
	.word	629
	.byte	1,4,2,35,2,11
	.byte	'PCL4',0,1
	.word	629
	.byte	1,3,2,35,2,11
	.byte	'PCL5',0,1
	.word	629
	.byte	1,2,2,35,2,11
	.byte	'PCL6',0,1
	.word	629
	.byte	1,1,2,35,2,11
	.byte	'PCL7',0,1
	.word	629
	.byte	1,0,2,35,2,11
	.byte	'PCL8',0,1
	.word	629
	.byte	1,7,2,35,3,11
	.byte	'PCL9',0,1
	.word	629
	.byte	1,6,2,35,3,11
	.byte	'PCL10',0,1
	.word	629
	.byte	1,5,2,35,3,11
	.byte	'PCL11',0,1
	.word	629
	.byte	1,4,2,35,3,11
	.byte	'PCL12',0,1
	.word	629
	.byte	1,3,2,35,3,11
	.byte	'PCL13',0,1
	.word	629
	.byte	1,2,2,35,3,11
	.byte	'PCL14',0,1
	.word	629
	.byte	1,1,2,35,3,11
	.byte	'PCL15',0,1
	.word	629
	.byte	1,0,2,35,3,0,12,6,211,4,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7225
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_LPCR_Bits',0,6,215,1,16,4,11
	.byte	'REN_CTRL',0,1
	.word	629
	.byte	1,7,2,35,0,11
	.byte	'RX_EN',0,1
	.word	629
	.byte	1,6,2,35,0,11
	.byte	'TERM',0,1
	.word	629
	.byte	1,5,2,35,0,11
	.byte	'LRXTERM',0,1
	.word	629
	.byte	3,2,2,35,0,11
	.byte	'LVDSM',0,1
	.word	629
	.byte	1,1,2,35,0,11
	.byte	'PS',0,1
	.word	629
	.byte	1,0,2,35,0,11
	.byte	'TEN_CTRL',0,1
	.word	629
	.byte	1,7,2,35,1,11
	.byte	'TX_EN',0,1
	.word	629
	.byte	1,6,2,35,1,11
	.byte	'VDIFFADJ',0,1
	.word	629
	.byte	2,4,2,35,1,11
	.byte	'VOSDYN',0,1
	.word	629
	.byte	1,3,2,35,1,11
	.byte	'VOSEXT',0,1
	.word	629
	.byte	1,2,2,35,1,11
	.byte	'TX_PD',0,1
	.word	629
	.byte	1,1,2,35,1,11
	.byte	'TX_PWDPD',0,1
	.word	629
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	646
	.byte	16,0,2,35,2,0,12,6,203,4,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7573
	.byte	4,2,35,0,0,15,32
	.word	7853
	.byte	16,7,0,15,56
	.word	629
	.byte	16,55,0,10
	.byte	'_Ifx_P_ACCEN1_Bits',0,6,105,16,4,11
	.byte	'reserved_0',0,4
	.word	454
	.byte	32,0,2,35,0,0,12,6,139,4,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7911
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_ACCEN0_Bits',0,6,68,16,4,11
	.byte	'EN0',0,1
	.word	629
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	629
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	629
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	629
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	629
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	629
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	629
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	629
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	629
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	629
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	629
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	629
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	629
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	629
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	629
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	629
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	629
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	629
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	629
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	629
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	629
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	629
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	629
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	629
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	629
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	629
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	629
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	629
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	629
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	629
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	629
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	629
	.byte	1,0,2,35,3,0,12,6,131,4,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7998
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P',0,6,220,5,25,128,2,13
	.byte	'OUT',0
	.word	1919
	.byte	4,2,35,0,13
	.byte	'OMR',0
	.word	2490
	.byte	4,2,35,4,13
	.byte	'ID',0
	.word	2610
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	2650
	.byte	4,2,35,12,13
	.byte	'IOCR0',0
	.word	2834
	.byte	4,2,35,16,13
	.byte	'IOCR4',0
	.word	3049
	.byte	4,2,35,20,13
	.byte	'IOCR8',0
	.word	3266
	.byte	4,2,35,24,13
	.byte	'IOCR12',0
	.word	3486
	.byte	4,2,35,28,13
	.byte	'reserved_20',0
	.word	2650
	.byte	4,2,35,32,13
	.byte	'IN',0
	.word	3801
	.byte	4,2,35,36,13
	.byte	'reserved_28',0
	.word	3841
	.byte	24,2,35,40,13
	.byte	'PDR0',0
	.word	4114
	.byte	4,2,35,64,13
	.byte	'PDR1',0
	.word	4430
	.byte	4,2,35,68,13
	.byte	'reserved_48',0
	.word	4470
	.byte	8,2,35,72,13
	.byte	'ESR',0
	.word	4770
	.byte	4,2,35,80,13
	.byte	'reserved_54',0
	.word	4810
	.byte	12,2,35,84,13
	.byte	'PDISC',0
	.word	5145
	.byte	4,2,35,96,13
	.byte	'PCSR',0
	.word	5509
	.byte	4,2,35,100,13
	.byte	'reserved_68',0
	.word	4470
	.byte	8,2,35,104,13
	.byte	'OMSR0',0
	.word	5656
	.byte	4,2,35,112,13
	.byte	'OMSR4',0
	.word	5825
	.byte	4,2,35,116,13
	.byte	'OMSR8',0
	.word	5997
	.byte	4,2,35,120,13
	.byte	'OMSR12',0
	.word	6172
	.byte	4,2,35,124,13
	.byte	'OMCR0',0
	.word	6346
	.byte	4,3,35,128,1,13
	.byte	'OMCR4',0
	.word	6520
	.byte	4,3,35,132,1,13
	.byte	'OMCR8',0
	.word	6696
	.byte	4,3,35,136,1,13
	.byte	'OMCR12',0
	.word	6852
	.byte	4,3,35,140,1,13
	.byte	'OMSR',0
	.word	7185
	.byte	4,3,35,144,1,13
	.byte	'OMCR',0
	.word	7533
	.byte	4,3,35,148,1,13
	.byte	'reserved_98',0
	.word	4470
	.byte	8,3,35,152,1,13
	.byte	'LPCR',0
	.word	7893
	.byte	32,3,35,160,1,13
	.byte	'reserved_C0',0
	.word	7902
	.byte	56,3,35,192,1,13
	.byte	'ACCEN1',0
	.word	7958
	.byte	4,3,35,248,1,13
	.byte	'ACCEN0',0
	.word	8525
	.byte	4,3,35,252,1,0,14
	.word	8565
	.byte	3
	.word	9135
	.byte	17,5,187,1,9,4,18
	.byte	'IfxPort_State_notChanged',0,0,18
	.byte	'IfxPort_State_high',0,1,18
	.byte	'IfxPort_State_low',0,128,128,4,18
	.byte	'IfxPort_State_toggled',0,129,128,4,0,4
	.byte	'IfxPort_setPinState',0,3,5,169,5,17,1,1,5
	.byte	'port',0,5,169,5,44
	.word	9140
	.byte	5
	.byte	'pinIndex',0,5,169,5,56
	.word	629
	.byte	5
	.byte	'action',0,5,169,5,80
	.word	9145
	.byte	6,0,4
	.byte	'IfxScuCcu_wait',0,3,7,157,14,17,1,1,5
	.byte	'timeSec',0,7,157,14,40
	.word	224
	.byte	19,6,0,0,8
	.byte	'IfxScuCcu_getStmFrequency',0,3,7,188,13,20
	.word	224
	.byte	1,1,6,0,17,9,124,9,1,18
	.byte	'IfxCpu_Id_0',0,0,18
	.byte	'IfxCpu_Id_1',0,1,18
	.byte	'IfxCpu_Id_2',0,2,18
	.byte	'IfxCpu_Id_3',0,3,18
	.byte	'IfxCpu_Id_4',0,4,18
	.byte	'IfxCpu_Id_6',0,6,18
	.byte	'IfxCpu_Id_none',0,7,0
.L173:
	.byte	8
	.byte	'IfxCpu_getCoreId',0,3,8,227,6,22
	.word	9410
	.byte	1,1
.L176:
	.byte	6,0,17,9,161,1,9,1,18
	.byte	'IfxCpu_ResourceCpu_0',0,0,18
	.byte	'IfxCpu_ResourceCpu_1',0,1,18
	.byte	'IfxCpu_ResourceCpu_2',0,2,18
	.byte	'IfxCpu_ResourceCpu_3',0,3,18
	.byte	'IfxCpu_ResourceCpu_4',0,4,18
	.byte	'IfxCpu_ResourceCpu_5',0,5,18
	.byte	'IfxCpu_ResourceCpu_none',0,6,0,8
	.byte	'IfxCpu_getCoreIndex',0,3,8,235,6,31
	.word	9548
	.byte	1,1,6,0,8
	.byte	'IfxCpu_areInterruptsEnabled',0,3,8,233,5,20
	.word	629
	.byte	1,1,6,0
.L154:
	.byte	7
	.byte	'unsigned long int',0,4,7,8
	.byte	'IfxCpu_getPerformanceCounter',0,3,8,255,6,19
	.word	9795
	.byte	1,1,5
	.byte	'address',0,8,255,6,55
	.word	646
	.byte	6,0,8
	.byte	'IfxCpu_getPerformanceCounterStickyOverflow',0,3,8,156,7,20
	.word	629
	.byte	1,1,5
	.byte	'address',0,8,156,7,70
	.word	646
	.byte	6,0,4
	.byte	'IfxCpu_updatePerformanceCounter',0,3,8,138,9,17,1,1,5
	.byte	'address',0,8,138,9,56
	.word	9795
	.byte	5
	.byte	'count',0,8,138,9,72
	.word	9795
	.byte	19,6,0,0
.L166:
	.byte	20,11,183,1,9,8,13
	.byte	'tAddr',0
	.word	454
	.byte	4,2,35,0,11
	.byte	'tId',0,1
	.word	629
	.byte	8,0,2,35,4,11
	.byte	'tClass',0,1
	.word	629
	.byte	8,0,2,35,5,11
	.byte	'tCpu',0,1
	.word	629
	.byte	3,5,2,35,6,0
.L158:
	.byte	8
	.byte	'IfxCpu_Trap_extractTrapInfo',0,3,10,115,24
	.word	10026
	.byte	1,1
.L161:
	.byte	5
	.byte	'trapClass',0,10,115,58
	.word	629
.L163:
	.byte	5
	.byte	'tin',0,10,115,76
	.word	9795
.L165:
	.byte	19,6,6,0,0,21
	.word	470
	.byte	22
	.byte	'__c11_atomic_thread_fence',0,1,1,1,1,23
	.word	10171
	.byte	0,14
	.word	454
.L171:
	.byte	3
	.word	454
	.byte	24
	.byte	'__cmpswapw',0
	.word	10213
	.byte	1,1,1,1,25
	.byte	'p',0
	.word	10218
	.byte	25
	.byte	'value',0
	.word	454
	.byte	25
	.byte	'compare',0
	.word	454
	.byte	0,14
	.word	470
	.byte	24
	.byte	'__mfcr',0
	.word	10275
	.byte	1,1,1,1,23
	.word	470
	.byte	0,26
	.byte	'__debug',0,1,1,1,1,27
	.word	172
	.byte	28
	.word	198
	.byte	6,0,27
	.word	233
	.byte	28
	.word	265
	.byte	6,0,27
	.word	278
	.byte	6,0,27
	.word	321
	.byte	6,0,27
	.word	373
	.byte	28
	.word	392
	.byte	6,0,27
	.word	408
	.byte	28
	.word	423
	.byte	28
	.word	437
	.byte	6,0,27
	.word	1238
	.byte	28
	.word	1278
	.byte	28
	.word	1296
	.byte	6,0,27
	.word	1316
	.byte	28
	.word	1359
	.byte	6,0,27
	.word	1379
	.byte	28
	.word	1417
	.byte	28
	.word	1435
	.byte	6,0,27
	.word	1455
	.byte	28
	.word	1496
	.byte	6,0,27
	.word	1516
	.byte	28
	.word	1567
	.byte	6,0,27
	.word	1587
	.byte	6,0,27
	.word	9248
	.byte	28
	.word	9276
	.byte	28
	.word	9290
	.byte	28
	.word	9308
	.byte	6,0,27
	.word	9326
	.byte	28
	.word	9349
	.byte	19,29
	.word	9370
	.byte	30
	.word	9408
	.byte	0,6,0,0,27
	.word	9370
	.byte	6,0,27
	.word	9517
	.byte	6,0,27
	.word	9719
	.byte	6,0,27
	.word	9753
	.byte	6,0,27
	.word	9816
	.byte	28
	.word	9857
	.byte	6,0,27
	.word	9876
	.byte	28
	.word	9931
	.byte	6,0,27
	.word	9950
	.byte	28
	.word	9990
	.byte	28
	.word	10007
	.byte	19,6,0,0,27
	.word	10097
	.byte	28
	.word	10136
	.byte	28
	.word	10154
	.byte	19,29
	.word	321
	.byte	30
	.word	345
	.byte	0,6,29
	.word	9517
	.byte	30
	.word	9546
	.byte	0,6,0,0
.L156:
	.byte	14
	.word	10026
	.byte	10
	.byte	'_Ifx_CPU_CORE_ID_Bits',0,12,143,1,16,4,11
	.byte	'CORE_ID',0,4
	.word	477
	.byte	3,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	477
	.byte	29,0,2,35,0,0
.L178:
	.byte	12,12,244,10,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	10624
	.byte	4,2,35,0,0
.L182:
	.byte	14
	.word	10026
.L196:
	.byte	14
	.word	10026
.L210:
	.byte	14
	.word	10026
.L224:
	.byte	14
	.word	10026
.L238:
	.byte	14
	.word	10026
.L252:
	.byte	14
	.word	10026
.L267:
	.byte	14
	.word	10026
.L281:
	.byte	14
	.word	10026
.L295:
	.byte	14
	.word	10026
.L309:
	.byte	14
	.word	10026
.L323:
	.byte	14
	.word	10026
.L337:
	.byte	14
	.word	10026
	.byte	31
	.byte	'__INDIRECT__',0,10,1,1,1,1,1,7
	.byte	'short int',0,2,5,32
	.byte	'__wchar_t',0,10,1,1
	.word	10814
	.byte	32
	.byte	'__size_t',0,10,1,1
	.word	454
	.byte	32
	.byte	'__ptrdiff_t',0,10,1,1
	.word	470
	.byte	33,1,3
	.word	10882
	.byte	32
	.byte	'__codeptr',0,10,1,1
	.word	10884
	.byte	32
	.byte	'boolean',0,13,104,29
	.word	629
	.byte	32
	.byte	'uint8',0,13,108,29
	.word	629
	.byte	32
	.byte	'uint16',0,13,112,29
	.word	646
	.byte	32
	.byte	'uint32',0,13,116,29
	.word	9795
	.byte	32
	.byte	'uint64',0,13,121,29
	.word	347
	.byte	32
	.byte	'sint16',0,13,129,1,29
	.word	10814
	.byte	7
	.byte	'long int',0,4,5,32
	.byte	'sint32',0,13,134,1,29
	.word	10998
	.byte	7
	.byte	'long long int',0,8,5,32
	.byte	'sint64',0,13,141,1,29
	.word	11026
	.byte	32
	.byte	'float32',0,13,170,1,29
	.word	224
	.byte	32
	.byte	'pvoid',0,14,54,28
	.word	316
	.byte	32
	.byte	'Ifx_TickTime',0,14,76,28
	.word	11026
	.byte	17,14,127,9,1,18
	.byte	'Ifx_RxSel_a',0,0,18
	.byte	'Ifx_RxSel_b',0,1,18
	.byte	'Ifx_RxSel_c',0,2,18
	.byte	'Ifx_RxSel_d',0,3,18
	.byte	'Ifx_RxSel_e',0,4,18
	.byte	'Ifx_RxSel_f',0,5,18
	.byte	'Ifx_RxSel_g',0,6,18
	.byte	'Ifx_RxSel_h',0,7,0,32
	.byte	'Ifx_RxSel',0,14,137,1,3
	.word	11111
	.byte	17,11,86,9,1,18
	.byte	'IfxCpu_Trap_MemoryManagement_Id_virtualAddressFill',0,0,18
	.byte	'IfxCpu_Trap_MemoryManagement_Id_virtualAddressProtection',0,1,0,32
	.byte	'IfxCpu_Trap_MemoryManagement_Id',0,11,90,3
	.word	11248
	.byte	17,11,95,9,1,18
	.byte	'IfxCpu_Trap_InternalProtection_Id_privilegeViolation',0,1,18
	.byte	'IfxCpu_Trap_InternalProtection_Id_memoryProtectionRead',0,2,18
	.byte	'IfxCpu_Trap_InternalProtection_Id_memoryProtectionWrite',0,3,18
	.byte	'IfxCpu_Trap_InternalProtection_Id_memoryProtectionExecute',0,4,18
	.byte	'IfxCpu_Trap_InternalProtection_Id_memoryProtectionPeripheralAccess',0,5,18
	.byte	'IfxCpu_Trap_InternalProtection_Id_memoryProtectionNullAddress',0,6,18
	.byte	'IfxCpu_Trap_InternalProtection_Id_globalRegisterWriteProtection',0,7,0,32
	.byte	'IfxCpu_Trap_InternalProtection_Id',0,11,104,3
	.word	11406
	.byte	17,11,109,9,1,18
	.byte	'IfxCpu_Trap_InstructionErrors_Id_illegalOpcode',0,1,18
	.byte	'IfxCpu_Trap_InstructionErrors_Id_unimplementedOpcode',0,2,18
	.byte	'IfxCpu_Trap_InstructionErrors_Id_invalidOperand',0,3,18
	.byte	'IfxCpu_Trap_InstructionErrors_Id_dataAddressAlignment',0,4,18
	.byte	'IfxCpu_Trap_InstructionErrors_Id_invalidMemoryAddress',0,5,0,32
	.byte	'IfxCpu_Trap_InstructionErrors_Id',0,11,116,3
	.word	11883
	.byte	17,11,121,9,1,18
	.byte	'IfxCpu_Trap_ContextManagement_Id_freeContextListDepletion',0,1,18
	.byte	'IfxCpu_Trap_ContextManagement_Id_callDepthOverflow',0,2,18
	.byte	'IfxCpu_Trap_ContextManagement_Id_callDepthUnderflow',0,3,18
	.byte	'IfxCpu_Trap_ContextManagement_Id_freeContextListUnderflow',0,4,18
	.byte	'IfxCpu_Trap_ContextManagement_Id_callStackUnderflow',0,5,18
	.byte	'IfxCpu_Trap_ContextManagement_Id_contextType',0,6,18
	.byte	'IfxCpu_Trap_ContextManagement_Id_nestingError',0,7,0,32
	.byte	'IfxCpu_Trap_ContextManagement_Id',0,11,130,1,3
	.word	12196
	.byte	17,11,135,1,9,1,18
	.byte	'IfxCpu_Trap_Bus_Id_programFetchSynchronousError',0,1,18
	.byte	'IfxCpu_Trap_Bus_Id_dataAccessSynchronousError',0,2,18
	.byte	'IfxCpu_Trap_Bus_Id_dataAccessAsynchronousError',0,3,18
	.byte	'IfxCpu_Trap_Bus_Id_CoprocessorTrapAsynchronousError',0,4,18
	.byte	'IfxCpu_Trap_Bus_Id_programMemoryIntegrityError',0,5,18
	.byte	'IfxCpu_Trap_Bus_Id_dataMemoryIntegrityError',0,6,18
	.byte	'IfxCpu_Trap_Bus_Id_temporalAsynchronousError',0,7,0,32
	.byte	'IfxCpu_Trap_Bus_Id',0,11,144,1,3
	.word	12620
	.byte	17,11,149,1,9,1,18
	.byte	'IfxCpu_Trap_Assertion_Id_arithmeticOverflow',0,1,18
	.byte	'IfxCpu_Trap_Assertion_Id_stickyArithmeticOverflow',0,2,0,32
	.byte	'IfxCpu_Trap_Assertion_Id',0,11,153,1,3
	.word	12998
	.byte	32
	.byte	'IfxCpu_Trap_SystemCall_Id',0,11,158,1,16
	.word	10998
	.byte	32
	.byte	'IfxCpu_Trap_NonMaskableInterrupt_Id',0,11,163,1,16
	.word	10998
	.byte	32
	.byte	'IfxCpu_Trap',0,11,189,1,3
	.word	10026
	.byte	32
	.byte	'Ifx_UReg_8Bit',0,15,96,24
	.word	629
	.byte	32
	.byte	'Ifx_UReg_32Bit',0,15,98,24
	.word	454
	.byte	32
	.byte	'Ifx_SReg_32Bit',0,15,101,24
	.word	470
	.byte	10
	.byte	'_Ifx_CPU_A_Bits',0,12,68,16,4,11
	.byte	'ADDR',0,4
	.word	477
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_A_Bits',0,12,71,3
	.word	13306
	.byte	10
	.byte	'_Ifx_CPU_BIV_Bits',0,12,74,16,4,11
	.byte	'VSS',0,4
	.word	477
	.byte	1,31,2,35,0,11
	.byte	'BIV',0,4
	.word	477
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_CPU_BIV_Bits',0,12,78,3
	.word	13367
	.byte	10
	.byte	'_Ifx_CPU_BLK_OMASK_Bits',0,12,81,16,4,11
	.byte	'reserved_0',0,4
	.word	477
	.byte	5,27,2,35,0,11
	.byte	'OMASK',0,4
	.word	477
	.byte	12,15,2,35,0,11
	.byte	'ONE',0,4
	.word	477
	.byte	11,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	477
	.byte	4,0,2,35,0,0,32
	.byte	'Ifx_CPU_BLK_OMASK_Bits',0,12,87,3
	.word	13446
	.byte	10
	.byte	'_Ifx_CPU_BLK_OTAR_Bits',0,12,90,16,4,11
	.byte	'reserved_0',0,4
	.word	477
	.byte	5,27,2,35,0,11
	.byte	'TBASE',0,4
	.word	477
	.byte	23,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	477
	.byte	4,0,2,35,0,0,32
	.byte	'Ifx_CPU_BLK_OTAR_Bits',0,12,95,3
	.word	13584
	.byte	10
	.byte	'_Ifx_CPU_BLK_RABR_Bits',0,12,98,16,4,11
	.byte	'reserved_0',0,4
	.word	477
	.byte	5,27,2,35,0,11
	.byte	'OBASE',0,4
	.word	477
	.byte	17,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	477
	.byte	2,8,2,35,0,11
	.byte	'OMEM',0,4
	.word	477
	.byte	4,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	477
	.byte	3,1,2,35,0,11
	.byte	'OVEN',0,4
	.word	477
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_BLK_RABR_Bits',0,12,106,3
	.word	13705
	.byte	10
	.byte	'_Ifx_CPU_BTV_Bits',0,12,109,16,4,11
	.byte	'reserved_0',0,4
	.word	477
	.byte	1,31,2,35,0,11
	.byte	'BTV',0,4
	.word	477
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_CPU_BTV_Bits',0,12,113,3
	.word	13881
	.byte	10
	.byte	'_Ifx_CPU_CCNT_Bits',0,12,116,16,4,11
	.byte	'COUNTVALUE',0,4
	.word	477
	.byte	31,1,2,35,0,11
	.byte	'SOVF',0,4
	.word	477
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_CCNT_Bits',0,12,120,3
	.word	13967
	.byte	10
	.byte	'_Ifx_CPU_CCTRL_Bits',0,12,123,16,4,11
	.byte	'CM',0,4
	.word	477
	.byte	1,31,2,35,0,11
	.byte	'CE',0,4
	.word	477
	.byte	1,30,2,35,0,11
	.byte	'M1',0,4
	.word	477
	.byte	3,27,2,35,0,11
	.byte	'M2',0,4
	.word	477
	.byte	3,24,2,35,0,11
	.byte	'M3',0,4
	.word	477
	.byte	3,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	477
	.byte	21,0,2,35,0,0,32
	.byte	'Ifx_CPU_CCTRL_Bits',0,12,131,1,3
	.word	14056
	.byte	10
	.byte	'_Ifx_CPU_COMPAT_Bits',0,12,134,1,16,4,11
	.byte	'reserved_0',0,4
	.word	477
	.byte	3,29,2,35,0,11
	.byte	'RM',0,4
	.word	477
	.byte	1,28,2,35,0,11
	.byte	'SP',0,4
	.word	477
	.byte	1,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	477
	.byte	27,0,2,35,0,0,32
	.byte	'Ifx_CPU_COMPAT_Bits',0,12,140,1,3
	.word	14203
	.byte	32
	.byte	'Ifx_CPU_CORE_ID_Bits',0,12,147,1,3
	.word	10624
	.byte	10
	.byte	'_Ifx_CPU_CPR_L_Bits',0,12,150,1,16,4,11
	.byte	'reserved_0',0,4
	.word	477
	.byte	5,27,2,35,0,11
	.byte	'LOWBND',0,4
	.word	477
	.byte	27,0,2,35,0,0,32
	.byte	'Ifx_CPU_CPR_L_Bits',0,12,154,1,3
	.word	14362
	.byte	10
	.byte	'_Ifx_CPU_CPR_U_Bits',0,12,157,1,16,4,11
	.byte	'reserved_0',0,4
	.word	477
	.byte	5,27,2,35,0,11
	.byte	'UPPBND',0,4
	.word	477
	.byte	27,0,2,35,0,0,32
	.byte	'Ifx_CPU_CPR_U_Bits',0,12,161,1,3
	.word	14457
	.byte	10
	.byte	'_Ifx_CPU_CPU_ID_Bits',0,12,164,1,16,4,11
	.byte	'MOD_REV',0,4
	.word	477
	.byte	8,24,2,35,0,11
	.byte	'MOD_32B',0,4
	.word	477
	.byte	8,16,2,35,0,11
	.byte	'MOD',0,4
	.word	477
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_CPU_CPU_ID_Bits',0,12,169,1,3
	.word	14552
	.byte	10
	.byte	'_Ifx_CPU_CPXE_Bits',0,12,172,1,16,4,11
	.byte	'XE_N',0,4
	.word	477
	.byte	10,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	477
	.byte	22,0,2,35,0,0,32
	.byte	'Ifx_CPU_CPXE_Bits',0,12,176,1,3
	.word	14662
	.byte	10
	.byte	'_Ifx_CPU_CREVT_Bits',0,12,179,1,16,4,11
	.byte	'EVTA',0,4
	.word	477
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	477
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	477
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	477
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	477
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	477
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_CPU_CREVT_Bits',0,12,187,1,3
	.word	14754
	.byte	10
	.byte	'_Ifx_CPU_CUS_ID_Bits',0,12,190,1,16,4,11
	.byte	'CID',0,4
	.word	477
	.byte	3,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	477
	.byte	29,0,2,35,0,0,32
	.byte	'Ifx_CPU_CUS_ID_Bits',0,12,194,1,3
	.word	14908
	.byte	10
	.byte	'_Ifx_CPU_D_Bits',0,12,197,1,16,4,11
	.byte	'DATA',0,4
	.word	477
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_D_Bits',0,12,200,1,3
	.word	15002
	.byte	10
	.byte	'_Ifx_CPU_DATR_Bits',0,12,203,1,16,4,11
	.byte	'reserved_0',0,4
	.word	477
	.byte	3,29,2,35,0,11
	.byte	'SBE',0,4
	.word	477
	.byte	1,28,2,35,0,11
	.byte	'reserved_4',0,4
	.word	477
	.byte	5,23,2,35,0,11
	.byte	'CWE',0,4
	.word	477
	.byte	1,22,2,35,0,11
	.byte	'CFE',0,4
	.word	477
	.byte	1,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	477
	.byte	3,18,2,35,0,11
	.byte	'SOE',0,4
	.word	477
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	477
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	477
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_CPU_DATR_Bits',0,12,214,1,3
	.word	15065
	.byte	10
	.byte	'_Ifx_CPU_DBGSR_Bits',0,12,217,1,16,4,11
	.byte	'DE',0,4
	.word	477
	.byte	1,31,2,35,0,11
	.byte	'HALT',0,4
	.word	477
	.byte	2,29,2,35,0,11
	.byte	'SIH',0,4
	.word	477
	.byte	1,28,2,35,0,11
	.byte	'SUSP',0,4
	.word	477
	.byte	1,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	477
	.byte	1,26,2,35,0,11
	.byte	'PREVSUSP',0,4
	.word	477
	.byte	1,25,2,35,0,11
	.byte	'PEVT',0,4
	.word	477
	.byte	1,24,2,35,0,11
	.byte	'EVTSRC',0,4
	.word	477
	.byte	5,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	477
	.byte	19,0,2,35,0,0,32
	.byte	'Ifx_CPU_DBGSR_Bits',0,12,228,1,3
	.word	15291
	.byte	10
	.byte	'_Ifx_CPU_DBGTCR_Bits',0,12,231,1,16,4,11
	.byte	'DTA',0,4
	.word	477
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	477
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_CPU_DBGTCR_Bits',0,12,235,1,3
	.word	15506
	.byte	10
	.byte	'_Ifx_CPU_DCON0_Bits',0,12,238,1,16,4,11
	.byte	'reserved_0',0,4
	.word	477
	.byte	1,31,2,35,0,11
	.byte	'DCBYP',0,4
	.word	477
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	477
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_CPU_DCON0_Bits',0,12,243,1,3
	.word	15600
	.byte	10
	.byte	'_Ifx_CPU_DCON2_Bits',0,12,246,1,16,4,11
	.byte	'DCACHE_SZE',0,4
	.word	477
	.byte	16,16,2,35,0,11
	.byte	'DSCRATCH_SZE',0,4
	.word	477
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_CPU_DCON2_Bits',0,12,250,1,3
	.word	15716
	.byte	10
	.byte	'_Ifx_CPU_DCX_Bits',0,12,253,1,16,4,11
	.byte	'reserved_0',0,4
	.word	477
	.byte	6,26,2,35,0,11
	.byte	'DCXVALUE',0,4
	.word	477
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_CPU_DCX_Bits',0,12,129,2,3
	.word	15817
	.byte	10
	.byte	'_Ifx_CPU_DEADD_Bits',0,12,132,2,16,4,11
	.byte	'ERROR_ADDRESS',0,4
	.word	477
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_DEADD_Bits',0,12,135,2,3
	.word	15910
	.byte	10
	.byte	'_Ifx_CPU_DIEAR_Bits',0,12,138,2,16,4,11
	.byte	'TA',0,4
	.word	477
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_DIEAR_Bits',0,12,141,2,3
	.word	15990
	.byte	10
	.byte	'_Ifx_CPU_DIETR_Bits',0,12,144,2,16,4,11
	.byte	'IED',0,4
	.word	477
	.byte	1,31,2,35,0,11
	.byte	'IE_T',0,4
	.word	477
	.byte	1,30,2,35,0,11
	.byte	'IE_C',0,4
	.word	477
	.byte	1,29,2,35,0,11
	.byte	'IE_S',0,4
	.word	477
	.byte	1,28,2,35,0,11
	.byte	'IE_BI',0,4
	.word	477
	.byte	1,27,2,35,0,11
	.byte	'E_INFO',0,4
	.word	477
	.byte	6,21,2,35,0,11
	.byte	'IE_UNC',0,4
	.word	477
	.byte	1,20,2,35,0,11
	.byte	'IE_SP',0,4
	.word	477
	.byte	1,19,2,35,0,11
	.byte	'IE_BS',0,4
	.word	477
	.byte	1,18,2,35,0,11
	.byte	'IE_DLMU',0,4
	.word	477
	.byte	1,17,2,35,0,11
	.byte	'IE_LPB',0,4
	.word	477
	.byte	1,16,2,35,0,11
	.byte	'IE_MTMV',0,4
	.word	477
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	477
	.byte	15,0,2,35,0,0,32
	.byte	'Ifx_CPU_DIETR_Bits',0,12,159,2,3
	.word	16059
	.byte	10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNACCENA_R_Bits',0,12,162,2,16,4,11
	.byte	'EN0',0,4
	.word	477
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	477
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	477
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	477
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	477
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	477
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	477
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	477
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	477
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	477
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	477
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	477
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	477
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	477
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	477
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	477
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	477
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	477
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	477
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	477
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	477
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	477
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	477
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	477
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	477
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	477
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	477
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	477
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	477
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	477
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	477
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	477
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENA_R_Bits',0,12,196,2,3
	.word	16343
	.byte	10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNACCENA_W_Bits',0,12,199,2,16,4,11
	.byte	'EN0',0,4
	.word	477
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	477
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	477
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	477
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	477
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	477
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	477
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	477
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	477
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	477
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	477
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	477
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	477
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	477
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	477
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	477
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	477
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	477
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	477
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	477
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	477
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	477
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	477
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	477
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	477
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	477
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	477
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	477
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	477
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	477
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	477
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	477
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENA_W_Bits',0,12,233,2,3
	.word	16934
	.byte	10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNACCENB_R_Bits',0,12,236,2,16,4,11
	.byte	'EN32',0,4
	.word	477
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	477
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	477
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	477
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	477
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	477
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	477
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	477
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	477
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	477
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	477
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	477
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	477
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	477
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	477
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	477
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	477
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	477
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	477
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	477
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	477
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	477
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	477
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	477
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	477
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	477
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	477
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	477
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	477
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	477
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	477
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	477
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENB_R_Bits',0,12,142,3,3
	.word	17525
	.byte	10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNACCENB_W_Bits',0,12,145,3,16,4,11
	.byte	'EN32',0,4
	.word	477
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	477
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	477
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	477
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	477
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	477
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	477
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	477
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	477
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	477
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	477
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	477
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	477
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	477
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	477
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	477
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	477
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	477
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	477
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	477
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	477
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	477
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	477
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	477
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	477
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	477
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	477
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	477
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	477
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	477
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	477
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	477
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENB_W_Bits',0,12,179,3,3
	.word	18126
	.byte	10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNLA_Bits',0,12,182,3,16,4,11
	.byte	'reserved_0',0,4
	.word	477
	.byte	5,27,2,35,0,11
	.byte	'ADDR',0,4
	.word	477
	.byte	27,0,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNLA_Bits',0,12,186,3,3
	.word	18727
	.byte	10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNUA_Bits',0,12,189,3,16,4,11
	.byte	'reserved_0',0,4
	.word	477
	.byte	5,27,2,35,0,11
	.byte	'ADDR',0,4
	.word	477
	.byte	27,0,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNUA_Bits',0,12,193,3,3
	.word	18842
	.byte	10
	.byte	'_Ifx_CPU_DMS_Bits',0,12,196,3,16,4,11
	.byte	'reserved_0',0,4
	.word	477
	.byte	1,31,2,35,0,11
	.byte	'DMSVALUE',0,4
	.word	477
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_CPU_DMS_Bits',0,12,200,3,3
	.word	18957
	.byte	10
	.byte	'_Ifx_CPU_DPRE_Bits',0,12,203,3,16,4,11
	.byte	'RE_N',0,4
	.word	477
	.byte	18,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	477
	.byte	14,0,2,35,0,0,32
	.byte	'Ifx_CPU_DPRE_Bits',0,12,207,3,3
	.word	19050
	.byte	10
	.byte	'_Ifx_CPU_DPR_L_Bits',0,12,210,3,16,4,11
	.byte	'reserved_0',0,4
	.word	477
	.byte	3,29,2,35,0,11
	.byte	'LOWBND',0,4
	.word	477
	.byte	29,0,2,35,0,0,32
	.byte	'Ifx_CPU_DPR_L_Bits',0,12,214,3,3
	.word	19142
	.byte	10
	.byte	'_Ifx_CPU_DPR_U_Bits',0,12,217,3,16,4,11
	.byte	'reserved_0',0,4
	.word	477
	.byte	3,29,2,35,0,11
	.byte	'UPPBND',0,4
	.word	477
	.byte	29,0,2,35,0,0,32
	.byte	'Ifx_CPU_DPR_U_Bits',0,12,221,3,3
	.word	19237
	.byte	10
	.byte	'_Ifx_CPU_DPWE_Bits',0,12,224,3,16,4,11
	.byte	'WE_N',0,4
	.word	477
	.byte	18,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	477
	.byte	14,0,2,35,0,0,32
	.byte	'Ifx_CPU_DPWE_Bits',0,12,228,3,3
	.word	19332
	.byte	10
	.byte	'_Ifx_CPU_DSTR_Bits',0,12,231,3,16,4,11
	.byte	'SRE',0,4
	.word	477
	.byte	1,31,2,35,0,11
	.byte	'GAE',0,4
	.word	477
	.byte	1,30,2,35,0,11
	.byte	'LBE',0,4
	.word	477
	.byte	1,29,2,35,0,11
	.byte	'DRE',0,4
	.word	477
	.byte	1,28,2,35,0,11
	.byte	'reserved_4',0,4
	.word	477
	.byte	2,26,2,35,0,11
	.byte	'CRE',0,4
	.word	477
	.byte	1,25,2,35,0,11
	.byte	'reserved_7',0,4
	.word	477
	.byte	7,18,2,35,0,11
	.byte	'DTME',0,4
	.word	477
	.byte	1,17,2,35,0,11
	.byte	'LOE',0,4
	.word	477
	.byte	1,16,2,35,0,11
	.byte	'SDE',0,4
	.word	477
	.byte	1,15,2,35,0,11
	.byte	'SCE',0,4
	.word	477
	.byte	1,14,2,35,0,11
	.byte	'CAC',0,4
	.word	477
	.byte	1,13,2,35,0,11
	.byte	'MPE',0,4
	.word	477
	.byte	1,12,2,35,0,11
	.byte	'CLE',0,4
	.word	477
	.byte	1,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	477
	.byte	3,8,2,35,0,11
	.byte	'ALN',0,4
	.word	477
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	477
	.byte	7,0,2,35,0,0,32
	.byte	'Ifx_CPU_DSTR_Bits',0,12,250,3,3
	.word	19424
	.byte	10
	.byte	'_Ifx_CPU_EXEVT_Bits',0,12,253,3,16,4,11
	.byte	'EVTA',0,4
	.word	477
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	477
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	477
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	477
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	477
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	477
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_CPU_EXEVT_Bits',0,12,133,4,3
	.word	19763
	.byte	10
	.byte	'_Ifx_CPU_FCX_Bits',0,12,136,4,16,4,11
	.byte	'FCXO',0,4
	.word	477
	.byte	16,16,2,35,0,11
	.byte	'FCXS',0,4
	.word	477
	.byte	4,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	477
	.byte	12,0,2,35,0,0,32
	.byte	'Ifx_CPU_FCX_Bits',0,12,141,4,3
	.word	19917
	.byte	10
	.byte	'_Ifx_CPU_FLASHCON0_Bits',0,12,144,4,16,4,11
	.byte	'TAG1',0,4
	.word	477
	.byte	6,26,2,35,0,11
	.byte	'reserved_6',0,4
	.word	477
	.byte	2,24,2,35,0,11
	.byte	'TAG2',0,4
	.word	477
	.byte	6,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	477
	.byte	2,16,2,35,0,11
	.byte	'TAG3',0,4
	.word	477
	.byte	6,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	477
	.byte	2,8,2,35,0,11
	.byte	'TAG4',0,4
	.word	477
	.byte	6,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	477
	.byte	2,0,2,35,0,0,32
	.byte	'Ifx_CPU_FLASHCON0_Bits',0,12,154,4,3
	.word	20023
	.byte	10
	.byte	'_Ifx_CPU_FLASHCON1_Bits',0,12,157,4,16,4,11
	.byte	'STALL',0,4
	.word	477
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	477
	.byte	15,16,2,35,0,11
	.byte	'MASKUECC',0,4
	.word	477
	.byte	2,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	477
	.byte	6,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	477
	.byte	2,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	477
	.byte	6,0,2,35,0,0,32
	.byte	'Ifx_CPU_FLASHCON1_Bits',0,12,165,4,3
	.word	20241
	.byte	10
	.byte	'_Ifx_CPU_FLASHCON2_Bits',0,12,168,4,16,4,11
	.byte	'RECDIS',0,4
	.word	477
	.byte	2,30,2,35,0,11
	.byte	'ECCCORDIS',0,4
	.word	477
	.byte	2,28,2,35,0,11
	.byte	'reserved_4',0,4
	.word	477
	.byte	4,24,2,35,0,11
	.byte	'HMARGIN',0,4
	.word	477
	.byte	2,22,2,35,0,11
	.byte	'MSEL',0,4
	.word	477
	.byte	2,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	477
	.byte	4,16,2,35,0,11
	.byte	'ECCSCLR',0,4
	.word	477
	.byte	2,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	477
	.byte	6,8,2,35,0,11
	.byte	'SBABCLR',0,4
	.word	477
	.byte	2,6,2,35,0,11
	.byte	'DBABCLR',0,4
	.word	477
	.byte	2,4,2,35,0,11
	.byte	'MBABCLR',0,4
	.word	477
	.byte	2,2,2,35,0,11
	.byte	'ZBABCLR',0,4
	.word	477
	.byte	2,0,2,35,0,0,32
	.byte	'Ifx_CPU_FLASHCON2_Bits',0,12,182,4,3
	.word	20432
	.byte	10
	.byte	'_Ifx_CPU_FLASHCON3_Bits',0,12,185,4,16,4,11
	.byte	'ECCERRINJ',0,4
	.word	477
	.byte	1,31,2,35,0,11
	.byte	'EDCERRINJ',0,4
	.word	477
	.byte	1,30,2,35,0,11
	.byte	'SBABERRINJ',0,4
	.word	477
	.byte	1,29,2,35,0,11
	.byte	'DBABERRINJ',0,4
	.word	477
	.byte	1,28,2,35,0,11
	.byte	'MBABERRINJ',0,4
	.word	477
	.byte	1,27,2,35,0,11
	.byte	'ZBABERRINJ',0,4
	.word	477
	.byte	1,26,2,35,0,11
	.byte	'SBERERRINJ',0,4
	.word	477
	.byte	1,25,2,35,0,11
	.byte	'DBERERRINJ',0,4
	.word	477
	.byte	1,24,2,35,0,11
	.byte	'NVMCERRINJ',0,4
	.word	477
	.byte	1,23,2,35,0,11
	.byte	'FLCONERRINJ',0,4
	.word	477
	.byte	1,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	477
	.byte	22,0,2,35,0,0,32
	.byte	'Ifx_CPU_FLASHCON3_Bits',0,12,198,4,3
	.word	20732
	.byte	10
	.byte	'_Ifx_CPU_FLASHCON4_Bits',0,12,201,4,16,4,11
	.byte	'DDIS',0,4
	.word	477
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	477
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_CPU_FLASHCON4_Bits',0,12,205,4,3
	.word	21037
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_CON_Bits',0,12,208,4,16,4,11
	.byte	'TST',0,4
	.word	477
	.byte	1,31,2,35,0,11
	.byte	'TCL',0,4
	.word	477
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	477
	.byte	6,24,2,35,0,11
	.byte	'RM',0,4
	.word	477
	.byte	2,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	477
	.byte	8,14,2,35,0,11
	.byte	'FXE',0,4
	.word	477
	.byte	1,13,2,35,0,11
	.byte	'FUE',0,4
	.word	477
	.byte	1,12,2,35,0,11
	.byte	'FZE',0,4
	.word	477
	.byte	1,11,2,35,0,11
	.byte	'FVE',0,4
	.word	477
	.byte	1,10,2,35,0,11
	.byte	'FIE',0,4
	.word	477
	.byte	1,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	477
	.byte	3,6,2,35,0,11
	.byte	'FX',0,4
	.word	477
	.byte	1,5,2,35,0,11
	.byte	'FU',0,4
	.word	477
	.byte	1,4,2,35,0,11
	.byte	'FZ',0,4
	.word	477
	.byte	1,3,2,35,0,11
	.byte	'FV',0,4
	.word	477
	.byte	1,2,2,35,0,11
	.byte	'FI',0,4
	.word	477
	.byte	1,1,2,35,0,11
	.byte	'reserved_31',0,4
	.word	477
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_CON_Bits',0,12,227,4,3
	.word	21138
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_OPC_Bits',0,12,230,4,16,4,11
	.byte	'OPC',0,4
	.word	477
	.byte	8,24,2,35,0,11
	.byte	'FMT',0,4
	.word	477
	.byte	1,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	477
	.byte	7,16,2,35,0,11
	.byte	'DREG',0,4
	.word	477
	.byte	4,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	477
	.byte	12,0,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_OPC_Bits',0,12,237,4,3
	.word	21487
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_PC_Bits',0,12,240,4,16,4,11
	.byte	'PC',0,4
	.word	477
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_PC_Bits',0,12,243,4,3
	.word	21647
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_SRC1_Bits',0,12,246,4,16,4,11
	.byte	'SRC1',0,4
	.word	477
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_SRC1_Bits',0,12,249,4,3
	.word	21728
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_SRC2_Bits',0,12,252,4,16,4,11
	.byte	'SRC2',0,4
	.word	477
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_SRC2_Bits',0,12,255,4,3
	.word	21815
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_SRC3_Bits',0,12,130,5,16,4,11
	.byte	'SRC3',0,4
	.word	477
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_SRC3_Bits',0,12,133,5,3
	.word	21902
	.byte	10
	.byte	'_Ifx_CPU_ICNT_Bits',0,12,136,5,16,4,11
	.byte	'COUNTVALUE',0,4
	.word	477
	.byte	31,1,2,35,0,11
	.byte	'SOVF',0,4
	.word	477
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_ICNT_Bits',0,12,140,5,3
	.word	21989
	.byte	10
	.byte	'_Ifx_CPU_ICR_Bits',0,12,143,5,16,4,11
	.byte	'CCPN',0,4
	.word	477
	.byte	8,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	477
	.byte	7,17,2,35,0,11
	.byte	'IE',0,4
	.word	477
	.byte	1,16,2,35,0,11
	.byte	'PIPN',0,4
	.word	477
	.byte	8,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	477
	.byte	8,0,2,35,0,0,32
	.byte	'Ifx_CPU_ICR_Bits',0,12,150,5,3
	.word	22080
	.byte	10
	.byte	'_Ifx_CPU_ISP_Bits',0,12,153,5,16,4,11
	.byte	'ISP',0,4
	.word	477
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_ISP_Bits',0,12,156,5,3
	.word	22222
	.byte	10
	.byte	'_Ifx_CPU_KRST0_Bits',0,12,159,5,16,4,11
	.byte	'RST',0,4
	.word	477
	.byte	1,31,2,35,0,11
	.byte	'RSTSTAT',0,4
	.word	477
	.byte	2,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	477
	.byte	29,0,2,35,0,0,32
	.byte	'Ifx_CPU_KRST0_Bits',0,12,164,5,3
	.word	22288
	.byte	10
	.byte	'_Ifx_CPU_KRST1_Bits',0,12,167,5,16,4,11
	.byte	'RST',0,4
	.word	477
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	477
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_CPU_KRST1_Bits',0,12,171,5,3
	.word	22399
	.byte	10
	.byte	'_Ifx_CPU_KRSTCLR_Bits',0,12,174,5,16,4,11
	.byte	'CLR',0,4
	.word	477
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	477
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_CPU_KRSTCLR_Bits',0,12,178,5,3
	.word	22491
	.byte	10
	.byte	'_Ifx_CPU_LCX_Bits',0,12,181,5,16,4,11
	.byte	'LCXO',0,4
	.word	477
	.byte	16,16,2,35,0,11
	.byte	'LCXS',0,4
	.word	477
	.byte	4,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	477
	.byte	12,0,2,35,0,0,32
	.byte	'Ifx_CPU_LCX_Bits',0,12,186,5,3
	.word	22587
	.byte	10
	.byte	'_Ifx_CPU_LPB_SPROT_ACCENA_R_Bits',0,12,189,5,16,4,11
	.byte	'EN0',0,4
	.word	477
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	477
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	477
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	477
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	477
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	477
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	477
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	477
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	477
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	477
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	477
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	477
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	477
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	477
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	477
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	477
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	477
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	477
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	477
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	477
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	477
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	477
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	477
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	477
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	477
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	477
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	477
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	477
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	477
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	477
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	477
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	477
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_LPB_SPROT_ACCENA_R_Bits',0,12,223,5,3
	.word	22693
	.byte	10
	.byte	'_Ifx_CPU_LPB_SPROT_ACCENB_R_Bits',0,12,226,5,16,4,11
	.byte	'EN32',0,4
	.word	477
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	477
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	477
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	477
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	477
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	477
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	477
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	477
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	477
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	477
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	477
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	477
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	477
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	477
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	477
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	477
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	477
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	477
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	477
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	477
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	477
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	477
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	477
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	477
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	477
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	477
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	477
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	477
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	477
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	477
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	477
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	477
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_LPB_SPROT_ACCENB_R_Bits',0,12,132,6,3
	.word	23276
	.byte	10
	.byte	'_Ifx_CPU_M1CNT_Bits',0,12,135,6,16,4,11
	.byte	'COUNTVALUE',0,4
	.word	477
	.byte	31,1,2,35,0,11
	.byte	'SOVF',0,4
	.word	477
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_M1CNT_Bits',0,12,139,6,3
	.word	23869
	.byte	10
	.byte	'_Ifx_CPU_M2CNT_Bits',0,12,142,6,16,4,11
	.byte	'COUNTVALUE',0,4
	.word	477
	.byte	31,1,2,35,0,11
	.byte	'SOVF',0,4
	.word	477
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_M2CNT_Bits',0,12,146,6,3
	.word	23962
	.byte	10
	.byte	'_Ifx_CPU_M3CNT_Bits',0,12,149,6,16,4,11
	.byte	'COUNTVALUE',0,4
	.word	477
	.byte	31,1,2,35,0,11
	.byte	'SOVF',0,4
	.word	477
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_M3CNT_Bits',0,12,153,6,3
	.word	24055
	.byte	10
	.byte	'_Ifx_CPU_OSEL_Bits',0,12,156,6,16,4,11
	.byte	'SHOVEN_X',0,4
	.word	477
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_OSEL_Bits',0,12,159,6,3
	.word	24148
	.byte	10
	.byte	'_Ifx_CPU_PC_Bits',0,12,162,6,16,4,11
	.byte	'reserved_0',0,4
	.word	477
	.byte	1,31,2,35,0,11
	.byte	'PC',0,4
	.word	477
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_CPU_PC_Bits',0,12,166,6,3
	.word	24221
	.byte	10
	.byte	'_Ifx_CPU_PCON0_Bits',0,12,169,6,16,4,11
	.byte	'reserved_0',0,4
	.word	477
	.byte	1,31,2,35,0,11
	.byte	'PCBYP',0,4
	.word	477
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	477
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_CPU_PCON0_Bits',0,12,174,6,3
	.word	24306
	.byte	10
	.byte	'_Ifx_CPU_PCON1_Bits',0,12,177,6,16,4,11
	.byte	'PCINV',0,4
	.word	477
	.byte	1,31,2,35,0,11
	.byte	'PBINV',0,4
	.word	477
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	477
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_CPU_PCON1_Bits',0,12,182,6,3
	.word	24422
	.byte	10
	.byte	'_Ifx_CPU_PCON2_Bits',0,12,185,6,16,4,11
	.byte	'PCACHE_SZE',0,4
	.word	477
	.byte	16,16,2,35,0,11
	.byte	'PSCRATCH_SZE',0,4
	.word	477
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_CPU_PCON2_Bits',0,12,189,6,3
	.word	24533
	.byte	10
	.byte	'_Ifx_CPU_PCXI_Bits',0,12,192,6,16,4,11
	.byte	'PCXO',0,4
	.word	477
	.byte	16,16,2,35,0,11
	.byte	'PCXS',0,4
	.word	477
	.byte	4,12,2,35,0,11
	.byte	'UL',0,4
	.word	477
	.byte	1,11,2,35,0,11
	.byte	'PIE',0,4
	.word	477
	.byte	1,10,2,35,0,11
	.byte	'PCPN',0,4
	.word	477
	.byte	8,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	477
	.byte	2,0,2,35,0,0,32
	.byte	'Ifx_CPU_PCXI_Bits',0,12,200,6,3
	.word	24634
	.byte	10
	.byte	'_Ifx_CPU_PIEAR_Bits',0,12,203,6,16,4,11
	.byte	'TA',0,4
	.word	477
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_PIEAR_Bits',0,12,206,6,3
	.word	24787
	.byte	10
	.byte	'_Ifx_CPU_PIETR_Bits',0,12,209,6,16,4,11
	.byte	'IED',0,4
	.word	477
	.byte	1,31,2,35,0,11
	.byte	'IE_T',0,4
	.word	477
	.byte	1,30,2,35,0,11
	.byte	'IE_C',0,4
	.word	477
	.byte	1,29,2,35,0,11
	.byte	'IE_S',0,4
	.word	477
	.byte	1,28,2,35,0,11
	.byte	'IE_BI',0,4
	.word	477
	.byte	1,27,2,35,0,11
	.byte	'E_INFO',0,4
	.word	477
	.byte	6,21,2,35,0,11
	.byte	'IE_UNC',0,4
	.word	477
	.byte	1,20,2,35,0,11
	.byte	'IE_SP',0,4
	.word	477
	.byte	1,19,2,35,0,11
	.byte	'IE_BS',0,4
	.word	477
	.byte	1,18,2,35,0,11
	.byte	'IE_ADDR',0,4
	.word	477
	.byte	1,17,2,35,0,11
	.byte	'IE_LPB',0,4
	.word	477
	.byte	1,16,2,35,0,11
	.byte	'IE_MTMV',0,4
	.word	477
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	477
	.byte	15,0,2,35,0,0,32
	.byte	'Ifx_CPU_PIETR_Bits',0,12,224,6,3
	.word	24856
	.byte	10
	.byte	'_Ifx_CPU_PMA0_Bits',0,12,227,6,16,4,11
	.byte	'DAC',0,4
	.word	477
	.byte	16,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	477
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_CPU_PMA0_Bits',0,12,231,6,3
	.word	25140
	.byte	10
	.byte	'_Ifx_CPU_PMA1_Bits',0,12,234,6,16,4,11
	.byte	'CAC',0,4
	.word	477
	.byte	16,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	477
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_CPU_PMA1_Bits',0,12,238,6,3
	.word	25231
	.byte	10
	.byte	'_Ifx_CPU_PMA2_Bits',0,12,241,6,16,4,11
	.byte	'PSI',0,4
	.word	477
	.byte	16,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	477
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_CPU_PMA2_Bits',0,12,245,6,3
	.word	25322
	.byte	10
	.byte	'_Ifx_CPU_PSTR_Bits',0,12,248,6,16,4,11
	.byte	'FRE',0,4
	.word	477
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	477
	.byte	1,30,2,35,0,11
	.byte	'FBE',0,4
	.word	477
	.byte	1,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	477
	.byte	9,20,2,35,0,11
	.byte	'FPE',0,4
	.word	477
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	477
	.byte	1,18,2,35,0,11
	.byte	'FME',0,4
	.word	477
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	477
	.byte	17,0,2,35,0,0,32
	.byte	'Ifx_CPU_PSTR_Bits',0,12,130,7,3
	.word	25413
	.byte	10
	.byte	'_Ifx_CPU_PSW_Bits',0,12,133,7,16,4,11
	.byte	'CDC',0,4
	.word	477
	.byte	7,25,2,35,0,11
	.byte	'CDE',0,4
	.word	477
	.byte	1,24,2,35,0,11
	.byte	'GW',0,4
	.word	477
	.byte	1,23,2,35,0,11
	.byte	'IS',0,4
	.word	477
	.byte	1,22,2,35,0,11
	.byte	'IO',0,4
	.word	477
	.byte	2,20,2,35,0,11
	.byte	'PRS',0,4
	.word	477
	.byte	2,18,2,35,0,11
	.byte	'S',0,4
	.word	477
	.byte	1,17,2,35,0,11
	.byte	'PRS2',0,4
	.word	477
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	477
	.byte	8,8,2,35,0,11
	.byte	'USB',0,4
	.word	477
	.byte	8,0,2,35,0,0,32
	.byte	'Ifx_CPU_PSW_Bits',0,12,145,7,3
	.word	25616
	.byte	10
	.byte	'_Ifx_CPU_RGN_ACCENA_Bits',0,12,148,7,16,4,11
	.byte	'EN0',0,4
	.word	477
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	477
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	477
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	477
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	477
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	477
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	477
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	477
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	477
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	477
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	477
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	477
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	477
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	477
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	477
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	477
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	477
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	477
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	477
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	477
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	477
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	477
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	477
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	477
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	477
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	477
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	477
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	477
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	477
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	477
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	477
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	477
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_RGN_ACCENA_Bits',0,12,182,7,3
	.word	25821
	.byte	10
	.byte	'_Ifx_CPU_RGN_ACCENB_Bits',0,12,185,7,16,4,11
	.byte	'EN32',0,4
	.word	477
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	477
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	477
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	477
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	477
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	477
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	477
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	477
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	477
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	477
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	477
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	477
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	477
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	477
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	477
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	477
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	477
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	477
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	477
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	477
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	477
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	477
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	477
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	477
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	477
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	477
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	477
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	477
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	477
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	477
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	477
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	477
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_RGN_ACCENB_Bits',0,12,219,7,3
	.word	26388
	.byte	10
	.byte	'_Ifx_CPU_RGN_LA_Bits',0,12,222,7,16,4,11
	.byte	'reserved_0',0,4
	.word	477
	.byte	5,27,2,35,0,11
	.byte	'ADDR',0,4
	.word	477
	.byte	27,0,2,35,0,0,32
	.byte	'Ifx_CPU_RGN_LA_Bits',0,12,226,7,3
	.word	26965
	.byte	10
	.byte	'_Ifx_CPU_RGN_UA_Bits',0,12,229,7,16,4,11
	.byte	'reserved_0',0,4
	.word	477
	.byte	5,27,2,35,0,11
	.byte	'ADDR',0,4
	.word	477
	.byte	27,0,2,35,0,0,32
	.byte	'Ifx_CPU_RGN_UA_Bits',0,12,233,7,3
	.word	27060
	.byte	10
	.byte	'_Ifx_CPU_SEGEN_Bits',0,12,236,7,16,4,11
	.byte	'ADFLIP',0,4
	.word	477
	.byte	8,24,2,35,0,11
	.byte	'ADTYPE',0,4
	.word	477
	.byte	2,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	477
	.byte	21,1,2,35,0,11
	.byte	'AE',0,4
	.word	477
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_SEGEN_Bits',0,12,242,7,3
	.word	27155
	.byte	10
	.byte	'_Ifx_CPU_SFR_SPROT_ACCENA_W_Bits',0,12,245,7,16,4,11
	.byte	'EN0',0,4
	.word	477
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	477
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	477
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	477
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	477
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	477
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	477
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	477
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	477
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	477
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	477
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	477
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	477
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	477
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	477
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	477
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	477
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	477
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	477
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	477
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	477
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	477
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	477
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	477
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	477
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	477
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	477
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	477
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	477
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	477
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	477
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	477
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_SFR_SPROT_ACCENA_W_Bits',0,12,151,8,3
	.word	27283
	.byte	10
	.byte	'_Ifx_CPU_SFR_SPROT_ACCENB_W_Bits',0,12,154,8,16,4,11
	.byte	'EN32',0,4
	.word	477
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	477
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	477
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	477
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	477
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	477
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	477
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	477
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	477
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	477
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	477
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	477
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	477
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	477
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	477
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	477
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	477
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	477
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	477
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	477
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	477
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	477
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	477
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	477
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	477
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	477
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	477
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	477
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	477
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	477
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	477
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	477
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_SFR_SPROT_ACCENB_W_Bits',0,12,188,8,3
	.word	27866
	.byte	10
	.byte	'_Ifx_CPU_SMACON_Bits',0,12,191,8,16,4,11
	.byte	'reserved_0',0,4
	.word	477
	.byte	24,8,2,35,0,11
	.byte	'IODT',0,4
	.word	477
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	477
	.byte	7,0,2,35,0,0,32
	.byte	'Ifx_CPU_SMACON_Bits',0,12,196,8,3
	.word	28459
	.byte	10
	.byte	'_Ifx_CPU_SPR_SPROT_RGNACCENA_R_Bits',0,12,199,8,16,4,11
	.byte	'EN0',0,4
	.word	477
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	477
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	477
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	477
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	477
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	477
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	477
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	477
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	477
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	477
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	477
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	477
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	477
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	477
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	477
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	477
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	477
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	477
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	477
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	477
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	477
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	477
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	477
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	477
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	477
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	477
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	477
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	477
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	477
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	477
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	477
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	477
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_SPR_SPROT_RGNACCENA_R_Bits',0,12,233,8,3
	.word	28577
	.byte	10
	.byte	'_Ifx_CPU_SPR_SPROT_RGNACCENB_R_Bits',0,12,236,8,16,4,11
	.byte	'EN32',0,4
	.word	477
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	477
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	477
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	477
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	477
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	477
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	477
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	477
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	477
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	477
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	477
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	477
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	477
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	477
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	477
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	477
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	477
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	477
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	477
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	477
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	477
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	477
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	477
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	477
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	477
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	477
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	477
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	477
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	477
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	477
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	477
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	477
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_SPR_SPROT_RGNACCENB_R_Bits',0,12,142,9,3
	.word	29166
	.byte	10
	.byte	'_Ifx_CPU_SWEVT_Bits',0,12,145,9,16,4,11
	.byte	'EVTA',0,4
	.word	477
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	477
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	477
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	477
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	477
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	477
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_CPU_SWEVT_Bits',0,12,153,9,3
	.word	29765
	.byte	10
	.byte	'_Ifx_CPU_SYSCON_Bits',0,12,156,9,16,4,11
	.byte	'FCDSF',0,4
	.word	477
	.byte	1,31,2,35,0,11
	.byte	'PROTEN',0,4
	.word	477
	.byte	1,30,2,35,0,11
	.byte	'TPROTEN',0,4
	.word	477
	.byte	1,29,2,35,0,11
	.byte	'IS',0,4
	.word	477
	.byte	1,28,2,35,0,11
	.byte	'TS',0,4
	.word	477
	.byte	1,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	477
	.byte	3,24,2,35,0,11
	.byte	'ESDIS',0,4
	.word	477
	.byte	1,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	477
	.byte	7,16,2,35,0,11
	.byte	'U1_IED',0,4
	.word	477
	.byte	1,15,2,35,0,11
	.byte	'U1_IOS',0,4
	.word	477
	.byte	1,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	477
	.byte	6,8,2,35,0,11
	.byte	'BHALT',0,4
	.word	477
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	477
	.byte	7,0,2,35,0,0,32
	.byte	'Ifx_CPU_SYSCON_Bits',0,12,171,9,3
	.word	29919
	.byte	10
	.byte	'_Ifx_CPU_TASK_ASI_Bits',0,12,174,9,16,4,11
	.byte	'ASI',0,4
	.word	477
	.byte	5,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	477
	.byte	27,0,2,35,0,0,32
	.byte	'Ifx_CPU_TASK_ASI_Bits',0,12,178,9,3
	.word	30218
	.byte	10
	.byte	'_Ifx_CPU_TPS_CON_Bits',0,12,181,9,16,4,11
	.byte	'TEXP0',0,4
	.word	477
	.byte	1,31,2,35,0,11
	.byte	'TEXP1',0,4
	.word	477
	.byte	1,30,2,35,0,11
	.byte	'TEXP2',0,4
	.word	477
	.byte	1,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	477
	.byte	13,16,2,35,0,11
	.byte	'TTRAP',0,4
	.word	477
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	477
	.byte	15,0,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_CON_Bits',0,12,189,9,3
	.word	30316
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_CLASS_EN_Bits',0,12,192,9,16,4,11
	.byte	'EXTIM_CLASS_EN',0,4
	.word	477
	.byte	8,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	477
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_CLASS_EN_Bits',0,12,196,9,3
	.word	30488
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_ENTRY_CVAL_Bits',0,12,199,9,16,4,11
	.byte	'ENTRY_CVAL',0,4
	.word	477
	.byte	12,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	477
	.byte	20,0,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_ENTRY_CVAL_Bits',0,12,203,9,3
	.word	30617
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_ENTRY_LVAL_Bits',0,12,206,9,16,4,11
	.byte	'reserved_0',0,4
	.word	477
	.byte	4,28,2,35,0,11
	.byte	'ENTRY_LVAL',0,4
	.word	477
	.byte	8,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	477
	.byte	20,0,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_ENTRY_LVAL_Bits',0,12,211,9,3
	.word	30747
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_EXIT_CVAL_Bits',0,12,214,9,16,4,11
	.byte	'EXIT_CVAL',0,4
	.word	477
	.byte	24,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	477
	.byte	8,0,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_EXIT_CVAL_Bits',0,12,218,9,3
	.word	30899
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_EXIT_LVAL_Bits',0,12,221,9,16,4,11
	.byte	'reserved_0',0,4
	.word	477
	.byte	4,28,2,35,0,11
	.byte	'EXIT_LVAL',0,4
	.word	477
	.byte	20,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	477
	.byte	8,0,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_EXIT_LVAL_Bits',0,12,226,9,3
	.word	31026
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_FCX_Bits',0,12,229,9,16,4,11
	.byte	'EXIT_FCX',0,4
	.word	477
	.byte	20,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	477
	.byte	12,0,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_FCX_Bits',0,12,233,9,3
	.word	31175
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_STAT_Bits',0,12,236,9,16,4,11
	.byte	'EXIT_TIN',0,4
	.word	477
	.byte	8,24,2,35,0,11
	.byte	'EXIT_CLASS',0,4
	.word	477
	.byte	3,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	477
	.byte	4,17,2,35,0,11
	.byte	'EXIT_AT',0,4
	.word	477
	.byte	1,16,2,35,0,11
	.byte	'ENTRY_TIN',0,4
	.word	477
	.byte	8,8,2,35,0,11
	.byte	'ENTRY_CLASS',0,4
	.word	477
	.byte	3,5,2,35,0,11
	.byte	'reserved_27',0,4
	.word	477
	.byte	4,1,2,35,0,11
	.byte	'ENTRY_AT',0,4
	.word	477
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_STAT_Bits',0,12,246,9,3
	.word	31289
	.byte	10
	.byte	'_Ifx_CPU_TPS_TIMER_Bits',0,12,249,9,16,4,11
	.byte	'TIMER',0,4
	.word	477
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_TIMER_Bits',0,12,252,9,3
	.word	31533
	.byte	10
	.byte	'_Ifx_CPU_TRIG_ACC_Bits',0,12,255,9,16,4,11
	.byte	'T0',0,4
	.word	477
	.byte	1,31,2,35,0,11
	.byte	'T1',0,4
	.word	477
	.byte	1,30,2,35,0,11
	.byte	'T2',0,4
	.word	477
	.byte	1,29,2,35,0,11
	.byte	'T3',0,4
	.word	477
	.byte	1,28,2,35,0,11
	.byte	'T4',0,4
	.word	477
	.byte	1,27,2,35,0,11
	.byte	'T5',0,4
	.word	477
	.byte	1,26,2,35,0,11
	.byte	'T6',0,4
	.word	477
	.byte	1,25,2,35,0,11
	.byte	'T7',0,4
	.word	477
	.byte	1,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	477
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_CPU_TRIG_ACC_Bits',0,12,138,10,3
	.word	31613
	.byte	10
	.byte	'_Ifx_CPU_TR_ADR_Bits',0,12,141,10,16,4,11
	.byte	'ADDR',0,4
	.word	477
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_TR_ADR_Bits',0,12,144,10,3
	.word	31808
	.byte	10
	.byte	'_Ifx_CPU_TR_EVT_Bits',0,12,147,10,16,4,11
	.byte	'EVTA',0,4
	.word	477
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	477
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	477
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	477
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	477
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	477
	.byte	4,20,2,35,0,11
	.byte	'TYP',0,4
	.word	477
	.byte	1,19,2,35,0,11
	.byte	'RNG',0,4
	.word	477
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	477
	.byte	1,17,2,35,0,11
	.byte	'ASI_EN',0,4
	.word	477
	.byte	1,16,2,35,0,11
	.byte	'ASI',0,4
	.word	477
	.byte	5,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	477
	.byte	6,5,2,35,0,11
	.byte	'AST',0,4
	.word	477
	.byte	1,4,2,35,0,11
	.byte	'ALD',0,4
	.word	477
	.byte	1,3,2,35,0,11
	.byte	'reserved_29',0,4
	.word	477
	.byte	3,0,2,35,0,0,32
	.byte	'Ifx_CPU_TR_EVT_Bits',0,12,164,10,3
	.word	31881
	.byte	12,12,172,10,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13306
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_A',0,12,177,10,3
	.word	32199
	.byte	12,12,180,10,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13367
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_BIV',0,12,185,10,3
	.word	32258
	.byte	12,12,188,10,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13446
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_BLK_OMASK',0,12,193,10,3
	.word	32319
	.byte	12,12,196,10,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13584
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_BLK_OTAR',0,12,201,10,3
	.word	32386
	.byte	12,12,204,10,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13705
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_BLK_RABR',0,12,209,10,3
	.word	32452
	.byte	12,12,212,10,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13881
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_BTV',0,12,217,10,3
	.word	32518
	.byte	12,12,220,10,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13967
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_CCNT',0,12,225,10,3
	.word	32579
	.byte	12,12,228,10,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14056
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_CCTRL',0,12,233,10,3
	.word	32641
	.byte	12,12,236,10,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14203
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_COMPAT',0,12,241,10,3
	.word	32704
	.byte	32
	.byte	'Ifx_CPU_CORE_ID',0,12,249,10,3
	.word	10694
	.byte	12,12,252,10,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14362
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_CPR_L',0,12,129,11,3
	.word	32793
	.byte	12,12,132,11,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14457
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_CPR_U',0,12,137,11,3
	.word	32856
	.byte	12,12,140,11,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14552
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_CPU_ID',0,12,145,11,3
	.word	32919
	.byte	12,12,148,11,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14662
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_CPXE',0,12,153,11,3
	.word	32983
	.byte	12,12,156,11,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14754
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_CREVT',0,12,161,11,3
	.word	33045
	.byte	12,12,164,11,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14908
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_CUS_ID',0,12,169,11,3
	.word	33108
	.byte	12,12,172,11,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15002
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_D',0,12,177,11,3
	.word	33172
	.byte	12,12,180,11,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15065
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DATR',0,12,185,11,3
	.word	33231
	.byte	12,12,188,11,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15291
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DBGSR',0,12,193,11,3
	.word	33293
	.byte	12,12,196,11,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15506
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DBGTCR',0,12,201,11,3
	.word	33356
	.byte	12,12,204,11,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15600
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DCON0',0,12,209,11,3
	.word	33420
	.byte	12,12,212,11,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15716
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DCON2',0,12,217,11,3
	.word	33483
	.byte	12,12,220,11,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15817
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DCX',0,12,225,11,3
	.word	33546
	.byte	12,12,228,11,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15910
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DEADD',0,12,233,11,3
	.word	33607
	.byte	12,12,236,11,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15990
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DIEAR',0,12,241,11,3
	.word	33670
	.byte	12,12,244,11,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16059
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DIETR',0,12,249,11,3
	.word	33733
	.byte	12,12,252,11,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16343
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENA_R',0,12,129,12,3
	.word	33796
	.byte	12,12,132,12,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16934
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENA_W',0,12,137,12,3
	.word	33876
	.byte	12,12,140,12,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17525
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENB_R',0,12,145,12,3
	.word	33956
	.byte	12,12,148,12,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18126
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENB_W',0,12,153,12,3
	.word	34036
	.byte	12,12,156,12,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18727
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNLA',0,12,161,12,3
	.word	34116
	.byte	12,12,164,12,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18842
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DLMU_SPROT_RGNUA',0,12,169,12,3
	.word	34190
	.byte	12,12,172,12,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18957
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DMS',0,12,177,12,3
	.word	34264
	.byte	12,12,180,12,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19050
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DPRE',0,12,185,12,3
	.word	34325
	.byte	12,12,188,12,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19142
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DPR_L',0,12,193,12,3
	.word	34387
	.byte	12,12,196,12,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19237
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DPR_U',0,12,201,12,3
	.word	34450
	.byte	12,12,204,12,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19332
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DPWE',0,12,209,12,3
	.word	34513
	.byte	12,12,212,12,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19424
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DSTR',0,12,217,12,3
	.word	34575
	.byte	12,12,220,12,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19763
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_EXEVT',0,12,225,12,3
	.word	34637
	.byte	12,12,228,12,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19917
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FCX',0,12,233,12,3
	.word	34700
	.byte	12,12,236,12,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20023
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FLASHCON0',0,12,241,12,3
	.word	34761
	.byte	12,12,244,12,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20241
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FLASHCON1',0,12,249,12,3
	.word	34828
	.byte	12,12,252,12,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20432
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FLASHCON2',0,12,129,13,3
	.word	34895
	.byte	12,12,132,13,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20732
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FLASHCON3',0,12,137,13,3
	.word	34962
	.byte	12,12,140,13,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	21037
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FLASHCON4',0,12,145,13,3
	.word	35029
	.byte	12,12,148,13,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	21138
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_CON',0,12,153,13,3
	.word	35096
	.byte	12,12,156,13,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	21487
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_OPC',0,12,161,13,3
	.word	35166
	.byte	12,12,164,13,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	21647
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_PC',0,12,169,13,3
	.word	35236
	.byte	12,12,172,13,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	21728
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_SRC1',0,12,177,13,3
	.word	35305
	.byte	12,12,180,13,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	21815
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_SRC2',0,12,185,13,3
	.word	35376
	.byte	12,12,188,13,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	21902
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_SRC3',0,12,193,13,3
	.word	35447
	.byte	12,12,196,13,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	21989
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_ICNT',0,12,201,13,3
	.word	35518
	.byte	12,12,204,13,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	22080
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_ICR',0,12,209,13,3
	.word	35580
	.byte	12,12,212,13,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	22222
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_ISP',0,12,217,13,3
	.word	35641
	.byte	12,12,220,13,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	22288
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_KRST0',0,12,225,13,3
	.word	35702
	.byte	12,12,228,13,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	22399
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_KRST1',0,12,233,13,3
	.word	35765
	.byte	12,12,236,13,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	22491
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_KRSTCLR',0,12,241,13,3
	.word	35828
	.byte	12,12,244,13,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	22587
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_LCX',0,12,249,13,3
	.word	35893
	.byte	12,12,252,13,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	22693
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_LPB_SPROT_ACCENA_R',0,12,129,14,3
	.word	35954
	.byte	12,12,132,14,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	23276
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_LPB_SPROT_ACCENB_R',0,12,137,14,3
	.word	36030
	.byte	12,12,140,14,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	23869
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_M1CNT',0,12,145,14,3
	.word	36106
	.byte	12,12,148,14,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	23962
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_M2CNT',0,12,153,14,3
	.word	36169
	.byte	12,12,156,14,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24055
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_M3CNT',0,12,161,14,3
	.word	36232
	.byte	12,12,164,14,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24148
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_OSEL',0,12,169,14,3
	.word	36295
	.byte	12,12,172,14,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24221
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PC',0,12,177,14,3
	.word	36357
	.byte	12,12,180,14,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24306
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PCON0',0,12,185,14,3
	.word	36417
	.byte	12,12,188,14,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24422
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PCON1',0,12,193,14,3
	.word	36480
	.byte	12,12,196,14,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24533
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PCON2',0,12,201,14,3
	.word	36543
	.byte	12,12,204,14,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24634
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PCXI',0,12,209,14,3
	.word	36606
	.byte	12,12,212,14,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24787
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PIEAR',0,12,217,14,3
	.word	36668
	.byte	12,12,220,14,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24856
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PIETR',0,12,225,14,3
	.word	36731
	.byte	12,12,228,14,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25140
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PMA0',0,12,233,14,3
	.word	36794
	.byte	12,12,236,14,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25231
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PMA1',0,12,241,14,3
	.word	36856
	.byte	12,12,244,14,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25322
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PMA2',0,12,249,14,3
	.word	36918
	.byte	12,12,252,14,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25413
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PSTR',0,12,129,15,3
	.word	36980
	.byte	12,12,132,15,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25616
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PSW',0,12,137,15,3
	.word	37042
	.byte	12,12,140,15,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25821
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_RGN_ACCENA',0,12,145,15,3
	.word	37103
	.byte	12,12,148,15,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	26388
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_RGN_ACCENB',0,12,153,15,3
	.word	37171
	.byte	12,12,156,15,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	26965
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_RGN_LA',0,12,161,15,3
	.word	37239
	.byte	12,12,164,15,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27060
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_RGN_UA',0,12,169,15,3
	.word	37303
	.byte	12,12,172,15,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27155
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_SEGEN',0,12,177,15,3
	.word	37367
	.byte	12,12,180,15,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27283
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_SFR_SPROT_ACCENA_W',0,12,185,15,3
	.word	37430
	.byte	12,12,188,15,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27866
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_SFR_SPROT_ACCENB_W',0,12,193,15,3
	.word	37506
	.byte	12,12,196,15,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28459
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_SMACON',0,12,201,15,3
	.word	37582
	.byte	12,12,204,15,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28577
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_SPR_SPROT_RGNACCENA_R',0,12,209,15,3
	.word	37646
	.byte	12,12,212,15,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29166
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_SPR_SPROT_RGNACCENB_R',0,12,217,15,3
	.word	37725
	.byte	12,12,220,15,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29765
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_SWEVT',0,12,225,15,3
	.word	37804
	.byte	12,12,228,15,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29919
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_SYSCON',0,12,233,15,3
	.word	37867
	.byte	12,12,236,15,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30218
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TASK_ASI',0,12,241,15,3
	.word	37931
	.byte	12,12,244,15,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30316
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_CON',0,12,249,15,3
	.word	37997
	.byte	12,12,252,15,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30488
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_CLASS_EN',0,12,129,16,3
	.word	38062
	.byte	12,12,132,16,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30617
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_ENTRY_CVAL',0,12,137,16,3
	.word	38138
	.byte	12,12,140,16,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30747
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_ENTRY_LVAL',0,12,145,16,3
	.word	38216
	.byte	12,12,148,16,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30899
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_EXIT_CVAL',0,12,153,16,3
	.word	38294
	.byte	12,12,156,16,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	31026
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_EXIT_LVAL',0,12,161,16,3
	.word	38371
	.byte	12,12,164,16,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	31175
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_FCX',0,12,169,16,3
	.word	38448
	.byte	12,12,172,16,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	31289
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_EXTIM_STAT',0,12,177,16,3
	.word	38519
	.byte	12,12,180,16,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	31533
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_TIMER',0,12,185,16,3
	.word	38591
	.byte	12,12,188,16,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	31613
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TRIG_ACC',0,12,193,16,3
	.word	38658
	.byte	12,12,196,16,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	31808
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TR_ADR',0,12,201,16,3
	.word	38724
	.byte	12,12,204,16,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	31881
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TR_EVT',0,12,209,16,3
	.word	38788
	.byte	10
	.byte	'_Ifx_CPU_RGN',0,12,221,16,25,16,13
	.byte	'LA',0
	.word	37239
	.byte	4,2,35,0,13
	.byte	'UA',0
	.word	37303
	.byte	4,2,35,4,13
	.byte	'ACCENA',0
	.word	37103
	.byte	4,2,35,8,13
	.byte	'ACCENB',0
	.word	37171
	.byte	4,2,35,12,0,14
	.word	38852
	.byte	32
	.byte	'Ifx_CPU_RGN',0,12,227,16,3
	.word	38928
	.byte	10
	.byte	'_Ifx_CPU_BLK',0,12,242,16,25,12,13
	.byte	'RABR',0
	.word	32452
	.byte	4,2,35,0,13
	.byte	'OTAR',0
	.word	32386
	.byte	4,2,35,4,13
	.byte	'OMASK',0
	.word	32319
	.byte	4,2,35,8,0,14
	.word	38954
	.byte	32
	.byte	'Ifx_CPU_BLK',0,12,247,16,3
	.word	39017
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP',0,12,134,17,25,28,13
	.byte	'CON',0
	.word	35096
	.byte	4,2,35,0,13
	.byte	'PC',0
	.word	35236
	.byte	4,2,35,4,13
	.byte	'OPC',0
	.word	35166
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	2650
	.byte	4,2,35,12,13
	.byte	'SRC1',0
	.word	35305
	.byte	4,2,35,16,13
	.byte	'SRC2',0
	.word	35376
	.byte	4,2,35,20,13
	.byte	'SRC3',0
	.word	35447
	.byte	4,2,35,24,0,14
	.word	39043
	.byte	32
	.byte	'Ifx_CPU_FPU_TRAP',0,12,143,17,3
	.word	39168
	.byte	10
	.byte	'_Ifx_CPU_DPR',0,12,158,17,25,8,13
	.byte	'L',0
	.word	34387
	.byte	4,2,35,0,13
	.byte	'U',0
	.word	34450
	.byte	4,2,35,4,0,14
	.word	39199
	.byte	32
	.byte	'Ifx_CPU_DPR',0,12,162,17,3
	.word	39241
	.byte	10
	.byte	'_Ifx_CPU_CPR',0,12,177,17,25,8,13
	.byte	'L',0
	.word	32793
	.byte	4,2,35,0,13
	.byte	'U',0
	.word	32856
	.byte	4,2,35,4,0,14
	.word	39267
	.byte	32
	.byte	'Ifx_CPU_CPR',0,12,181,17,3
	.word	39309
	.byte	15,12
	.word	38591
	.byte	16,2,0,10
	.byte	'_Ifx_CPU_TPS',0,12,196,17,25,16,13
	.byte	'CON',0
	.word	37997
	.byte	4,2,35,0,13
	.byte	'TIMER',0
	.word	39335
	.byte	12,2,35,4,0,14
	.word	39344
	.byte	32
	.byte	'Ifx_CPU_TPS',0,12,200,17,3
	.word	39392
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM',0,12,215,17,25,28,13
	.byte	'ENTRY_LVAL',0
	.word	38216
	.byte	4,2,35,0,13
	.byte	'ENTRY_CVAL',0
	.word	38138
	.byte	4,2,35,4,13
	.byte	'EXIT_LVAL',0
	.word	38371
	.byte	4,2,35,8,13
	.byte	'EXIT_CVAL',0
	.word	38294
	.byte	4,2,35,12,13
	.byte	'CLASS_EN',0
	.word	38062
	.byte	4,2,35,16,13
	.byte	'STAT',0
	.word	38519
	.byte	4,2,35,20,13
	.byte	'FCX',0
	.word	38448
	.byte	4,2,35,24,0,14
	.word	39418
	.byte	32
	.byte	'Ifx_CPU_TPS_EXTIM',0,12,224,17,3
	.word	39567
	.byte	10
	.byte	'_Ifx_CPU_TR',0,12,239,17,25,8,13
	.byte	'EVT',0
	.word	38788
	.byte	4,2,35,0,13
	.byte	'ADR',0
	.word	38724
	.byte	4,2,35,4,0,14
	.word	39599
	.byte	32
	.byte	'Ifx_CPU_TR',0,12,243,17,3
	.word	39644
	.byte	15,128,34
	.word	629
	.byte	16,255,33,0,15,236,253,2
	.word	629
	.byte	16,235,253,2,0,15,244,31
	.word	629
	.byte	16,243,31,0,15,128,1
	.word	38852
	.byte	16,7,0,14
	.word	39704
	.byte	15,232,1
	.word	629
	.byte	16,231,1,0,15,128,48
	.word	629
	.byte	16,255,47,0,15,128,3
	.word	38954
	.byte	16,31,0,14
	.word	39741
	.byte	15,160,39
	.word	629
	.byte	16,159,39,0,15,208,223,1
	.word	629
	.byte	16,207,223,1,0,15,248,1
	.word	629
	.byte	16,247,1,0,15,244,29
	.word	629
	.byte	16,243,29,0,15,188,3
	.word	629
	.byte	16,187,3,0,15,232,3
	.word	629
	.byte	16,231,3,0,15,252,23
	.word	629
	.byte	16,251,23,0,14
	.word	39043
	.byte	15,228,63
	.word	629
	.byte	16,227,63,0,15,144,1
	.word	39199
	.byte	16,17,0,14
	.word	39851
	.byte	15,240,30
	.word	629
	.byte	16,239,30,0,15,80
	.word	39267
	.byte	16,9,0,14
	.word	39877
	.byte	15,176,31
	.word	629
	.byte	16,175,31,0,15,16
	.word	629
	.byte	16,15,0,15,152,7
	.word	629
	.byte	16,151,7,0,14
	.word	39344
	.byte	15,48
	.word	629
	.byte	16,47,0,14
	.word	39418
	.byte	15,164,23
	.word	629
	.byte	16,163,23,0,15,64
	.word	39599
	.byte	16,7,0,14
	.word	39952
	.byte	15,192,23
	.word	629
	.byte	16,191,23,0,15,28
	.word	629
	.byte	16,27,0,15,180,1
	.word	629
	.byte	16,179,1,0,15,172,1
	.word	629
	.byte	16,171,1,0,15,64
	.word	33172
	.byte	16,15,0,15,64
	.word	629
	.byte	16,63,0,15,64
	.word	32199
	.byte	16,15,0,10
	.byte	'_Ifx_CPU',0,12,130,18,25,128,128,8,13
	.byte	'reserved_0',0
	.word	39669
	.byte	128,34,2,35,0,13
	.byte	'FLASHCON0',0
	.word	34761
	.byte	4,3,35,128,34,13
	.byte	'FLASHCON1',0
	.word	34828
	.byte	4,3,35,132,34,13
	.byte	'FLASHCON2',0
	.word	34895
	.byte	4,3,35,136,34,13
	.byte	'FLASHCON3',0
	.word	34962
	.byte	4,3,35,140,34,13
	.byte	'FLASHCON4',0
	.word	35029
	.byte	4,3,35,144,34,13
	.byte	'reserved_1114',0
	.word	39680
	.byte	236,253,2,3,35,148,34,13
	.byte	'KRST0',0
	.word	35702
	.byte	4,4,35,128,160,3,13
	.byte	'KRST1',0
	.word	35765
	.byte	4,4,35,132,160,3,13
	.byte	'KRSTCLR',0
	.word	35828
	.byte	4,4,35,136,160,3,13
	.byte	'reserved_D00C',0
	.word	39693
	.byte	244,31,4,35,140,160,3,13
	.byte	'RGN',0
	.word	39714
	.byte	128,1,4,35,128,192,3,13
	.byte	'reserved_E080',0
	.word	4470
	.byte	8,4,35,128,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R0',0
	.word	37646
	.byte	4,4,35,136,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R0',0
	.word	37725
	.byte	4,4,35,140,193,3,13
	.byte	'reserved_E090',0
	.word	4470
	.byte	8,4,35,144,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R1',0
	.word	37646
	.byte	4,4,35,152,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R1',0
	.word	37725
	.byte	4,4,35,156,193,3,13
	.byte	'reserved_E0A0',0
	.word	4470
	.byte	8,4,35,160,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R2',0
	.word	37646
	.byte	4,4,35,168,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R2',0
	.word	37725
	.byte	4,4,35,172,193,3,13
	.byte	'reserved_E0B0',0
	.word	4470
	.byte	8,4,35,176,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R3',0
	.word	37646
	.byte	4,4,35,184,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R3',0
	.word	37725
	.byte	4,4,35,188,193,3,13
	.byte	'reserved_E0C0',0
	.word	4470
	.byte	8,4,35,192,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R4',0
	.word	37646
	.byte	4,4,35,200,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R4',0
	.word	37725
	.byte	4,4,35,204,193,3,13
	.byte	'reserved_E0D0',0
	.word	4470
	.byte	8,4,35,208,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R5',0
	.word	37646
	.byte	4,4,35,216,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R5',0
	.word	37725
	.byte	4,4,35,220,193,3,13
	.byte	'reserved_E0E0',0
	.word	4470
	.byte	8,4,35,224,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R6',0
	.word	37646
	.byte	4,4,35,232,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R6',0
	.word	37725
	.byte	4,4,35,236,193,3,13
	.byte	'reserved_E0F0',0
	.word	4470
	.byte	8,4,35,240,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R7',0
	.word	37646
	.byte	4,4,35,248,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R7',0
	.word	37725
	.byte	4,4,35,252,193,3,13
	.byte	'SFR_SPROT_ACCENA_W',0
	.word	37430
	.byte	4,4,35,128,194,3,13
	.byte	'SFR_SPROT_ACCENB_W',0
	.word	37506
	.byte	4,4,35,132,194,3,13
	.byte	'reserved_E108',0
	.word	4470
	.byte	8,4,35,136,194,3,13
	.byte	'LPB_SPROT_ACCENA_R',0
	.word	35954
	.byte	4,4,35,144,194,3,13
	.byte	'LPB_SPROT_ACCENB_R',0
	.word	36030
	.byte	4,4,35,148,194,3,13
	.byte	'reserved_E118',0
	.word	39719
	.byte	232,1,4,35,152,194,3,13
	.byte	'DLMU_SPROT_RGNLA0',0
	.word	34116
	.byte	4,4,35,128,196,3,13
	.byte	'DLMU_SPROT_RGNUA0',0
	.word	34190
	.byte	4,4,35,132,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W0',0
	.word	33876
	.byte	4,4,35,136,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W0',0
	.word	34036
	.byte	4,4,35,140,196,3,13
	.byte	'DLMU_SPROT_RGNLA1',0
	.word	34116
	.byte	4,4,35,144,196,3,13
	.byte	'DLMU_SPROT_RGNUA1',0
	.word	34190
	.byte	4,4,35,148,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W1',0
	.word	33876
	.byte	4,4,35,152,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W1',0
	.word	34036
	.byte	4,4,35,156,196,3,13
	.byte	'DLMU_SPROT_RGNLA2',0
	.word	34116
	.byte	4,4,35,160,196,3,13
	.byte	'DLMU_SPROT_RGNUA2',0
	.word	34190
	.byte	4,4,35,164,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W2',0
	.word	33876
	.byte	4,4,35,168,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W2',0
	.word	34036
	.byte	4,4,35,172,196,3,13
	.byte	'DLMU_SPROT_RGNLA3',0
	.word	34116
	.byte	4,4,35,176,196,3,13
	.byte	'DLMU_SPROT_RGNUA3',0
	.word	34190
	.byte	4,4,35,180,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W3',0
	.word	33876
	.byte	4,4,35,184,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W3',0
	.word	34036
	.byte	4,4,35,188,196,3,13
	.byte	'DLMU_SPROT_RGNLA4',0
	.word	34116
	.byte	4,4,35,192,196,3,13
	.byte	'DLMU_SPROT_RGNUA4',0
	.word	34190
	.byte	4,4,35,196,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W4',0
	.word	33876
	.byte	4,4,35,200,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W4',0
	.word	34036
	.byte	4,4,35,204,196,3,13
	.byte	'DLMU_SPROT_RGNLA5',0
	.word	34116
	.byte	4,4,35,208,196,3,13
	.byte	'DLMU_SPROT_RGNUA5',0
	.word	34190
	.byte	4,4,35,212,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W5',0
	.word	33876
	.byte	4,4,35,216,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W5',0
	.word	34036
	.byte	4,4,35,220,196,3,13
	.byte	'DLMU_SPROT_RGNLA6',0
	.word	34116
	.byte	4,4,35,224,196,3,13
	.byte	'DLMU_SPROT_RGNUA6',0
	.word	34190
	.byte	4,4,35,228,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W6',0
	.word	33876
	.byte	4,4,35,232,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W6',0
	.word	34036
	.byte	4,4,35,236,196,3,13
	.byte	'DLMU_SPROT_RGNLA7',0
	.word	34116
	.byte	4,4,35,240,196,3,13
	.byte	'DLMU_SPROT_RGNUA7',0
	.word	34190
	.byte	4,4,35,244,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W7',0
	.word	33876
	.byte	4,4,35,248,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W7',0
	.word	34036
	.byte	4,4,35,252,196,3,13
	.byte	'reserved_E280',0
	.word	4470
	.byte	8,4,35,128,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R0',0
	.word	33796
	.byte	4,4,35,136,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R0',0
	.word	33956
	.byte	4,4,35,140,197,3,13
	.byte	'reserved_E290',0
	.word	4470
	.byte	8,4,35,144,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R1',0
	.word	33796
	.byte	4,4,35,152,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R1',0
	.word	33956
	.byte	4,4,35,156,197,3,13
	.byte	'reserved_E2A0',0
	.word	4470
	.byte	8,4,35,160,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R2',0
	.word	33796
	.byte	4,4,35,168,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R2',0
	.word	33956
	.byte	4,4,35,172,197,3,13
	.byte	'reserved_E2B0',0
	.word	4470
	.byte	8,4,35,176,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R3',0
	.word	33796
	.byte	4,4,35,184,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R3',0
	.word	33956
	.byte	4,4,35,188,197,3,13
	.byte	'reserved_E2C0',0
	.word	4470
	.byte	8,4,35,192,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R4',0
	.word	33796
	.byte	4,4,35,200,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R4',0
	.word	33956
	.byte	4,4,35,204,197,3,13
	.byte	'reserved_E2D0',0
	.word	4470
	.byte	8,4,35,208,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R5',0
	.word	33796
	.byte	4,4,35,216,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R5',0
	.word	33956
	.byte	4,4,35,220,197,3,13
	.byte	'reserved_E2E0',0
	.word	4470
	.byte	8,4,35,224,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R6',0
	.word	33796
	.byte	4,4,35,232,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R6',0
	.word	33956
	.byte	4,4,35,236,197,3,13
	.byte	'reserved_E2F0',0
	.word	4470
	.byte	8,4,35,240,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R7',0
	.word	33796
	.byte	4,4,35,248,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R7',0
	.word	33956
	.byte	4,4,35,252,197,3,13
	.byte	'reserved_E300',0
	.word	39730
	.byte	128,48,4,35,128,198,3,13
	.byte	'OSEL',0
	.word	36295
	.byte	4,4,35,128,246,3,13
	.byte	'reserved_FB04',0
	.word	4810
	.byte	12,4,35,132,246,3,13
	.byte	'BLK',0
	.word	39751
	.byte	128,3,4,35,144,246,3,13
	.byte	'reserved_FC90',0
	.word	39756
	.byte	160,39,4,35,144,249,3,13
	.byte	'SEGEN',0
	.word	37367
	.byte	4,4,35,176,160,4,13
	.byte	'reserved_11034',0
	.word	39767
	.byte	208,223,1,4,35,180,160,4,13
	.byte	'TASK_ASI',0
	.word	37931
	.byte	4,4,35,132,128,6,13
	.byte	'reserved_18008',0
	.word	39780
	.byte	248,1,4,35,136,128,6,13
	.byte	'PMA0',0
	.word	36794
	.byte	4,4,35,128,130,6,13
	.byte	'PMA1',0
	.word	36856
	.byte	4,4,35,132,130,6,13
	.byte	'PMA2',0
	.word	36918
	.byte	4,4,35,136,130,6,13
	.byte	'reserved_1810C',0
	.word	39791
	.byte	244,29,4,35,140,130,6,13
	.byte	'DCON2',0
	.word	33483
	.byte	4,4,35,128,160,6,13
	.byte	'reserved_19004',0
	.word	4470
	.byte	8,4,35,132,160,6,13
	.byte	'SMACON',0
	.word	37582
	.byte	4,4,35,140,160,6,13
	.byte	'DSTR',0
	.word	34575
	.byte	4,4,35,144,160,6,13
	.byte	'reserved_19014',0
	.word	2650
	.byte	4,4,35,148,160,6,13
	.byte	'DATR',0
	.word	33231
	.byte	4,4,35,152,160,6,13
	.byte	'DEADD',0
	.word	33607
	.byte	4,4,35,156,160,6,13
	.byte	'DIEAR',0
	.word	33670
	.byte	4,4,35,160,160,6,13
	.byte	'DIETR',0
	.word	33733
	.byte	4,4,35,164,160,6,13
	.byte	'reserved_19028',0
	.word	3841
	.byte	24,4,35,168,160,6,13
	.byte	'DCON0',0
	.word	33420
	.byte	4,4,35,192,160,6,13
	.byte	'reserved_19044',0
	.word	39802
	.byte	188,3,4,35,196,160,6,13
	.byte	'PSTR',0
	.word	36980
	.byte	4,4,35,128,164,6,13
	.byte	'PCON1',0
	.word	36480
	.byte	4,4,35,132,164,6,13
	.byte	'PCON2',0
	.word	36543
	.byte	4,4,35,136,164,6,13
	.byte	'PCON0',0
	.word	36417
	.byte	4,4,35,140,164,6,13
	.byte	'PIEAR',0
	.word	36668
	.byte	4,4,35,144,164,6,13
	.byte	'PIETR',0
	.word	36731
	.byte	4,4,35,148,164,6,13
	.byte	'reserved_19218',0
	.word	39813
	.byte	232,3,4,35,152,164,6,13
	.byte	'COMPAT',0
	.word	32704
	.byte	4,4,35,128,168,6,13
	.byte	'reserved_19404',0
	.word	39824
	.byte	252,23,4,35,132,168,6,13
	.byte	'FPU_TRAP',0
	.word	39835
	.byte	28,4,35,128,192,6,13
	.byte	'reserved_1A01C',0
	.word	39840
	.byte	228,63,4,35,156,192,6,13
	.byte	'DPR',0
	.word	39861
	.byte	144,1,4,35,128,128,7,13
	.byte	'reserved_1C090',0
	.word	39866
	.byte	240,30,4,35,144,129,7,13
	.byte	'CPR',0
	.word	39886
	.byte	80,4,35,128,160,7,13
	.byte	'reserved_1D050',0
	.word	39891
	.byte	176,31,4,35,208,160,7,13
	.byte	'CPXE_0',0
	.word	32983
	.byte	4,4,35,128,192,7,13
	.byte	'CPXE_1',0
	.word	32983
	.byte	4,4,35,132,192,7,13
	.byte	'CPXE_2',0
	.word	32983
	.byte	4,4,35,136,192,7,13
	.byte	'CPXE_3',0
	.word	32983
	.byte	4,4,35,140,192,7,13
	.byte	'DPRE_0',0
	.word	34325
	.byte	4,4,35,144,192,7,13
	.byte	'DPRE_1',0
	.word	34325
	.byte	4,4,35,148,192,7,13
	.byte	'DPRE_2',0
	.word	34325
	.byte	4,4,35,152,192,7,13
	.byte	'DPRE_3',0
	.word	34325
	.byte	4,4,35,156,192,7,13
	.byte	'DPWE_0',0
	.word	34513
	.byte	4,4,35,160,192,7,13
	.byte	'DPWE_1',0
	.word	34513
	.byte	4,4,35,164,192,7,13
	.byte	'DPWE_2',0
	.word	34513
	.byte	4,4,35,168,192,7,13
	.byte	'DPWE_3',0
	.word	34513
	.byte	4,4,35,172,192,7,13
	.byte	'reserved_1E030',0
	.word	39902
	.byte	16,4,35,176,192,7,13
	.byte	'CPXE_4',0
	.word	32983
	.byte	4,4,35,192,192,7,13
	.byte	'CPXE_5',0
	.word	32983
	.byte	4,4,35,196,192,7,13
	.byte	'reserved_1E048',0
	.word	4470
	.byte	8,4,35,200,192,7,13
	.byte	'DPRE_4',0
	.word	34325
	.byte	4,4,35,208,192,7,13
	.byte	'DPRE_5',0
	.word	34325
	.byte	4,4,35,212,192,7,13
	.byte	'reserved_1E058',0
	.word	4470
	.byte	8,4,35,216,192,7,13
	.byte	'DPWE_4',0
	.word	34513
	.byte	4,4,35,224,192,7,13
	.byte	'DPWE_5',0
	.word	34513
	.byte	4,4,35,228,192,7,13
	.byte	'reserved_1E068',0
	.word	39911
	.byte	152,7,4,35,232,192,7,13
	.byte	'TPS',0
	.word	39922
	.byte	16,4,35,128,200,7,13
	.byte	'reserved_1E410',0
	.word	39927
	.byte	48,4,35,144,200,7,13
	.byte	'TPS_EXTIM',0
	.word	39936
	.byte	28,4,35,192,200,7,13
	.byte	'reserved_1E45C',0
	.word	39941
	.byte	164,23,4,35,220,200,7,13
	.byte	'TR',0
	.word	39961
	.byte	64,4,35,128,224,7,13
	.byte	'reserved_1F040',0
	.word	39966
	.byte	192,23,4,35,192,224,7,13
	.byte	'CCTRL',0
	.word	32641
	.byte	4,4,35,128,248,7,13
	.byte	'CCNT',0
	.word	32579
	.byte	4,4,35,132,248,7,13
	.byte	'ICNT',0
	.word	35518
	.byte	4,4,35,136,248,7,13
	.byte	'M1CNT',0
	.word	36106
	.byte	4,4,35,140,248,7,13
	.byte	'M2CNT',0
	.word	36169
	.byte	4,4,35,144,248,7,13
	.byte	'M3CNT',0
	.word	36232
	.byte	4,4,35,148,248,7,13
	.byte	'reserved_1FC18',0
	.word	39719
	.byte	232,1,4,35,152,248,7,13
	.byte	'DBGSR',0
	.word	33293
	.byte	4,4,35,128,250,7,13
	.byte	'reserved_1FD04',0
	.word	2650
	.byte	4,4,35,132,250,7,13
	.byte	'EXEVT',0
	.word	34637
	.byte	4,4,35,136,250,7,13
	.byte	'CREVT',0
	.word	33045
	.byte	4,4,35,140,250,7,13
	.byte	'SWEVT',0
	.word	37804
	.byte	4,4,35,144,250,7,13
	.byte	'reserved_1FD14',0
	.word	39977
	.byte	28,4,35,148,250,7,13
	.byte	'TRIG_ACC',0
	.word	38658
	.byte	4,4,35,176,250,7,13
	.byte	'reserved_1FD34',0
	.word	4810
	.byte	12,4,35,180,250,7,13
	.byte	'DMS',0
	.word	34264
	.byte	4,4,35,192,250,7,13
	.byte	'DCX',0
	.word	33546
	.byte	4,4,35,196,250,7,13
	.byte	'DBGTCR',0
	.word	33356
	.byte	4,4,35,200,250,7,13
	.byte	'reserved_1FD4C',0
	.word	39986
	.byte	180,1,4,35,204,250,7,13
	.byte	'PCXI',0
	.word	36606
	.byte	4,4,35,128,252,7,13
	.byte	'PSW',0
	.word	37042
	.byte	4,4,35,132,252,7,13
	.byte	'PC',0
	.word	36357
	.byte	4,4,35,136,252,7,13
	.byte	'reserved_1FE0C',0
	.word	4470
	.byte	8,4,35,140,252,7,13
	.byte	'SYSCON',0
	.word	37867
	.byte	4,4,35,148,252,7,13
	.byte	'CPU_ID',0
	.word	32919
	.byte	4,4,35,152,252,7,13
	.byte	'CORE_ID',0
	.word	10694
	.byte	4,4,35,156,252,7,13
	.byte	'BIV',0
	.word	32258
	.byte	4,4,35,160,252,7,13
	.byte	'BTV',0
	.word	32518
	.byte	4,4,35,164,252,7,13
	.byte	'ISP',0
	.word	35641
	.byte	4,4,35,168,252,7,13
	.byte	'ICR',0
	.word	35580
	.byte	4,4,35,172,252,7,13
	.byte	'reserved_1FE30',0
	.word	4470
	.byte	8,4,35,176,252,7,13
	.byte	'FCX',0
	.word	34700
	.byte	4,4,35,184,252,7,13
	.byte	'LCX',0
	.word	35893
	.byte	4,4,35,188,252,7,13
	.byte	'reserved_1FE40',0
	.word	39902
	.byte	16,4,35,192,252,7,13
	.byte	'CUS_ID',0
	.word	33108
	.byte	4,4,35,208,252,7,13
	.byte	'reserved_1FE54',0
	.word	39997
	.byte	172,1,4,35,212,252,7,13
	.byte	'D',0
	.word	40008
	.byte	64,4,35,128,254,7,13
	.byte	'reserved_1FF40',0
	.word	40017
	.byte	64,4,35,192,254,7,13
	.byte	'A',0
	.word	40026
	.byte	64,4,35,128,255,7,13
	.byte	'reserved_1FFC0',0
	.word	40017
	.byte	64,4,35,192,255,7,0,14
	.word	40035
	.byte	32
	.byte	'Ifx_CPU',0,12,210,19,3
	.word	45133
	.byte	32
	.byte	'IfxCpu_Id',0,9,133,1,3
	.word	9410
	.byte	32
	.byte	'IfxCpu_ResourceCpu',0,9,170,1,3
	.word	9548
	.byte	10
	.byte	'_Ifx_SRC_SRCR_Bits',0,16,68,16,4,11
	.byte	'SRPN',0,1
	.word	629
	.byte	8,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	629
	.byte	2,6,2,35,1,11
	.byte	'SRE',0,1
	.word	629
	.byte	1,5,2,35,1,11
	.byte	'TOS',0,1
	.word	629
	.byte	3,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	629
	.byte	2,0,2,35,1,11
	.byte	'ECC',0,1
	.word	629
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	629
	.byte	3,0,2,35,2,11
	.byte	'SRR',0,1
	.word	629
	.byte	1,7,2,35,3,11
	.byte	'CLRR',0,1
	.word	629
	.byte	1,6,2,35,3,11
	.byte	'SETR',0,1
	.word	629
	.byte	1,5,2,35,3,11
	.byte	'IOV',0,1
	.word	629
	.byte	1,4,2,35,3,11
	.byte	'IOVCLR',0,1
	.word	629
	.byte	1,3,2,35,3,11
	.byte	'SWS',0,1
	.word	629
	.byte	1,2,2,35,3,11
	.byte	'SWSCLR',0,1
	.word	629
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	629
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SRC_SRCR_Bits',0,16,85,3
	.word	45202
	.byte	12,16,93,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	45202
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SRC_SRCR',0,16,98,3
	.word	45518
	.byte	10
	.byte	'_Ifx_SRC_CPU_CPU',0,16,110,25,4,13
	.byte	'SB',0
	.word	45518
	.byte	4,2,35,0,0,14
	.word	45578
	.byte	32
	.byte	'Ifx_SRC_CPU_CPU',0,16,113,3
	.word	45613
	.byte	15,24
	.word	45578
	.byte	16,5,0,14
	.word	45642
	.byte	10
	.byte	'_Ifx_SRC_CPU',0,16,128,1,25,24,13
	.byte	'CPU',0
	.word	45651
	.byte	24,2,35,0,0,14
	.word	45656
	.byte	32
	.byte	'Ifx_SRC_CPU',0,16,131,1,3
	.word	45689
	.byte	10
	.byte	'_Ifx_SRC_AGBT_AGBT',0,16,146,1,25,4,13
	.byte	'SR',0
	.word	45518
	.byte	4,2,35,0,0,14
	.word	45715
	.byte	32
	.byte	'Ifx_SRC_AGBT_AGBT',0,16,149,1,3
	.word	45753
	.byte	15,4
	.word	45715
	.byte	16,0,0,14
	.word	45785
	.byte	10
	.byte	'_Ifx_SRC_AGBT',0,16,164,1,25,4,13
	.byte	'AGBT',0
	.word	45794
	.byte	4,2,35,0,0,14
	.word	45799
	.byte	32
	.byte	'Ifx_SRC_AGBT',0,16,167,1,3
	.word	45834
	.byte	10
	.byte	'_Ifx_SRC_XBAR_XBAR',0,16,182,1,25,4,13
	.byte	'SR',0
	.word	45518
	.byte	4,2,35,0,0,14
	.word	45861
	.byte	32
	.byte	'Ifx_SRC_XBAR_XBAR',0,16,185,1,3
	.word	45899
	.byte	15,12
	.word	45861
	.byte	16,2,0,14
	.word	45931
	.byte	10
	.byte	'_Ifx_SRC_XBAR',0,16,200,1,25,12,13
	.byte	'XBAR',0
	.word	45940
	.byte	12,2,35,0,0,14
	.word	45945
	.byte	32
	.byte	'Ifx_SRC_XBAR',0,16,203,1,3
	.word	45980
	.byte	15,8
	.word	45518
	.byte	16,1,0,10
	.byte	'_Ifx_SRC_CERBERUS_CERBERUS',0,16,218,1,25,8,13
	.byte	'SR',0
	.word	46007
	.byte	8,2,35,0,0,14
	.word	46016
	.byte	32
	.byte	'Ifx_SRC_CERBERUS_CERBERUS',0,16,221,1,3
	.word	46062
	.byte	14
	.word	46016
	.byte	10
	.byte	'_Ifx_SRC_CERBERUS',0,16,236,1,25,8,13
	.byte	'CERBERUS',0
	.word	46102
	.byte	8,2,35,0,0,14
	.word	46107
	.byte	32
	.byte	'Ifx_SRC_CERBERUS',0,16,239,1,3
	.word	46150
	.byte	10
	.byte	'_Ifx_SRC_ASCLIN_ASCLIN',0,16,254,1,25,12,13
	.byte	'TX',0
	.word	45518
	.byte	4,2,35,0,13
	.byte	'RX',0
	.word	45518
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	45518
	.byte	4,2,35,8,0,14
	.word	46181
	.byte	32
	.byte	'Ifx_SRC_ASCLIN_ASCLIN',0,16,131,2,3
	.word	46248
	.byte	15,144,1
	.word	46181
	.byte	16,11,0,14
	.word	46284
	.byte	10
	.byte	'_Ifx_SRC_ASCLIN',0,16,146,2,25,144,1,13
	.byte	'ASCLIN',0
	.word	46294
	.byte	144,1,2,35,0,0,14
	.word	46299
	.byte	32
	.byte	'Ifx_SRC_ASCLIN',0,16,149,2,3
	.word	46340
	.byte	10
	.byte	'_Ifx_SRC_QSPI_QSPI',0,16,164,2,25,20,13
	.byte	'TX',0
	.word	45518
	.byte	4,2,35,0,13
	.byte	'RX',0
	.word	45518
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	45518
	.byte	4,2,35,8,13
	.byte	'PT',0
	.word	45518
	.byte	4,2,35,12,13
	.byte	'U',0
	.word	45518
	.byte	4,2,35,16,0,14
	.word	46369
	.byte	32
	.byte	'Ifx_SRC_QSPI_QSPI',0,16,171,2,3
	.word	46455
	.byte	15,120
	.word	46369
	.byte	16,5,0,14
	.word	46487
	.byte	10
	.byte	'_Ifx_SRC_QSPI',0,16,186,2,25,120,13
	.byte	'QSPI',0
	.word	46496
	.byte	120,2,35,0,0,14
	.word	46501
	.byte	32
	.byte	'Ifx_SRC_QSPI',0,16,189,2,3
	.word	46536
	.byte	10
	.byte	'_Ifx_SRC_HSCT_HSCT',0,16,204,2,25,4,13
	.byte	'SR',0
	.word	45518
	.byte	4,2,35,0,0,14
	.word	46563
	.byte	32
	.byte	'Ifx_SRC_HSCT_HSCT',0,16,207,2,3
	.word	46601
	.byte	15,8
	.word	46563
	.byte	16,1,0,14
	.word	46633
	.byte	10
	.byte	'_Ifx_SRC_HSCT',0,16,222,2,25,8,13
	.byte	'HSCT',0
	.word	46642
	.byte	8,2,35,0,0,14
	.word	46647
	.byte	32
	.byte	'Ifx_SRC_HSCT',0,16,225,2,3
	.word	46682
	.byte	10
	.byte	'_Ifx_SRC_HSSL_HSSL_CH',0,16,240,2,25,16,13
	.byte	'COK',0
	.word	45518
	.byte	4,2,35,0,13
	.byte	'RDI',0
	.word	45518
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	45518
	.byte	4,2,35,8,13
	.byte	'TRG',0
	.word	45518
	.byte	4,2,35,12,0,14
	.word	46709
	.byte	32
	.byte	'Ifx_SRC_HSSL_HSSL_CH',0,16,246,2,3
	.word	46790
	.byte	15,64
	.word	46709
	.byte	16,3,0,14
	.word	46825
	.byte	10
	.byte	'_Ifx_SRC_HSSL_HSSL',0,16,133,3,25,68,13
	.byte	'CH',0
	.word	46834
	.byte	64,2,35,0,13
	.byte	'EXI',0
	.word	45518
	.byte	4,2,35,64,0,14
	.word	46839
	.byte	32
	.byte	'Ifx_SRC_HSSL_HSSL',0,16,137,3,3
	.word	46890
	.byte	15,136,1
	.word	46839
	.byte	16,1,0,14
	.word	46922
	.byte	10
	.byte	'_Ifx_SRC_HSSL',0,16,152,3,25,136,1,13
	.byte	'HSSL',0
	.word	46932
	.byte	136,1,2,35,0,0,14
	.word	46937
	.byte	32
	.byte	'Ifx_SRC_HSSL',0,16,155,3,3
	.word	46974
	.byte	10
	.byte	'_Ifx_SRC_I2C_I2C',0,16,170,3,25,16,13
	.byte	'DTR',0
	.word	45518
	.byte	4,2,35,0,13
	.byte	'ERR',0
	.word	45518
	.byte	4,2,35,4,13
	.byte	'P',0
	.word	45518
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	2650
	.byte	4,2,35,12,0,14
	.word	47001
	.byte	32
	.byte	'Ifx_SRC_I2C_I2C',0,16,176,3,3
	.word	47082
	.byte	15,32
	.word	47001
	.byte	16,1,0,14
	.word	47112
	.byte	10
	.byte	'_Ifx_SRC_I2C',0,16,191,3,25,32,13
	.byte	'I2C',0
	.word	47121
	.byte	32,2,35,0,0,14
	.word	47126
	.byte	32
	.byte	'Ifx_SRC_I2C',0,16,194,3,3
	.word	47159
	.byte	10
	.byte	'_Ifx_SRC_SENT_SENT',0,16,209,3,25,4,13
	.byte	'SR',0
	.word	45518
	.byte	4,2,35,0,0,14
	.word	47185
	.byte	32
	.byte	'Ifx_SRC_SENT_SENT',0,16,212,3,3
	.word	47223
	.byte	15,40
	.word	47185
	.byte	16,9,0,14
	.word	47255
	.byte	10
	.byte	'_Ifx_SRC_SENT',0,16,227,3,25,40,13
	.byte	'SENT',0
	.word	47264
	.byte	40,2,35,0,0,14
	.word	47269
	.byte	32
	.byte	'Ifx_SRC_SENT',0,16,230,3,3
	.word	47304
	.byte	15,20
	.word	45518
	.byte	16,4,0,10
	.byte	'_Ifx_SRC_MSC_MSC',0,16,245,3,25,20,13
	.byte	'SR',0
	.word	47331
	.byte	20,2,35,0,0,14
	.word	47340
	.byte	32
	.byte	'Ifx_SRC_MSC_MSC',0,16,248,3,3
	.word	47376
	.byte	15,80
	.word	47340
	.byte	16,3,0,14
	.word	47406
	.byte	10
	.byte	'_Ifx_SRC_MSC',0,16,135,4,25,80,13
	.byte	'MSC',0
	.word	47415
	.byte	80,2,35,0,0,14
	.word	47420
	.byte	32
	.byte	'Ifx_SRC_MSC',0,16,138,4,3
	.word	47453
	.byte	15,16
	.word	45518
	.byte	16,3,0,10
	.byte	'_Ifx_SRC_CCU6_CCU',0,16,153,4,25,16,13
	.byte	'SR',0
	.word	47479
	.byte	16,2,35,0,0,14
	.word	47488
	.byte	32
	.byte	'Ifx_SRC_CCU6_CCU',0,16,156,4,3
	.word	47525
	.byte	15,32
	.word	47488
	.byte	16,1,0,14
	.word	47556
	.byte	10
	.byte	'_Ifx_SRC_CCU6',0,16,171,4,25,32,13
	.byte	'CCU',0
	.word	47565
	.byte	32,2,35,0,0,14
	.word	47570
	.byte	32
	.byte	'Ifx_SRC_CCU6',0,16,174,4,3
	.word	47604
	.byte	10
	.byte	'_Ifx_SRC_GPT12_GPT12',0,16,189,4,25,24,13
	.byte	'CIRQ',0
	.word	45518
	.byte	4,2,35,0,13
	.byte	'T2',0
	.word	45518
	.byte	4,2,35,4,13
	.byte	'T3',0
	.word	45518
	.byte	4,2,35,8,13
	.byte	'T4',0
	.word	45518
	.byte	4,2,35,12,13
	.byte	'T5',0
	.word	45518
	.byte	4,2,35,16,13
	.byte	'T6',0
	.word	45518
	.byte	4,2,35,20,0,14
	.word	47631
	.byte	32
	.byte	'Ifx_SRC_GPT12_GPT12',0,16,197,4,3
	.word	47733
	.byte	15,24
	.word	47631
	.byte	16,0,0,14
	.word	47767
	.byte	10
	.byte	'_Ifx_SRC_GPT12',0,16,212,4,25,24,13
	.byte	'GPT12',0
	.word	47776
	.byte	24,2,35,0,0,14
	.word	47781
	.byte	32
	.byte	'Ifx_SRC_GPT12',0,16,215,4,3
	.word	47818
	.byte	10
	.byte	'_Ifx_SRC_STM_STM',0,16,230,4,25,8,13
	.byte	'SR',0
	.word	46007
	.byte	8,2,35,0,0,14
	.word	47846
	.byte	32
	.byte	'Ifx_SRC_STM_STM',0,16,233,4,3
	.word	47882
	.byte	15,48
	.word	47846
	.byte	16,5,0,14
	.word	47912
	.byte	10
	.byte	'_Ifx_SRC_STM',0,16,248,4,25,48,13
	.byte	'STM',0
	.word	47921
	.byte	48,2,35,0,0,14
	.word	47926
	.byte	32
	.byte	'Ifx_SRC_STM',0,16,251,4,3
	.word	47959
	.byte	10
	.byte	'_Ifx_SRC_FCE_FCE0',0,16,138,5,25,4,13
	.byte	'SR',0
	.word	45518
	.byte	4,2,35,0,0,14
	.word	47985
	.byte	32
	.byte	'Ifx_SRC_FCE_FCE0',0,16,141,5,3
	.word	48022
	.byte	14
	.word	47985
	.byte	10
	.byte	'_Ifx_SRC_FCE',0,16,156,5,25,4,13
	.byte	'FCE0',0
	.word	48053
	.byte	4,2,35,0,0,14
	.word	48058
	.byte	32
	.byte	'Ifx_SRC_FCE',0,16,159,5,3
	.word	48092
	.byte	15,32
	.word	629
	.byte	16,31,0,15,128,4
	.word	45518
	.byte	16,127,0,10
	.byte	'_Ifx_SRC_DMA_DMA',0,16,174,5,25,176,4,13
	.byte	'ERR',0
	.word	47479
	.byte	16,2,35,0,13
	.byte	'reserved_10',0
	.word	48118
	.byte	32,2,35,16,13
	.byte	'CH',0
	.word	48127
	.byte	128,4,2,35,48,0,14
	.word	48137
	.byte	32
	.byte	'Ifx_SRC_DMA_DMA',0,16,179,5,3
	.word	48209
	.byte	15,176,4
	.word	48137
	.byte	16,0,0,14
	.word	48239
	.byte	10
	.byte	'_Ifx_SRC_DMA',0,16,194,5,25,176,4,13
	.byte	'DMA',0
	.word	48249
	.byte	176,4,2,35,0,0,14
	.word	48254
	.byte	32
	.byte	'Ifx_SRC_DMA',0,16,197,5,3
	.word	48289
	.byte	10
	.byte	'_Ifx_SRC_SDMMC_SDMMC',0,16,212,5,25,8,13
	.byte	'ERR',0
	.word	45518
	.byte	4,2,35,0,13
	.byte	'DMA',0
	.word	45518
	.byte	4,2,35,4,0,14
	.word	48315
	.byte	32
	.byte	'Ifx_SRC_SDMMC_SDMMC',0,16,216,5,3
	.word	48369
	.byte	15,8
	.word	48315
	.byte	16,0,0,14
	.word	48403
	.byte	10
	.byte	'_Ifx_SRC_SDMMC',0,16,231,5,25,8,13
	.byte	'SDMMC',0
	.word	48412
	.byte	8,2,35,0,0,14
	.word	48417
	.byte	32
	.byte	'Ifx_SRC_SDMMC',0,16,234,5,3
	.word	48454
	.byte	15,40
	.word	45518
	.byte	16,9,0,10
	.byte	'_Ifx_SRC_GETH_GETH',0,16,249,5,25,40,13
	.byte	'SR',0
	.word	48482
	.byte	40,2,35,0,0,14
	.word	48491
	.byte	32
	.byte	'Ifx_SRC_GETH_GETH',0,16,252,5,3
	.word	48529
	.byte	15,40
	.word	48491
	.byte	16,0,0,14
	.word	48561
	.byte	10
	.byte	'_Ifx_SRC_GETH',0,16,139,6,25,40,13
	.byte	'GETH',0
	.word	48570
	.byte	40,2,35,0,0,14
	.word	48575
	.byte	32
	.byte	'Ifx_SRC_GETH',0,16,142,6,3
	.word	48610
	.byte	15,64
	.word	45518
	.byte	16,15,0,10
	.byte	'_Ifx_SRC_CAN_CAN',0,16,157,6,25,64,13
	.byte	'INT',0
	.word	48637
	.byte	64,2,35,0,0,14
	.word	48646
	.byte	32
	.byte	'Ifx_SRC_CAN_CAN',0,16,160,6,3
	.word	48683
	.byte	15,192,1
	.word	48646
	.byte	16,2,0,14
	.word	48713
	.byte	10
	.byte	'_Ifx_SRC_CAN',0,16,175,6,25,192,1,13
	.byte	'CAN',0
	.word	48723
	.byte	192,1,2,35,0,0,14
	.word	48728
	.byte	32
	.byte	'Ifx_SRC_CAN',0,16,178,6,3
	.word	48763
	.byte	10
	.byte	'_Ifx_SRC_VADC_G',0,16,193,6,25,16,13
	.byte	'SR0',0
	.word	45518
	.byte	4,2,35,0,13
	.byte	'SR1',0
	.word	45518
	.byte	4,2,35,4,13
	.byte	'SR2',0
	.word	45518
	.byte	4,2,35,8,13
	.byte	'SR3',0
	.word	45518
	.byte	4,2,35,12,0,14
	.word	48789
	.byte	32
	.byte	'Ifx_SRC_VADC_G',0,16,199,6,3
	.word	48864
	.byte	10
	.byte	'_Ifx_SRC_VADC_FC',0,16,214,6,25,4,13
	.byte	'SR0',0
	.word	45518
	.byte	4,2,35,0,0,14
	.word	48893
	.byte	32
	.byte	'Ifx_SRC_VADC_FC',0,16,217,6,3
	.word	48930
	.byte	15,192,1
	.word	48789
	.byte	16,11,0,14
	.word	48960
	.byte	15,32
	.word	48893
	.byte	16,7,0,14
	.word	48975
	.byte	15,32
	.word	48789
	.byte	16,1,0,14
	.word	48989
	.byte	10
	.byte	'_Ifx_SRC_VADC',0,16,233,6,25,128,2,13
	.byte	'G',0
	.word	48970
	.byte	192,1,2,35,0,13
	.byte	'FC',0
	.word	48984
	.byte	32,3,35,192,1,13
	.byte	'CG',0
	.word	48998
	.byte	32,3,35,224,1,0,14
	.word	49003
	.byte	32
	.byte	'Ifx_SRC_VADC',0,16,238,6,3
	.word	49063
	.byte	10
	.byte	'_Ifx_SRC_DSADC_DSADC',0,16,253,6,25,8,13
	.byte	'SRM',0
	.word	45518
	.byte	4,2,35,0,13
	.byte	'SRA',0
	.word	45518
	.byte	4,2,35,4,0,14
	.word	49090
	.byte	32
	.byte	'Ifx_SRC_DSADC_DSADC',0,16,129,7,3
	.word	49144
	.byte	15,112
	.word	49090
	.byte	16,13,0,14
	.word	49178
	.byte	10
	.byte	'_Ifx_SRC_DSADC',0,16,144,7,25,112,13
	.byte	'DSADC',0
	.word	49187
	.byte	112,2,35,0,0,14
	.word	49192
	.byte	32
	.byte	'Ifx_SRC_DSADC',0,16,147,7,3
	.word	49229
	.byte	10
	.byte	'_Ifx_SRC_ERAY_ERAY',0,16,162,7,25,48,13
	.byte	'INT0',0
	.word	45518
	.byte	4,2,35,0,13
	.byte	'INT1',0
	.word	45518
	.byte	4,2,35,4,13
	.byte	'TINT0',0
	.word	45518
	.byte	4,2,35,8,13
	.byte	'TINT1',0
	.word	45518
	.byte	4,2,35,12,13
	.byte	'NDAT0',0
	.word	45518
	.byte	4,2,35,16,13
	.byte	'NDAT1',0
	.word	45518
	.byte	4,2,35,20,13
	.byte	'MBSC0',0
	.word	45518
	.byte	4,2,35,24,13
	.byte	'MBSC1',0
	.word	45518
	.byte	4,2,35,28,13
	.byte	'OBUSY',0
	.word	45518
	.byte	4,2,35,32,13
	.byte	'IBUSY',0
	.word	45518
	.byte	4,2,35,36,13
	.byte	'reserved_28',0
	.word	4470
	.byte	8,2,35,40,0,14
	.word	49257
	.byte	32
	.byte	'Ifx_SRC_ERAY_ERAY',0,16,175,7,3
	.word	49452
	.byte	15,96
	.word	49257
	.byte	16,1,0,14
	.word	49484
	.byte	10
	.byte	'_Ifx_SRC_ERAY',0,16,190,7,25,96,13
	.byte	'ERAY',0
	.word	49493
	.byte	96,2,35,0,0,14
	.word	49498
	.byte	32
	.byte	'Ifx_SRC_ERAY',0,16,193,7,3
	.word	49533
	.byte	10
	.byte	'_Ifx_SRC_HSM_HSM',0,16,208,7,25,8,13
	.byte	'HSM',0
	.word	46007
	.byte	8,2,35,0,0,14
	.word	49560
	.byte	32
	.byte	'Ifx_SRC_HSM_HSM',0,16,211,7,3
	.word	49597
	.byte	15,8
	.word	49560
	.byte	16,0,0,14
	.word	49627
	.byte	10
	.byte	'_Ifx_SRC_HSM',0,16,226,7,25,8,13
	.byte	'HSM',0
	.word	49636
	.byte	8,2,35,0,0,14
	.word	49641
	.byte	32
	.byte	'Ifx_SRC_HSM',0,16,229,7,3
	.word	49674
	.byte	10
	.byte	'_Ifx_SRC_SCU',0,16,244,7,25,16,13
	.byte	'SCUERU',0
	.word	47479
	.byte	16,2,35,0,0,14
	.word	49700
	.byte	32
	.byte	'Ifx_SRC_SCU',0,16,247,7,3
	.word	49736
	.byte	10
	.byte	'_Ifx_SRC_PMS_PMS',0,16,134,8,25,4,13
	.byte	'SR',0
	.word	45518
	.byte	4,2,35,0,0,14
	.word	49762
	.byte	32
	.byte	'Ifx_SRC_PMS_PMS',0,16,137,8,3
	.word	49798
	.byte	15,16
	.word	49762
	.byte	16,3,0,14
	.word	49828
	.byte	10
	.byte	'_Ifx_SRC_PMS',0,16,152,8,25,16,13
	.byte	'PMS',0
	.word	49837
	.byte	16,2,35,0,0,14
	.word	49842
	.byte	32
	.byte	'Ifx_SRC_PMS',0,16,155,8,3
	.word	49875
	.byte	15,12
	.word	45518
	.byte	16,2,0,10
	.byte	'_Ifx_SRC_SMU_SMU',0,16,170,8,25,12,13
	.byte	'SR',0
	.word	49901
	.byte	12,2,35,0,0,14
	.word	49910
	.byte	32
	.byte	'Ifx_SRC_SMU_SMU',0,16,173,8,3
	.word	49946
	.byte	15,12
	.word	49910
	.byte	16,0,0,14
	.word	49976
	.byte	10
	.byte	'_Ifx_SRC_SMU',0,16,188,8,25,12,13
	.byte	'SMU',0
	.word	49985
	.byte	12,2,35,0,0,14
	.word	49990
	.byte	32
	.byte	'Ifx_SRC_SMU',0,16,191,8,3
	.word	50023
	.byte	15,32
	.word	45518
	.byte	16,7,0,10
	.byte	'_Ifx_SRC_PSI5_PSI5',0,16,206,8,25,32,13
	.byte	'SR',0
	.word	50049
	.byte	32,2,35,0,0,14
	.word	50058
	.byte	32
	.byte	'Ifx_SRC_PSI5_PSI5',0,16,209,8,3
	.word	50096
	.byte	15,32
	.word	50058
	.byte	16,0,0,14
	.word	50128
	.byte	10
	.byte	'_Ifx_SRC_PSI5',0,16,224,8,25,32,13
	.byte	'PSI5',0
	.word	50137
	.byte	32,2,35,0,0,14
	.word	50142
	.byte	32
	.byte	'Ifx_SRC_PSI5',0,16,227,8,3
	.word	50177
	.byte	10
	.byte	'_Ifx_SRC_HSPDM_HSPDM0',0,16,242,8,25,12,13
	.byte	'BFR',0
	.word	45518
	.byte	4,2,35,0,13
	.byte	'RAMP',0
	.word	45518
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	45518
	.byte	4,2,35,8,0,14
	.word	50204
	.byte	32
	.byte	'Ifx_SRC_HSPDM_HSPDM0',0,16,247,8,3
	.word	50273
	.byte	14
	.word	50204
	.byte	10
	.byte	'_Ifx_SRC_HSPDM',0,16,134,9,25,12,13
	.byte	'HSPDM0',0
	.word	50308
	.byte	12,2,35,0,0,14
	.word	50313
	.byte	32
	.byte	'Ifx_SRC_HSPDM',0,16,137,9,3
	.word	50351
	.byte	10
	.byte	'_Ifx_SRC_DAM_DAM',0,16,152,9,25,24,13
	.byte	'LI0',0
	.word	45518
	.byte	4,2,35,0,13
	.byte	'RI0',0
	.word	45518
	.byte	4,2,35,4,13
	.byte	'LI1',0
	.word	45518
	.byte	4,2,35,8,13
	.byte	'RI1',0
	.word	45518
	.byte	4,2,35,12,13
	.byte	'DR',0
	.word	45518
	.byte	4,2,35,16,13
	.byte	'ERR',0
	.word	45518
	.byte	4,2,35,20,0,14
	.word	50379
	.byte	32
	.byte	'Ifx_SRC_DAM_DAM',0,16,160,9,3
	.word	50480
	.byte	15,48
	.word	50379
	.byte	16,1,0,14
	.word	50510
	.byte	10
	.byte	'_Ifx_SRC_DAM',0,16,175,9,25,48,13
	.byte	'DAM',0
	.word	50519
	.byte	48,2,35,0,0,14
	.word	50524
	.byte	32
	.byte	'Ifx_SRC_DAM',0,16,178,9,3
	.word	50557
	.byte	10
	.byte	'_Ifx_SRC_PSI5S_PSI5S',0,16,193,9,25,32,13
	.byte	'SR',0
	.word	50049
	.byte	32,2,35,0,0,14
	.word	50583
	.byte	32
	.byte	'Ifx_SRC_PSI5S_PSI5S',0,16,196,9,3
	.word	50623
	.byte	15,32
	.word	50583
	.byte	16,0,0,14
	.word	50657
	.byte	10
	.byte	'_Ifx_SRC_PSI5S',0,16,211,9,25,32,13
	.byte	'PSI5S',0
	.word	50666
	.byte	32,2,35,0,0,14
	.word	50671
	.byte	32
	.byte	'Ifx_SRC_PSI5S',0,16,214,9,3
	.word	50708
	.byte	10
	.byte	'_Ifx_SRC_RIF_RIF',0,16,229,9,25,8,13
	.byte	'ERR',0
	.word	45518
	.byte	4,2,35,0,13
	.byte	'INT',0
	.word	45518
	.byte	4,2,35,4,0,14
	.word	50736
	.byte	32
	.byte	'Ifx_SRC_RIF_RIF',0,16,233,9,3
	.word	50786
	.byte	15,16
	.word	50736
	.byte	16,1,0,14
	.word	50816
	.byte	10
	.byte	'_Ifx_SRC_RIF',0,16,248,9,25,16,13
	.byte	'RIF',0
	.word	50825
	.byte	16,2,35,0,0,14
	.word	50830
	.byte	32
	.byte	'Ifx_SRC_RIF',0,16,251,9,3
	.word	50863
	.byte	10
	.byte	'_Ifx_SRC_SPU_SPU',0,16,138,10,25,8,13
	.byte	'INT',0
	.word	45518
	.byte	4,2,35,0,13
	.byte	'ERR',0
	.word	45518
	.byte	4,2,35,4,0,14
	.word	50889
	.byte	32
	.byte	'Ifx_SRC_SPU_SPU',0,16,142,10,3
	.word	50939
	.byte	15,16
	.word	50889
	.byte	16,1,0,14
	.word	50969
	.byte	10
	.byte	'_Ifx_SRC_SPU',0,16,157,10,25,16,13
	.byte	'SPU',0
	.word	50978
	.byte	16,2,35,0,0,14
	.word	50983
	.byte	32
	.byte	'Ifx_SRC_SPU',0,16,160,10,3
	.word	51016
	.byte	10
	.byte	'_Ifx_SRC_GPSR_GPSR',0,16,175,10,25,32,13
	.byte	'SR',0
	.word	50049
	.byte	32,2,35,0,0,14
	.word	51042
	.byte	32
	.byte	'Ifx_SRC_GPSR_GPSR',0,16,178,10,3
	.word	51080
	.byte	15,192,1
	.word	51042
	.byte	16,5,0,14
	.word	51112
	.byte	10
	.byte	'_Ifx_SRC_GPSR',0,16,193,10,25,192,1,13
	.byte	'GPSR',0
	.word	51122
	.byte	192,1,2,35,0,0,14
	.word	51127
	.byte	32
	.byte	'Ifx_SRC_GPSR',0,16,196,10,3
	.word	51164
	.byte	10
	.byte	'_Ifx_SCU_ACCEN00_Bits',0,4,68,16,4,11
	.byte	'EN0',0,1
	.word	629
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	629
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	629
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	629
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	629
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	629
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	629
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	629
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	629
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	629
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	629
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	629
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	629
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	629
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	629
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	629
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	629
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	629
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	629
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	629
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	629
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	629
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	629
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	629
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	629
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	629
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	629
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	629
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	629
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	629
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	629
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	629
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_ACCEN00_Bits',0,4,102,3
	.word	51191
	.byte	10
	.byte	'_Ifx_SCU_ACCEN01_Bits',0,4,105,16,4,11
	.byte	'reserved_0',0,4
	.word	454
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_SCU_ACCEN01_Bits',0,4,108,3
	.word	51750
	.byte	10
	.byte	'_Ifx_SCU_ACCEN10_Bits',0,4,111,16,4,11
	.byte	'EN0',0,1
	.word	629
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	629
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	629
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	629
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	629
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	629
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	629
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	629
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	629
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	629
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	629
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	629
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	629
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	629
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	629
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	629
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	629
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	629
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	629
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	629
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	629
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	629
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	629
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	629
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	629
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	629
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	629
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	629
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	629
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	629
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	629
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	629
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_ACCEN10_Bits',0,4,145,1,3
	.word	51829
	.byte	10
	.byte	'_Ifx_SCU_ACCEN11_Bits',0,4,148,1,16,4,11
	.byte	'reserved_0',0,4
	.word	454
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_SCU_ACCEN11_Bits',0,4,151,1,3
	.word	52389
	.byte	10
	.byte	'_Ifx_SCU_ARSTDIS_Bits',0,4,154,1,16,4,11
	.byte	'STM0DIS',0,1
	.word	629
	.byte	1,7,2,35,0,11
	.byte	'STM1DIS',0,1
	.word	629
	.byte	1,6,2,35,0,11
	.byte	'STM2DIS',0,1
	.word	629
	.byte	1,5,2,35,0,11
	.byte	'STM3DIS',0,1
	.word	629
	.byte	1,4,2,35,0,11
	.byte	'STM4DIS',0,1
	.word	629
	.byte	1,3,2,35,0,11
	.byte	'STM5DIS',0,1
	.word	629
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	629
	.byte	2,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	454
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_SCU_ARSTDIS_Bits',0,4,164,1,3
	.word	52470
	.byte	10
	.byte	'_Ifx_SCU_CCUCON0_Bits',0,4,167,1,16,4,11
	.byte	'STMDIV',0,1
	.word	629
	.byte	4,4,2,35,0,11
	.byte	'GTMDIV',0,1
	.word	629
	.byte	4,0,2,35,0,11
	.byte	'SRIDIV',0,1
	.word	629
	.byte	4,4,2,35,1,11
	.byte	'LPDIV',0,1
	.word	629
	.byte	3,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	629
	.byte	1,0,2,35,1,11
	.byte	'SPBDIV',0,1
	.word	629
	.byte	4,4,2,35,2,11
	.byte	'BBBDIV',0,1
	.word	629
	.byte	4,0,2,35,2,11
	.byte	'FSIDIV',0,1
	.word	629
	.byte	2,6,2,35,3,11
	.byte	'FSI2DIV',0,1
	.word	629
	.byte	2,4,2,35,3,11
	.byte	'CLKSEL',0,1
	.word	629
	.byte	2,2,2,35,3,11
	.byte	'UP',0,1
	.word	629
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	629
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_CCUCON0_Bits',0,4,181,1,3
	.word	52687
	.byte	10
	.byte	'_Ifx_SCU_CCUCON1_Bits',0,4,184,1,16,4,11
	.byte	'MCANDIV',0,1
	.word	629
	.byte	4,4,2,35,0,11
	.byte	'CLKSELMCAN',0,1
	.word	629
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	629
	.byte	1,1,2,35,0,11
	.byte	'PLL1DIVDIS',0,1
	.word	629
	.byte	1,0,2,35,0,11
	.byte	'I2CDIV',0,1
	.word	629
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	629
	.byte	4,0,2,35,1,11
	.byte	'MSCDIV',0,1
	.word	629
	.byte	4,4,2,35,2,11
	.byte	'CLKSELMSC',0,1
	.word	629
	.byte	2,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	629
	.byte	2,0,2,35,2,11
	.byte	'QSPIDIV',0,1
	.word	629
	.byte	4,4,2,35,3,11
	.byte	'CLKSELQSPI',0,1
	.word	629
	.byte	2,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	629
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	629
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_CCUCON1_Bits',0,4,199,1,3
	.word	52960
	.byte	10
	.byte	'_Ifx_SCU_CCUCON10_Bits',0,4,202,1,16,4,11
	.byte	'CPU4DIV',0,1
	.word	629
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	454
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON10_Bits',0,4,206,1,3
	.word	53286
	.byte	10
	.byte	'_Ifx_SCU_CCUCON11_Bits',0,4,209,1,16,4,11
	.byte	'CPU5DIV',0,1
	.word	629
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	454
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON11_Bits',0,4,213,1,3
	.word	53388
	.byte	10
	.byte	'_Ifx_SCU_CCUCON2_Bits',0,4,216,1,16,4,11
	.byte	'ASCLINFDIV',0,1
	.word	629
	.byte	4,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	629
	.byte	4,0,2,35,0,11
	.byte	'ASCLINSDIV',0,1
	.word	629
	.byte	4,4,2,35,1,11
	.byte	'CLKSELASCLINS',0,1
	.word	629
	.byte	2,2,2,35,1,11
	.byte	'reserved_14',0,4
	.word	454
	.byte	10,8,2,35,0,11
	.byte	'EBUPERON',0,1
	.word	629
	.byte	1,7,2,35,3,11
	.byte	'ERAYPERON',0,1
	.word	629
	.byte	1,6,2,35,3,11
	.byte	'HSPDMPERON',0,1
	.word	629
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	629
	.byte	4,1,2,35,3,11
	.byte	'LCK',0,1
	.word	629
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_CCUCON2_Bits',0,4,228,1,3
	.word	53490
	.byte	10
	.byte	'_Ifx_SCU_CCUCON3_Bits',0,4,231,1,16,4,11
	.byte	'PLL0MONEN',0,1
	.word	629
	.byte	1,7,2,35,0,11
	.byte	'PLL1MONEN',0,1
	.word	629
	.byte	1,6,2,35,0,11
	.byte	'PLL2MONEN',0,1
	.word	629
	.byte	1,5,2,35,0,11
	.byte	'SPBMONEN',0,1
	.word	629
	.byte	1,4,2,35,0,11
	.byte	'BACKMONEN',0,1
	.word	629
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	629
	.byte	3,0,2,35,0,11
	.byte	'PLL0MONTST',0,1
	.word	629
	.byte	1,7,2,35,1,11
	.byte	'PLL1MONTST',0,1
	.word	629
	.byte	1,6,2,35,1,11
	.byte	'PLL2MONTST',0,1
	.word	629
	.byte	1,5,2,35,1,11
	.byte	'SPBMONTST',0,1
	.word	629
	.byte	1,4,2,35,1,11
	.byte	'BACKMONTST',0,1
	.word	629
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,4
	.word	454
	.byte	11,8,2,35,0,11
	.byte	'reserved_24',0,1
	.word	629
	.byte	6,2,2,35,3,11
	.byte	'UP',0,1
	.word	629
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	629
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_CCUCON3_Bits',0,4,248,1,3
	.word	53764
	.byte	10
	.byte	'_Ifx_SCU_CCUCON4_Bits',0,4,251,1,16,4,11
	.byte	'LOTHR',0,2
	.word	646
	.byte	12,4,2,35,0,11
	.byte	'UPTHR',0,4
	.word	454
	.byte	12,8,2,35,0,11
	.byte	'MONEN',0,1
	.word	629
	.byte	1,7,2,35,3,11
	.byte	'MONTST',0,1
	.word	629
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	629
	.byte	4,2,2,35,3,11
	.byte	'UP',0,1
	.word	629
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	629
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_CCUCON4_Bits',0,4,132,2,3
	.word	54133
	.byte	10
	.byte	'_Ifx_SCU_CCUCON5_Bits',0,4,135,2,16,4,11
	.byte	'GETHDIV',0,1
	.word	629
	.byte	4,4,2,35,0,11
	.byte	'MCANHDIV',0,1
	.word	629
	.byte	4,0,2,35,0,11
	.byte	'ADASDIV',0,1
	.word	629
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,4
	.word	454
	.byte	18,2,2,35,0,11
	.byte	'UP',0,1
	.word	629
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	629
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_CCUCON5_Bits',0,4,143,2,3
	.word	54313
	.byte	10
	.byte	'_Ifx_SCU_CCUCON6_Bits',0,4,146,2,16,4,11
	.byte	'CPU0DIV',0,1
	.word	629
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	454
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON6_Bits',0,4,150,2,3
	.word	54482
	.byte	10
	.byte	'_Ifx_SCU_CCUCON7_Bits',0,4,153,2,16,4,11
	.byte	'CPU1DIV',0,1
	.word	629
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	454
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON7_Bits',0,4,157,2,3
	.word	54582
	.byte	10
	.byte	'_Ifx_SCU_CCUCON8_Bits',0,4,160,2,16,4,11
	.byte	'CPU2DIV',0,1
	.word	629
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	454
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON8_Bits',0,4,164,2,3
	.word	54682
	.byte	10
	.byte	'_Ifx_SCU_CCUCON9_Bits',0,4,167,2,16,4,11
	.byte	'CPU3DIV',0,1
	.word	629
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	454
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON9_Bits',0,4,171,2,3
	.word	54782
	.byte	10
	.byte	'_Ifx_SCU_CHIPID_Bits',0,4,174,2,16,4,11
	.byte	'CHREV',0,1
	.word	629
	.byte	6,2,2,35,0,11
	.byte	'CHTEC',0,1
	.word	629
	.byte	2,0,2,35,0,11
	.byte	'CHPK',0,1
	.word	629
	.byte	4,4,2,35,1,11
	.byte	'CHID',0,1
	.word	629
	.byte	4,0,2,35,1,11
	.byte	'EEA',0,1
	.word	629
	.byte	1,7,2,35,2,11
	.byte	'UCODE',0,1
	.word	629
	.byte	7,0,2,35,2,11
	.byte	'FSIZE',0,1
	.word	629
	.byte	4,4,2,35,3,11
	.byte	'VART',0,1
	.word	629
	.byte	3,1,2,35,3,11
	.byte	'SEC',0,1
	.word	629
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_CHIPID_Bits',0,4,185,2,3
	.word	54882
	.byte	10
	.byte	'_Ifx_SCU_DTSCLIM_Bits',0,4,188,2,16,4,11
	.byte	'LOWER',0,2
	.word	646
	.byte	12,4,2,35,0,11
	.byte	'reserved_12',0,1
	.word	629
	.byte	1,3,2,35,1,11
	.byte	'BGPOK',0,1
	.word	629
	.byte	1,2,2,35,1,11
	.byte	'EN',0,1
	.word	629
	.byte	1,1,2,35,1,11
	.byte	'LLU',0,1
	.word	629
	.byte	1,0,2,35,1,11
	.byte	'UPPER',0,2
	.word	646
	.byte	12,4,2,35,2,11
	.byte	'INTEN',0,1
	.word	629
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	629
	.byte	1,2,2,35,3,11
	.byte	'INT',0,1
	.word	629
	.byte	1,1,2,35,3,11
	.byte	'UOF',0,1
	.word	629
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_DTSCLIM_Bits',0,4,200,2,3
	.word	55085
	.byte	10
	.byte	'_Ifx_SCU_DTSCSTAT_Bits',0,4,203,2,16,4,11
	.byte	'RESULT',0,2
	.word	646
	.byte	12,4,2,35,0,11
	.byte	'reserved_12',0,4
	.word	454
	.byte	20,0,2,35,0,0,32
	.byte	'Ifx_SCU_DTSCSTAT_Bits',0,4,207,2,3
	.word	55317
	.byte	10
	.byte	'_Ifx_SCU_EICON0_Bits',0,4,210,2,16,4,11
	.byte	'reserved_0',0,4
	.word	477
	.byte	1,31,2,35,0,11
	.byte	'ENDINIT',0,4
	.word	477
	.byte	1,30,2,35,0,11
	.byte	'EPW',0,4
	.word	477
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	477
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_SCU_EICON0_Bits',0,4,216,2,3
	.word	55419
	.byte	10
	.byte	'_Ifx_SCU_EICON1_Bits',0,4,219,2,16,4,11
	.byte	'reserved_0',0,1
	.word	629
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	629
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	629
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	629
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	629
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	629
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	454
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_SCU_EICON1_Bits',0,4,228,2,3
	.word	55547
	.byte	10
	.byte	'_Ifx_SCU_EICR_Bits',0,4,231,2,16,4,11
	.byte	'reserved_0',0,1
	.word	629
	.byte	4,4,2,35,0,11
	.byte	'EXIS0',0,1
	.word	629
	.byte	3,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	629
	.byte	1,0,2,35,0,11
	.byte	'FEN0',0,1
	.word	629
	.byte	1,7,2,35,1,11
	.byte	'REN0',0,1
	.word	629
	.byte	1,6,2,35,1,11
	.byte	'LDEN0',0,1
	.word	629
	.byte	1,5,2,35,1,11
	.byte	'EIEN0',0,1
	.word	629
	.byte	1,4,2,35,1,11
	.byte	'INP0',0,1
	.word	629
	.byte	3,1,2,35,1,11
	.byte	'reserved_15',0,4
	.word	454
	.byte	5,12,2,35,0,11
	.byte	'EXIS1',0,1
	.word	629
	.byte	3,1,2,35,2,11
	.byte	'reserved_23',0,1
	.word	629
	.byte	1,0,2,35,2,11
	.byte	'FEN1',0,1
	.word	629
	.byte	1,7,2,35,3,11
	.byte	'REN1',0,1
	.word	629
	.byte	1,6,2,35,3,11
	.byte	'LDEN1',0,1
	.word	629
	.byte	1,5,2,35,3,11
	.byte	'EIEN1',0,1
	.word	629
	.byte	1,4,2,35,3,11
	.byte	'INP1',0,1
	.word	629
	.byte	3,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	629
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_EICR_Bits',0,4,250,2,3
	.word	55736
	.byte	10
	.byte	'_Ifx_SCU_EIFILT_Bits',0,4,253,2,16,4,11
	.byte	'FILRQ0A',0,1
	.word	629
	.byte	1,7,2,35,0,11
	.byte	'FILRQ5A',0,1
	.word	629
	.byte	1,6,2,35,0,11
	.byte	'FILRQ2A',0,1
	.word	629
	.byte	1,5,2,35,0,11
	.byte	'FILRQ3A',0,1
	.word	629
	.byte	1,4,2,35,0,11
	.byte	'FILRQ0C',0,1
	.word	629
	.byte	1,3,2,35,0,11
	.byte	'FILRQ1C',0,1
	.word	629
	.byte	1,2,2,35,0,11
	.byte	'FILRQ3C',0,1
	.word	629
	.byte	1,1,2,35,0,11
	.byte	'FILRQ2C',0,1
	.word	629
	.byte	1,0,2,35,0,11
	.byte	'FILRQ4A',0,1
	.word	629
	.byte	1,7,2,35,1,11
	.byte	'FILRQ6A',0,1
	.word	629
	.byte	1,6,2,35,1,11
	.byte	'FILRQ1A',0,1
	.word	629
	.byte	1,5,2,35,1,11
	.byte	'FILRQ7A',0,1
	.word	629
	.byte	1,4,2,35,1,11
	.byte	'FILRQ6D',0,1
	.word	629
	.byte	1,3,2,35,1,11
	.byte	'FILRQ4D',0,1
	.word	629
	.byte	1,2,2,35,1,11
	.byte	'FILRQ2B',0,1
	.word	629
	.byte	1,1,2,35,1,11
	.byte	'FILRQ3B',0,1
	.word	629
	.byte	1,0,2,35,1,11
	.byte	'FILRQ7C',0,1
	.word	629
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	629
	.byte	7,0,2,35,2,11
	.byte	'FILTDIV',0,1
	.word	629
	.byte	4,4,2,35,3,11
	.byte	'DEPTH',0,1
	.word	629
	.byte	4,0,2,35,3,0,32
	.byte	'Ifx_SCU_EIFILT_Bits',0,4,147,3,3
	.word	56100
	.byte	10
	.byte	'_Ifx_SCU_EIFR_Bits',0,4,150,3,16,4,11
	.byte	'INTF0',0,1
	.word	629
	.byte	1,7,2,35,0,11
	.byte	'INTF1',0,1
	.word	629
	.byte	1,6,2,35,0,11
	.byte	'INTF2',0,1
	.word	629
	.byte	1,5,2,35,0,11
	.byte	'INTF3',0,1
	.word	629
	.byte	1,4,2,35,0,11
	.byte	'INTF4',0,1
	.word	629
	.byte	1,3,2,35,0,11
	.byte	'INTF5',0,1
	.word	629
	.byte	1,2,2,35,0,11
	.byte	'INTF6',0,1
	.word	629
	.byte	1,1,2,35,0,11
	.byte	'INTF7',0,1
	.word	629
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	454
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_SCU_EIFR_Bits',0,4,161,3,3
	.word	56539
	.byte	10
	.byte	'_Ifx_SCU_EISR_Bits',0,4,164,3,16,4,11
	.byte	'AE',0,1
	.word	629
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	629
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	629
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	629
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	629
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	629
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	646
	.byte	10,0,2,35,0,11
	.byte	'TIM',0,2
	.word	646
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_EISR_Bits',0,4,174,3,3
	.word	56750
	.byte	10
	.byte	'_Ifx_SCU_EMSR_Bits',0,4,177,3,16,4,11
	.byte	'POL',0,1
	.word	629
	.byte	1,7,2,35,0,11
	.byte	'MODE',0,1
	.word	629
	.byte	1,6,2,35,0,11
	.byte	'ENON',0,1
	.word	629
	.byte	1,5,2,35,0,11
	.byte	'PSEL',0,1
	.word	629
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,2
	.word	646
	.byte	12,0,2,35,0,11
	.byte	'EMSF',0,1
	.word	629
	.byte	1,7,2,35,2,11
	.byte	'SEMSF',0,1
	.word	629
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	646
	.byte	14,0,2,35,2,0,32
	.byte	'Ifx_SCU_EMSR_Bits',0,4,187,3,3
	.word	56926
	.byte	10
	.byte	'_Ifx_SCU_EMSSW_Bits',0,4,190,3,16,4,11
	.byte	'reserved_0',0,4
	.word	454
	.byte	24,8,2,35,0,11
	.byte	'EMSFM',0,1
	.word	629
	.byte	2,6,2,35,3,11
	.byte	'SEMSFM',0,1
	.word	629
	.byte	2,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	629
	.byte	4,0,2,35,3,0,32
	.byte	'Ifx_SCU_EMSSW_Bits',0,4,196,3,3
	.word	57120
	.byte	10
	.byte	'_Ifx_SCU_ESRCFGX_ESRCFGX_Bits',0,4,199,3,16,4,11
	.byte	'reserved_0',0,1
	.word	629
	.byte	7,1,2,35,0,11
	.byte	'EDCON',0,2
	.word	646
	.byte	2,7,2,35,0,11
	.byte	'reserved_9',0,4
	.word	454
	.byte	23,0,2,35,0,0,32
	.byte	'Ifx_SCU_ESRCFGX_ESRCFGX_Bits',0,4,204,3,3
	.word	57255
	.byte	10
	.byte	'_Ifx_SCU_ESROCFG_Bits',0,4,207,3,16,4,11
	.byte	'ARI',0,1
	.word	629
	.byte	1,7,2,35,0,11
	.byte	'ARC',0,1
	.word	629
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	454
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_SCU_ESROCFG_Bits',0,4,212,3,3
	.word	57391
	.byte	10
	.byte	'_Ifx_SCU_EXTCON_Bits',0,4,215,3,16,4,11
	.byte	'EN0',0,1
	.word	629
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	629
	.byte	1,6,2,35,0,11
	.byte	'SEL0',0,1
	.word	629
	.byte	4,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	646
	.byte	10,0,2,35,0,11
	.byte	'EN1',0,1
	.word	629
	.byte	1,7,2,35,2,11
	.byte	'NSEL',0,1
	.word	629
	.byte	1,6,2,35,2,11
	.byte	'SEL1',0,1
	.word	629
	.byte	4,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	629
	.byte	2,0,2,35,2,11
	.byte	'DIV1',0,1
	.word	629
	.byte	8,0,2,35,3,0,32
	.byte	'Ifx_SCU_EXTCON_Bits',0,4,226,3,3
	.word	57502
	.byte	10
	.byte	'_Ifx_SCU_FDR_Bits',0,4,229,3,16,4,11
	.byte	'STEP',0,2
	.word	646
	.byte	10,6,2,35,0,11
	.byte	'reserved_10',0,1
	.word	629
	.byte	4,2,2,35,1,11
	.byte	'DM',0,1
	.word	629
	.byte	2,0,2,35,1,11
	.byte	'RESULT',0,2
	.word	646
	.byte	10,6,2,35,2,11
	.byte	'reserved_26',0,1
	.word	629
	.byte	5,1,2,35,3,11
	.byte	'DISCLK',0,1
	.word	629
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_FDR_Bits',0,4,237,3,3
	.word	57720
	.byte	10
	.byte	'_Ifx_SCU_FMR_Bits',0,4,240,3,16,4,11
	.byte	'FS0',0,1
	.word	629
	.byte	1,7,2,35,0,11
	.byte	'FS1',0,1
	.word	629
	.byte	1,6,2,35,0,11
	.byte	'FS2',0,1
	.word	629
	.byte	1,5,2,35,0,11
	.byte	'FS3',0,1
	.word	629
	.byte	1,4,2,35,0,11
	.byte	'FS4',0,1
	.word	629
	.byte	1,3,2,35,0,11
	.byte	'FS5',0,1
	.word	629
	.byte	1,2,2,35,0,11
	.byte	'FS6',0,1
	.word	629
	.byte	1,1,2,35,0,11
	.byte	'FS7',0,1
	.word	629
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	629
	.byte	8,0,2,35,1,11
	.byte	'FC0',0,1
	.word	629
	.byte	1,7,2,35,2,11
	.byte	'FC1',0,1
	.word	629
	.byte	1,6,2,35,2,11
	.byte	'FC2',0,1
	.word	629
	.byte	1,5,2,35,2,11
	.byte	'FC3',0,1
	.word	629
	.byte	1,4,2,35,2,11
	.byte	'FC4',0,1
	.word	629
	.byte	1,3,2,35,2,11
	.byte	'FC5',0,1
	.word	629
	.byte	1,2,2,35,2,11
	.byte	'FC6',0,1
	.word	629
	.byte	1,1,2,35,2,11
	.byte	'FC7',0,1
	.word	629
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	629
	.byte	8,0,2,35,3,0,32
	.byte	'Ifx_SCU_FMR_Bits',0,4,132,4,3
	.word	57883
	.byte	10
	.byte	'_Ifx_SCU_ID_Bits',0,4,135,4,16,4,11
	.byte	'MODREV',0,1
	.word	629
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	629
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	646
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_ID_Bits',0,4,140,4,3
	.word	58219
	.byte	10
	.byte	'_Ifx_SCU_IGCR_Bits',0,4,143,4,16,4,11
	.byte	'IPEN00',0,1
	.word	629
	.byte	1,7,2,35,0,11
	.byte	'IPEN01',0,1
	.word	629
	.byte	1,6,2,35,0,11
	.byte	'IPEN02',0,1
	.word	629
	.byte	1,5,2,35,0,11
	.byte	'IPEN03',0,1
	.word	629
	.byte	1,4,2,35,0,11
	.byte	'IPEN04',0,1
	.word	629
	.byte	1,3,2,35,0,11
	.byte	'IPEN05',0,1
	.word	629
	.byte	1,2,2,35,0,11
	.byte	'IPEN06',0,1
	.word	629
	.byte	1,1,2,35,0,11
	.byte	'IPEN07',0,1
	.word	629
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	629
	.byte	5,3,2,35,1,11
	.byte	'GEEN0',0,1
	.word	629
	.byte	1,2,2,35,1,11
	.byte	'IGP0',0,1
	.word	629
	.byte	2,0,2,35,1,11
	.byte	'IPEN10',0,1
	.word	629
	.byte	1,7,2,35,2,11
	.byte	'IPEN11',0,1
	.word	629
	.byte	1,6,2,35,2,11
	.byte	'IPEN12',0,1
	.word	629
	.byte	1,5,2,35,2,11
	.byte	'IPEN13',0,1
	.word	629
	.byte	1,4,2,35,2,11
	.byte	'IPEN14',0,1
	.word	629
	.byte	1,3,2,35,2,11
	.byte	'IPEN15',0,1
	.word	629
	.byte	1,2,2,35,2,11
	.byte	'IPEN16',0,1
	.word	629
	.byte	1,1,2,35,2,11
	.byte	'IPEN17',0,1
	.word	629
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	629
	.byte	5,3,2,35,3,11
	.byte	'GEEN1',0,1
	.word	629
	.byte	1,2,2,35,3,11
	.byte	'IGP1',0,1
	.word	629
	.byte	2,0,2,35,3,0,32
	.byte	'Ifx_SCU_IGCR_Bits',0,4,167,4,3
	.word	58326
	.byte	10
	.byte	'_Ifx_SCU_IN_Bits',0,4,170,4,16,4,11
	.byte	'P0',0,1
	.word	629
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	629
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	454
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_SCU_IN_Bits',0,4,175,4,3
	.word	58778
	.byte	10
	.byte	'_Ifx_SCU_IOCR_Bits',0,4,178,4,16,4,11
	.byte	'reserved_0',0,1
	.word	629
	.byte	4,4,2,35,0,11
	.byte	'PC0',0,1
	.word	629
	.byte	4,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	629
	.byte	4,4,2,35,1,11
	.byte	'PC1',0,1
	.word	629
	.byte	4,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	646
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_IOCR_Bits',0,4,185,4,3
	.word	58877
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL0_Bits',0,4,188,4,16,4,11
	.byte	'LBISTREQ',0,1
	.word	629
	.byte	1,7,2,35,0,11
	.byte	'LBISTRES',0,1
	.word	629
	.byte	1,6,2,35,0,11
	.byte	'PATTERNS',0,4
	.word	454
	.byte	18,12,2,35,0,11
	.byte	'reserved_20',0,2
	.word	646
	.byte	8,4,2,35,2,11
	.byte	'LBISTDONE',0,1
	.word	629
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	629
	.byte	1,2,2,35,3,11
	.byte	'LBISTERRINJ',0,1
	.word	629
	.byte	1,1,2,35,3,11
	.byte	'LBISTREQRED',0,1
	.word	629
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_LBISTCTRL0_Bits',0,4,198,4,3
	.word	59027
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL1_Bits',0,4,201,4,16,4,11
	.byte	'SEED',0,4
	.word	454
	.byte	19,13,2,35,0,11
	.byte	'reserved_19',0,1
	.word	629
	.byte	5,0,2,35,2,11
	.byte	'SPLITSH',0,1
	.word	629
	.byte	3,5,2,35,3,11
	.byte	'BODY',0,1
	.word	629
	.byte	1,4,2,35,3,11
	.byte	'LBISTFREQU',0,1
	.word	629
	.byte	4,0,2,35,3,0,32
	.byte	'Ifx_SCU_LBISTCTRL1_Bits',0,4,208,4,3
	.word	59265
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL2_Bits',0,4,211,4,16,4,11
	.byte	'LENGTH',0,2
	.word	646
	.byte	12,4,2,35,0,11
	.byte	'reserved_12',0,4
	.word	454
	.byte	20,0,2,35,0,0,32
	.byte	'Ifx_SCU_LBISTCTRL2_Bits',0,4,215,4,3
	.word	59426
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL3_Bits',0,4,218,4,16,4,11
	.byte	'SIGNATURE',0,4
	.word	454
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_SCU_LBISTCTRL3_Bits',0,4,221,4,3
	.word	59532
	.byte	10
	.byte	'_Ifx_SCU_LCLCON0_Bits',0,4,224,4,16,4,11
	.byte	'LS2',0,1
	.word	629
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,2
	.word	646
	.byte	14,1,2,35,0,11
	.byte	'LSEN2',0,1
	.word	629
	.byte	1,0,2,35,1,11
	.byte	'LS0',0,1
	.word	629
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,2
	.word	646
	.byte	14,1,2,35,2,11
	.byte	'LSEN0',0,1
	.word	629
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_LCLCON0_Bits',0,4,232,4,3
	.word	59618
	.byte	10
	.byte	'_Ifx_SCU_LCLCON1_Bits',0,4,235,4,16,4,11
	.byte	'LS3',0,1
	.word	629
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,2
	.word	646
	.byte	14,1,2,35,0,11
	.byte	'LSEN3',0,1
	.word	629
	.byte	1,0,2,35,1,11
	.byte	'LS1',0,1
	.word	629
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,2
	.word	646
	.byte	14,1,2,35,2,11
	.byte	'LSEN1',0,1
	.word	629
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_LCLCON1_Bits',0,4,243,4,3
	.word	59786
	.byte	10
	.byte	'_Ifx_SCU_LCLTEST_Bits',0,4,246,4,16,4,11
	.byte	'LCLT0',0,1
	.word	629
	.byte	1,7,2,35,0,11
	.byte	'LCLT1',0,1
	.word	629
	.byte	1,6,2,35,0,11
	.byte	'LCLT2',0,1
	.word	629
	.byte	1,5,2,35,0,11
	.byte	'LCLT3',0,1
	.word	629
	.byte	1,4,2,35,0,11
	.byte	'LCLT4',0,1
	.word	629
	.byte	1,3,2,35,0,11
	.byte	'LCLT5',0,1
	.word	629
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	646
	.byte	10,0,2,35,0,11
	.byte	'PLCLT0',0,1
	.word	629
	.byte	1,7,2,35,2,11
	.byte	'PLCLT1',0,1
	.word	629
	.byte	1,6,2,35,2,11
	.byte	'PLCLT2',0,1
	.word	629
	.byte	1,5,2,35,2,11
	.byte	'PLCLT3',0,1
	.word	629
	.byte	1,4,2,35,2,11
	.byte	'PLCLT4',0,1
	.word	629
	.byte	1,3,2,35,2,11
	.byte	'PLCLT5',0,1
	.word	629
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	646
	.byte	10,0,2,35,2,0,32
	.byte	'Ifx_SCU_LCLTEST_Bits',0,4,134,5,3
	.word	59954
	.byte	10
	.byte	'_Ifx_SCU_MANID_Bits',0,4,137,5,16,4,11
	.byte	'DEPT',0,1
	.word	629
	.byte	5,3,2,35,0,11
	.byte	'MANUF',0,2
	.word	646
	.byte	11,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	646
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_MANID_Bits',0,4,142,5,3
	.word	60268
	.byte	10
	.byte	'_Ifx_SCU_OMR_Bits',0,4,145,5,16,4,11
	.byte	'PS0',0,1
	.word	629
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	629
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,2
	.word	646
	.byte	14,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	629
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	629
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	646
	.byte	14,0,2,35,2,0,32
	.byte	'Ifx_SCU_OMR_Bits',0,4,153,5,3
	.word	60379
	.byte	10
	.byte	'_Ifx_SCU_OSCCON_Bits',0,4,156,5,16,4,11
	.byte	'reserved_0',0,1
	.word	629
	.byte	1,7,2,35,0,11
	.byte	'PLLLV',0,1
	.word	629
	.byte	1,6,2,35,0,11
	.byte	'OSCRES',0,1
	.word	629
	.byte	1,5,2,35,0,11
	.byte	'GAINSEL',0,1
	.word	629
	.byte	2,3,2,35,0,11
	.byte	'MODE',0,1
	.word	629
	.byte	2,1,2,35,0,11
	.byte	'SHBY',0,1
	.word	629
	.byte	1,0,2,35,0,11
	.byte	'PLLHV',0,1
	.word	629
	.byte	1,7,2,35,1,11
	.byte	'HYSEN',0,1
	.word	629
	.byte	1,6,2,35,1,11
	.byte	'HYSCTL',0,1
	.word	629
	.byte	2,4,2,35,1,11
	.byte	'AMPCTL',0,1
	.word	629
	.byte	2,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	629
	.byte	2,0,2,35,1,11
	.byte	'OSCVAL',0,1
	.word	629
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	629
	.byte	2,1,2,35,2,11
	.byte	'APREN',0,1
	.word	629
	.byte	1,0,2,35,2,11
	.byte	'CAP0EN',0,1
	.word	629
	.byte	1,7,2,35,3,11
	.byte	'CAP1EN',0,1
	.word	629
	.byte	1,6,2,35,3,11
	.byte	'CAP2EN',0,1
	.word	629
	.byte	1,5,2,35,3,11
	.byte	'CAP3EN',0,1
	.word	629
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	629
	.byte	4,0,2,35,3,0,32
	.byte	'Ifx_SCU_OSCCON_Bits',0,4,177,5,3
	.word	60537
	.byte	10
	.byte	'_Ifx_SCU_OUT_Bits',0,4,180,5,16,4,11
	.byte	'P0',0,1
	.word	629
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	629
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	454
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_SCU_OUT_Bits',0,4,185,5,3
	.word	60948
	.byte	10
	.byte	'_Ifx_SCU_OVCCON_Bits',0,4,188,5,16,4,11
	.byte	'CSEL0',0,1
	.word	629
	.byte	1,7,2,35,0,11
	.byte	'CSEL1',0,1
	.word	629
	.byte	1,6,2,35,0,11
	.byte	'CSEL2',0,1
	.word	629
	.byte	1,5,2,35,0,11
	.byte	'CSEL3',0,1
	.word	629
	.byte	1,4,2,35,0,11
	.byte	'CSEL4',0,1
	.word	629
	.byte	1,3,2,35,0,11
	.byte	'CSEL5',0,1
	.word	629
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	646
	.byte	10,0,2,35,0,11
	.byte	'OVSTRT',0,1
	.word	629
	.byte	1,7,2,35,2,11
	.byte	'OVSTP',0,1
	.word	629
	.byte	1,6,2,35,2,11
	.byte	'DCINVAL',0,1
	.word	629
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	629
	.byte	5,0,2,35,2,11
	.byte	'OVCONF',0,1
	.word	629
	.byte	1,7,2,35,3,11
	.byte	'POVCONF',0,1
	.word	629
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	629
	.byte	6,0,2,35,3,0,32
	.byte	'Ifx_SCU_OVCCON_Bits',0,4,204,5,3
	.word	61049
	.byte	10
	.byte	'_Ifx_SCU_OVCENABLE_Bits',0,4,207,5,16,4,11
	.byte	'OVEN0',0,1
	.word	629
	.byte	1,7,2,35,0,11
	.byte	'OVEN1',0,1
	.word	629
	.byte	1,6,2,35,0,11
	.byte	'OVEN2',0,1
	.word	629
	.byte	1,5,2,35,0,11
	.byte	'OVEN3',0,1
	.word	629
	.byte	1,4,2,35,0,11
	.byte	'OVEN4',0,1
	.word	629
	.byte	1,3,2,35,0,11
	.byte	'OVEN5',0,1
	.word	629
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	454
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_SCU_OVCENABLE_Bits',0,4,216,5,3
	.word	61367
	.byte	10
	.byte	'_Ifx_SCU_PDISC_Bits',0,4,219,5,16,4,11
	.byte	'PDIS0',0,1
	.word	629
	.byte	1,7,2,35,0,11
	.byte	'PDIS1',0,1
	.word	629
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	454
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_SCU_PDISC_Bits',0,4,224,5,3
	.word	61554
	.byte	10
	.byte	'_Ifx_SCU_PDR_Bits',0,4,227,5,16,4,11
	.byte	'PD0',0,1
	.word	629
	.byte	2,6,2,35,0,11
	.byte	'PL0',0,1
	.word	629
	.byte	2,4,2,35,0,11
	.byte	'PD1',0,1
	.word	629
	.byte	2,2,2,35,0,11
	.byte	'PL1',0,1
	.word	629
	.byte	2,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	454
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_SCU_PDR_Bits',0,4,234,5,3
	.word	61665
	.byte	10
	.byte	'_Ifx_SCU_PDRR_Bits',0,4,237,5,16,4,11
	.byte	'PDR0',0,1
	.word	629
	.byte	1,7,2,35,0,11
	.byte	'PDR1',0,1
	.word	629
	.byte	1,6,2,35,0,11
	.byte	'PDR2',0,1
	.word	629
	.byte	1,5,2,35,0,11
	.byte	'PDR3',0,1
	.word	629
	.byte	1,4,2,35,0,11
	.byte	'PDR4',0,1
	.word	629
	.byte	1,3,2,35,0,11
	.byte	'PDR5',0,1
	.word	629
	.byte	1,2,2,35,0,11
	.byte	'PDR6',0,1
	.word	629
	.byte	1,1,2,35,0,11
	.byte	'PDR7',0,1
	.word	629
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	454
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_SCU_PDRR_Bits',0,4,248,5,3
	.word	61798
	.byte	10
	.byte	'_Ifx_SCU_PERPLLCON0_Bits',0,4,251,5,16,4,11
	.byte	'DIVBY',0,1
	.word	629
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,2
	.word	646
	.byte	8,7,2,35,0,11
	.byte	'NDIV',0,1
	.word	629
	.byte	7,0,2,35,1,11
	.byte	'PLLPWD',0,1
	.word	629
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	629
	.byte	1,6,2,35,2,11
	.byte	'RESLD',0,1
	.word	629
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	629
	.byte	5,0,2,35,2,11
	.byte	'PDIV',0,1
	.word	629
	.byte	3,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	629
	.byte	5,0,2,35,3,0,32
	.byte	'Ifx_SCU_PERPLLCON0_Bits',0,4,134,6,3
	.word	62001
	.byte	10
	.byte	'_Ifx_SCU_PERPLLCON1_Bits',0,4,137,6,16,4,11
	.byte	'K2DIV',0,1
	.word	629
	.byte	3,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	629
	.byte	5,0,2,35,0,11
	.byte	'K3DIV',0,1
	.word	629
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	454
	.byte	21,0,2,35,0,0,32
	.byte	'Ifx_SCU_PERPLLCON1_Bits',0,4,143,6,3
	.word	62241
	.byte	10
	.byte	'_Ifx_SCU_PERPLLSTAT_Bits',0,4,146,6,16,4,11
	.byte	'reserved_0',0,1
	.word	629
	.byte	1,7,2,35,0,11
	.byte	'PWDSTAT',0,1
	.word	629
	.byte	1,6,2,35,0,11
	.byte	'LOCK',0,1
	.word	629
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	629
	.byte	1,4,2,35,0,11
	.byte	'K3RDY',0,1
	.word	629
	.byte	1,3,2,35,0,11
	.byte	'K2RDY',0,1
	.word	629
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	629
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,4
	.word	454
	.byte	25,0,2,35,0,0,32
	.byte	'Ifx_SCU_PERPLLSTAT_Bits',0,4,156,6,3
	.word	62385
	.byte	10
	.byte	'_Ifx_SCU_PMCSR0_Bits',0,4,159,6,16,4,11
	.byte	'REQSLP',0,1
	.word	629
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	629
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	629
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	454
	.byte	21,0,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR0_Bits',0,4,165,6,3
	.word	62607
	.byte	10
	.byte	'_Ifx_SCU_PMCSR1_Bits',0,4,168,6,16,4,11
	.byte	'REQSLP',0,1
	.word	629
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	629
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	629
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	454
	.byte	21,0,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR1_Bits',0,4,174,6,3
	.word	62743
	.byte	10
	.byte	'_Ifx_SCU_PMCSR2_Bits',0,4,177,6,16,4,11
	.byte	'REQSLP',0,1
	.word	629
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	629
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	629
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	454
	.byte	21,0,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR2_Bits',0,4,183,6,3
	.word	62879
	.byte	10
	.byte	'_Ifx_SCU_PMCSR3_Bits',0,4,186,6,16,4,11
	.byte	'REQSLP',0,1
	.word	629
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	629
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	629
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	454
	.byte	21,0,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR3_Bits',0,4,192,6,3
	.word	63015
	.byte	10
	.byte	'_Ifx_SCU_PMCSR4_Bits',0,4,195,6,16,4,11
	.byte	'REQSLP',0,1
	.word	629
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	629
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	629
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	454
	.byte	21,0,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR4_Bits',0,4,201,6,3
	.word	63151
	.byte	10
	.byte	'_Ifx_SCU_PMCSR5_Bits',0,4,204,6,16,4,11
	.byte	'REQSLP',0,1
	.word	629
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	629
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	629
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	454
	.byte	21,0,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR5_Bits',0,4,210,6,3
	.word	63287
	.byte	10
	.byte	'_Ifx_SCU_PMSTAT0_Bits',0,4,213,6,16,4,11
	.byte	'CPU0',0,1
	.word	629
	.byte	1,7,2,35,0,11
	.byte	'CPU1',0,1
	.word	629
	.byte	1,6,2,35,0,11
	.byte	'CPU2',0,1
	.word	629
	.byte	1,5,2,35,0,11
	.byte	'CPU3',0,1
	.word	629
	.byte	1,4,2,35,0,11
	.byte	'CPU4',0,1
	.word	629
	.byte	1,3,2,35,0,11
	.byte	'CPU5',0,1
	.word	629
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	646
	.byte	10,0,2,35,0,11
	.byte	'CPU0LS',0,1
	.word	629
	.byte	1,7,2,35,2,11
	.byte	'CPU1LS',0,1
	.word	629
	.byte	1,6,2,35,2,11
	.byte	'CPU2LS',0,1
	.word	629
	.byte	1,5,2,35,2,11
	.byte	'CPU3LS',0,1
	.word	629
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,2
	.word	646
	.byte	12,0,2,35,2,0,32
	.byte	'Ifx_SCU_PMSTAT0_Bits',0,4,227,6,3
	.word	63423
	.byte	10
	.byte	'_Ifx_SCU_PMSWCR1_Bits',0,4,230,6,16,4,11
	.byte	'reserved_0',0,1
	.word	629
	.byte	8,0,2,35,0,11
	.byte	'CPUIDLSEL',0,1
	.word	629
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	629
	.byte	1,4,2,35,1,11
	.byte	'IRADIS',0,1
	.word	629
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,4
	.word	454
	.byte	11,8,2,35,0,11
	.byte	'CPUSEL',0,1
	.word	629
	.byte	3,5,2,35,3,11
	.byte	'STBYEVEN',0,1
	.word	629
	.byte	1,4,2,35,3,11
	.byte	'STBYEV',0,1
	.word	629
	.byte	3,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	629
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_PMSWCR1_Bits',0,4,241,6,3
	.word	63695
	.byte	10
	.byte	'_Ifx_SCU_PMTRCSR0_Bits',0,4,244,6,16,4,11
	.byte	'LJTEN',0,1
	.word	629
	.byte	1,7,2,35,0,11
	.byte	'LJTOVEN',0,1
	.word	629
	.byte	1,6,2,35,0,11
	.byte	'LJTOVIEN',0,1
	.word	629
	.byte	1,5,2,35,0,11
	.byte	'LJTSTRT',0,1
	.word	629
	.byte	1,4,2,35,0,11
	.byte	'LJTSTP',0,1
	.word	629
	.byte	1,3,2,35,0,11
	.byte	'LJTCLR',0,1
	.word	629
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	646
	.byte	6,4,2,35,0,11
	.byte	'SDSTEP',0,1
	.word	629
	.byte	4,0,2,35,1,11
	.byte	'VDTEN',0,1
	.word	629
	.byte	1,7,2,35,2,11
	.byte	'VDTOVEN',0,1
	.word	629
	.byte	1,6,2,35,2,11
	.byte	'VDTOVIEN',0,1
	.word	629
	.byte	1,5,2,35,2,11
	.byte	'VDTSTRT',0,1
	.word	629
	.byte	1,4,2,35,2,11
	.byte	'VDTSTP',0,1
	.word	629
	.byte	1,3,2,35,2,11
	.byte	'VDTCLR',0,1
	.word	629
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	646
	.byte	7,3,2,35,2,11
	.byte	'LPSLPEN',0,1
	.word	629
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	629
	.byte	2,0,2,35,3,0,32
	.byte	'Ifx_SCU_PMTRCSR0_Bits',0,4,135,7,3
	.word	63940
	.byte	10
	.byte	'_Ifx_SCU_PMTRCSR1_Bits',0,4,138,7,16,4,11
	.byte	'LJTCV',0,2
	.word	646
	.byte	16,0,2,35,0,11
	.byte	'VDTCV',0,2
	.word	646
	.byte	10,6,2,35,2,11
	.byte	'reserved_26',0,1
	.word	629
	.byte	6,0,2,35,3,0,32
	.byte	'Ifx_SCU_PMTRCSR1_Bits',0,4,143,7,3
	.word	64328
	.byte	10
	.byte	'_Ifx_SCU_PMTRCSR2_Bits',0,4,146,7,16,4,11
	.byte	'LDJMPREQ',0,1
	.word	629
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	629
	.byte	2,4,2,35,0,11
	.byte	'LJTRUN',0,1
	.word	629
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	629
	.byte	2,0,2,35,0,11
	.byte	'LJTOV',0,1
	.word	629
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	629
	.byte	3,4,2,35,1,11
	.byte	'LJTOVCLR',0,1
	.word	629
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	629
	.byte	3,0,2,35,1,11
	.byte	'LJTCNT',0,2
	.word	646
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_PMTRCSR2_Bits',0,4,157,7,3
	.word	64446
	.byte	10
	.byte	'_Ifx_SCU_PMTRCSR3_Bits',0,4,160,7,16,4,11
	.byte	'VDROOPREQ',0,1
	.word	629
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	629
	.byte	2,4,2,35,0,11
	.byte	'VDTRUN',0,1
	.word	629
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	629
	.byte	2,0,2,35,0,11
	.byte	'VDTOV',0,1
	.word	629
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	629
	.byte	3,4,2,35,1,11
	.byte	'VDTOVCLR',0,1
	.word	629
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	629
	.byte	3,0,2,35,1,11
	.byte	'VDTCNT',0,2
	.word	646
	.byte	10,6,2,35,2,11
	.byte	'reserved_26',0,1
	.word	629
	.byte	6,0,2,35,3,0,32
	.byte	'Ifx_SCU_PMTRCSR3_Bits',0,4,172,7,3
	.word	64689
	.byte	10
	.byte	'_Ifx_SCU_RSTCON_Bits',0,4,175,7,16,4,11
	.byte	'ESR0',0,1
	.word	629
	.byte	2,6,2,35,0,11
	.byte	'ESR1',0,1
	.word	629
	.byte	2,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	629
	.byte	2,2,2,35,0,11
	.byte	'SMU',0,1
	.word	629
	.byte	2,0,2,35,0,11
	.byte	'SW',0,1
	.word	629
	.byte	2,6,2,35,1,11
	.byte	'STM0',0,1
	.word	629
	.byte	2,4,2,35,1,11
	.byte	'STM1',0,1
	.word	629
	.byte	2,2,2,35,1,11
	.byte	'STM2',0,1
	.word	629
	.byte	2,0,2,35,1,11
	.byte	'STM3',0,1
	.word	629
	.byte	2,6,2,35,2,11
	.byte	'STM4',0,1
	.word	629
	.byte	2,4,2,35,2,11
	.byte	'STM5',0,1
	.word	629
	.byte	2,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	646
	.byte	10,0,2,35,2,0,32
	.byte	'Ifx_SCU_RSTCON_Bits',0,4,189,7,3
	.word	64956
	.byte	10
	.byte	'_Ifx_SCU_RSTCON2_Bits',0,4,192,7,16,4,11
	.byte	'FRTO',0,1
	.word	629
	.byte	1,7,2,35,0,11
	.byte	'CLRC',0,1
	.word	629
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	629
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	629
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	629
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	629
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	629
	.byte	1,1,2,35,0,11
	.byte	'CSSX',0,2
	.word	646
	.byte	6,3,2,35,0,11
	.byte	'reserved_13',0,1
	.word	629
	.byte	1,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	629
	.byte	1,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	629
	.byte	1,0,2,35,1,11
	.byte	'USRINFO',0,2
	.word	646
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_RSTCON2_Bits',0,4,206,7,3
	.word	65215
	.byte	10
	.byte	'_Ifx_SCU_RSTCON3_Bits',0,4,209,7,16,4,11
	.byte	'reserved_0',0,4
	.word	454
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_SCU_RSTCON3_Bits',0,4,212,7,3
	.word	65520
	.byte	10
	.byte	'_Ifx_SCU_RSTSTAT_Bits',0,4,215,7,16,4,11
	.byte	'ESR0',0,1
	.word	629
	.byte	1,7,2,35,0,11
	.byte	'ESR1',0,1
	.word	629
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	629
	.byte	1,5,2,35,0,11
	.byte	'SMU',0,1
	.word	629
	.byte	1,4,2,35,0,11
	.byte	'SW',0,1
	.word	629
	.byte	1,3,2,35,0,11
	.byte	'STM0',0,1
	.word	629
	.byte	1,2,2,35,0,11
	.byte	'STM1',0,1
	.word	629
	.byte	1,1,2,35,0,11
	.byte	'STM2',0,1
	.word	629
	.byte	1,0,2,35,0,11
	.byte	'STM3',0,1
	.word	629
	.byte	1,7,2,35,1,11
	.byte	'STM4',0,1
	.word	629
	.byte	1,6,2,35,1,11
	.byte	'STM5',0,1
	.word	629
	.byte	1,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	629
	.byte	5,0,2,35,1,11
	.byte	'PORST',0,1
	.word	629
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	629
	.byte	1,6,2,35,2,11
	.byte	'CB0',0,1
	.word	629
	.byte	1,5,2,35,2,11
	.byte	'CB1',0,1
	.word	629
	.byte	1,4,2,35,2,11
	.byte	'CB3',0,1
	.word	629
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	629
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	629
	.byte	1,1,2,35,2,11
	.byte	'EVRC',0,1
	.word	629
	.byte	1,0,2,35,2,11
	.byte	'EVR33',0,1
	.word	629
	.byte	1,7,2,35,3,11
	.byte	'SWD',0,1
	.word	629
	.byte	1,6,2,35,3,11
	.byte	'HSMS',0,1
	.word	629
	.byte	1,5,2,35,3,11
	.byte	'HSMA',0,1
	.word	629
	.byte	1,4,2,35,3,11
	.byte	'STBYR',0,1
	.word	629
	.byte	1,3,2,35,3,11
	.byte	'LBPORST',0,1
	.word	629
	.byte	1,2,2,35,3,11
	.byte	'LBTERM',0,1
	.word	629
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	629
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_RSTSTAT_Bits',0,4,245,7,3
	.word	65601
	.byte	10
	.byte	'_Ifx_SCU_SEICON0_Bits',0,4,248,7,16,4,11
	.byte	'reserved_0',0,4
	.word	477
	.byte	1,31,2,35,0,11
	.byte	'ENDINIT',0,4
	.word	477
	.byte	1,30,2,35,0,11
	.byte	'EPW',0,4
	.word	477
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	477
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_SCU_SEICON0_Bits',0,4,254,7,3
	.word	66150
	.byte	10
	.byte	'_Ifx_SCU_SEICON1_Bits',0,4,129,8,16,4,11
	.byte	'reserved_0',0,1
	.word	629
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	629
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	629
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	629
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	629
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	629
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	454
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_SCU_SEICON1_Bits',0,4,138,8,3
	.word	66280
	.byte	10
	.byte	'_Ifx_SCU_SEISR_Bits',0,4,141,8,16,4,11
	.byte	'AE',0,1
	.word	629
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	629
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	629
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	629
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	629
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	629
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	646
	.byte	10,0,2,35,0,11
	.byte	'TIM',0,2
	.word	646
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_SEISR_Bits',0,4,151,8,3
	.word	66471
	.byte	10
	.byte	'_Ifx_SCU_STCON_Bits',0,4,154,8,16,4,11
	.byte	'reserved_0',0,2
	.word	646
	.byte	13,3,2,35,0,11
	.byte	'SFCBAE',0,1
	.word	629
	.byte	1,2,2,35,1,11
	.byte	'CFCBAE',0,1
	.word	629
	.byte	1,1,2,35,1,11
	.byte	'STP',0,1
	.word	629
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	646
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_STCON_Bits',0,4,161,8,3
	.word	66649
	.byte	10
	.byte	'_Ifx_SCU_STMEM1_Bits',0,4,164,8,16,4,11
	.byte	'MEM',0,4
	.word	454
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM1_Bits',0,4,167,8,3
	.word	66800
	.byte	10
	.byte	'_Ifx_SCU_STMEM2_Bits',0,4,170,8,16,4,11
	.byte	'MEM',0,4
	.word	454
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM2_Bits',0,4,173,8,3
	.word	66872
	.byte	10
	.byte	'_Ifx_SCU_STMEM3_Bits',0,4,176,8,16,4,11
	.byte	'MEM',0,4
	.word	454
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM3_Bits',0,4,179,8,3
	.word	66944
	.byte	10
	.byte	'_Ifx_SCU_STMEM4_Bits',0,4,182,8,16,4,11
	.byte	'MEM',0,4
	.word	454
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM4_Bits',0,4,185,8,3
	.word	67016
	.byte	10
	.byte	'_Ifx_SCU_STMEM5_Bits',0,4,188,8,16,4,11
	.byte	'MEM',0,4
	.word	454
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM5_Bits',0,4,191,8,3
	.word	67088
	.byte	10
	.byte	'_Ifx_SCU_STMEM6_Bits',0,4,194,8,16,4,11
	.byte	'MEM',0,4
	.word	454
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM6_Bits',0,4,197,8,3
	.word	67160
	.byte	10
	.byte	'_Ifx_SCU_STSTAT_Bits',0,4,200,8,16,4,11
	.byte	'HWCFG',0,1
	.word	629
	.byte	8,0,2,35,0,11
	.byte	'FTM',0,1
	.word	629
	.byte	7,1,2,35,1,11
	.byte	'MODE',0,1
	.word	629
	.byte	1,0,2,35,1,11
	.byte	'FCBAE',0,1
	.word	629
	.byte	1,7,2,35,2,11
	.byte	'LUDIS',0,1
	.word	629
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,1
	.word	629
	.byte	1,5,2,35,2,11
	.byte	'TRSTL',0,1
	.word	629
	.byte	1,4,2,35,2,11
	.byte	'SPDEN',0,1
	.word	629
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	629
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	629
	.byte	1,1,2,35,2,11
	.byte	'reserved_23',0,1
	.word	629
	.byte	1,0,2,35,2,11
	.byte	'RAMINT',0,1
	.word	629
	.byte	1,7,2,35,3,11
	.byte	'reserved_25',0,1
	.word	629
	.byte	3,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	629
	.byte	4,0,2,35,3,0,32
	.byte	'Ifx_SCU_STSTAT_Bits',0,4,216,8,3
	.word	67232
	.byte	10
	.byte	'_Ifx_SCU_SWAPCTRL_Bits',0,4,219,8,16,4,11
	.byte	'ADDRCFG',0,1
	.word	629
	.byte	2,6,2,35,0,11
	.byte	'SPARE',0,2
	.word	646
	.byte	14,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	646
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_SWAPCTRL_Bits',0,4,224,8,3
	.word	67561
	.byte	10
	.byte	'_Ifx_SCU_SWRSTCON_Bits',0,4,227,8,16,4,11
	.byte	'reserved_0',0,1
	.word	629
	.byte	1,7,2,35,0,11
	.byte	'SWRSTREQ',0,1
	.word	629
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	629
	.byte	6,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	629
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	646
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_SWRSTCON_Bits',0,4,234,8,3
	.word	67681
	.byte	10
	.byte	'_Ifx_SCU_SYSCON_Bits',0,4,237,8,16,4,11
	.byte	'CCTRIG0',0,1
	.word	629
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	629
	.byte	1,6,2,35,0,11
	.byte	'RAMINTM',0,1
	.word	629
	.byte	2,4,2,35,0,11
	.byte	'SETLUDIS',0,1
	.word	629
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	629
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	629
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	629
	.byte	1,0,2,35,0,11
	.byte	'DDC',0,1
	.word	629
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	629
	.byte	7,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	646
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_SYSCON_Bits',0,4,249,8,3
	.word	67851
	.byte	10
	.byte	'_Ifx_SCU_SYSPLLCON0_Bits',0,4,252,8,16,4,11
	.byte	'reserved_0',0,1
	.word	629
	.byte	2,6,2,35,0,11
	.byte	'MODEN',0,1
	.word	629
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,2
	.word	646
	.byte	6,7,2,35,0,11
	.byte	'NDIV',0,1
	.word	629
	.byte	7,0,2,35,1,11
	.byte	'PLLPWD',0,1
	.word	629
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	629
	.byte	1,6,2,35,2,11
	.byte	'RESLD',0,1
	.word	629
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	629
	.byte	5,0,2,35,2,11
	.byte	'PDIV',0,1
	.word	629
	.byte	3,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	629
	.byte	3,2,2,35,3,11
	.byte	'INSEL',0,1
	.word	629
	.byte	2,0,2,35,3,0,32
	.byte	'Ifx_SCU_SYSPLLCON0_Bits',0,4,137,9,3
	.word	68114
	.byte	10
	.byte	'_Ifx_SCU_SYSPLLCON1_Bits',0,4,140,9,16,4,11
	.byte	'K2DIV',0,1
	.word	629
	.byte	3,5,2,35,0,11
	.byte	'reserved_3',0,4
	.word	454
	.byte	29,0,2,35,0,0,32
	.byte	'Ifx_SCU_SYSPLLCON1_Bits',0,4,144,9,3
	.word	68393
	.byte	10
	.byte	'_Ifx_SCU_SYSPLLCON2_Bits',0,4,147,9,16,4,11
	.byte	'MODCFG',0,2
	.word	646
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	646
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_SYSPLLCON2_Bits',0,4,151,9,3
	.word	68497
	.byte	10
	.byte	'_Ifx_SCU_SYSPLLSTAT_Bits',0,4,154,9,16,4,11
	.byte	'reserved_0',0,1
	.word	629
	.byte	1,7,2,35,0,11
	.byte	'PWDSTAT',0,1
	.word	629
	.byte	1,6,2,35,0,11
	.byte	'LOCK',0,1
	.word	629
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	629
	.byte	2,3,2,35,0,11
	.byte	'K2RDY',0,1
	.word	629
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	629
	.byte	1,1,2,35,0,11
	.byte	'MODRUN',0,1
	.word	629
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	454
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_SCU_SYSPLLSTAT_Bits',0,4,164,9,3
	.word	68603
	.byte	10
	.byte	'_Ifx_SCU_TRAPCLR_Bits',0,4,167,9,16,4,11
	.byte	'ESR0T',0,1
	.word	629
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	629
	.byte	1,6,2,35,0,11
	.byte	'TRAP2',0,1
	.word	629
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	629
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	454
	.byte	28,0,2,35,0,0,32
	.byte	'Ifx_SCU_TRAPCLR_Bits',0,4,174,9,3
	.word	68826
	.byte	10
	.byte	'_Ifx_SCU_TRAPDIS0_Bits',0,4,177,9,16,4,11
	.byte	'CPU0ESR0T',0,1
	.word	629
	.byte	1,7,2,35,0,11
	.byte	'CPU0ESR1T',0,1
	.word	629
	.byte	1,6,2,35,0,11
	.byte	'CPU0TRAP2T',0,1
	.word	629
	.byte	1,5,2,35,0,11
	.byte	'CPU0SMUT',0,1
	.word	629
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	629
	.byte	4,0,2,35,0,11
	.byte	'CPU1ESR0T',0,1
	.word	629
	.byte	1,7,2,35,1,11
	.byte	'CPU1ESR1T',0,1
	.word	629
	.byte	1,6,2,35,1,11
	.byte	'CPU1TRAP2T',0,1
	.word	629
	.byte	1,5,2,35,1,11
	.byte	'CPU1SMUT',0,1
	.word	629
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	629
	.byte	4,0,2,35,1,11
	.byte	'CPU2ESR0T',0,1
	.word	629
	.byte	1,7,2,35,2,11
	.byte	'CPU2ESR1T',0,1
	.word	629
	.byte	1,6,2,35,2,11
	.byte	'CPU2TRAP2T',0,1
	.word	629
	.byte	1,5,2,35,2,11
	.byte	'CPU2SMUT',0,1
	.word	629
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,1
	.word	629
	.byte	4,0,2,35,2,11
	.byte	'CPU3ESR0T',0,1
	.word	629
	.byte	1,7,2,35,3,11
	.byte	'CPU3ESR1T',0,1
	.word	629
	.byte	1,6,2,35,3,11
	.byte	'CPU3TRAP2T',0,1
	.word	629
	.byte	1,5,2,35,3,11
	.byte	'CPU3SMUT',0,1
	.word	629
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	629
	.byte	4,0,2,35,3,0,32
	.byte	'Ifx_SCU_TRAPDIS0_Bits',0,4,199,9,3
	.word	68974
	.byte	10
	.byte	'_Ifx_SCU_TRAPDIS1_Bits',0,4,202,9,16,4,11
	.byte	'CPU4ESR0T',0,1
	.word	629
	.byte	1,7,2,35,0,11
	.byte	'CPU4ESR1T',0,1
	.word	629
	.byte	1,6,2,35,0,11
	.byte	'CPU4TRAP2T',0,1
	.word	629
	.byte	1,5,2,35,0,11
	.byte	'CPU4SMUT',0,1
	.word	629
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	629
	.byte	4,0,2,35,0,11
	.byte	'CPU5ESR0T',0,1
	.word	629
	.byte	1,7,2,35,1,11
	.byte	'CPU5ESR1T',0,1
	.word	629
	.byte	1,6,2,35,1,11
	.byte	'CPU5TRAP2T',0,1
	.word	629
	.byte	1,5,2,35,1,11
	.byte	'CPU5SMUT',0,1
	.word	629
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	629
	.byte	4,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	646
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_TRAPDIS1_Bits',0,4,215,9,3
	.word	69462
	.byte	10
	.byte	'_Ifx_SCU_TRAPSET_Bits',0,4,218,9,16,4,11
	.byte	'ESR0T',0,1
	.word	629
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	629
	.byte	1,6,2,35,0,11
	.byte	'TRAP2',0,1
	.word	629
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	629
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	454
	.byte	28,0,2,35,0,0,32
	.byte	'Ifx_SCU_TRAPSET_Bits',0,4,225,9,3
	.word	69759
	.byte	10
	.byte	'_Ifx_SCU_TRAPSTAT_Bits',0,4,228,9,16,4,11
	.byte	'ESR0T',0,1
	.word	629
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	629
	.byte	1,6,2,35,0,11
	.byte	'TRAP2',0,1
	.word	629
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	629
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	454
	.byte	28,0,2,35,0,0,32
	.byte	'Ifx_SCU_TRAPSTAT_Bits',0,4,235,9,3
	.word	69907
	.byte	32
	.byte	'Ifx_SCU_WDTCPU_CON0_Bits',0,4,244,9,3
	.word	493
	.byte	32
	.byte	'Ifx_SCU_WDTCPU_CON1_Bits',0,4,132,10,3
	.word	668
	.byte	32
	.byte	'Ifx_SCU_WDTCPU_SR_Bits',0,4,148,10,3
	.word	934
	.byte	10
	.byte	'_Ifx_SCU_WDTS_CON0_Bits',0,4,151,10,16,4,11
	.byte	'ENDINIT',0,4
	.word	477
	.byte	1,31,2,35,0,11
	.byte	'LCK',0,4
	.word	477
	.byte	1,30,2,35,0,11
	.byte	'PW',0,4
	.word	477
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	477
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_SCU_WDTS_CON0_Bits',0,4,157,10,3
	.word	70157
	.byte	10
	.byte	'_Ifx_SCU_WDTS_CON1_Bits',0,4,160,10,16,4,11
	.byte	'CLRIRF',0,1
	.word	629
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	629
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	629
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	629
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	629
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	629
	.byte	1,2,2,35,0,11
	.byte	'UR',0,1
	.word	629
	.byte	1,1,2,35,0,11
	.byte	'PAR',0,1
	.word	629
	.byte	1,0,2,35,0,11
	.byte	'TCR',0,1
	.word	629
	.byte	1,7,2,35,1,11
	.byte	'TCTR',0,1
	.word	629
	.byte	7,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	646
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_WDTS_CON1_Bits',0,4,173,10,3
	.word	70283
	.byte	10
	.byte	'_Ifx_SCU_WDTS_SR_Bits',0,4,176,10,16,4,11
	.byte	'AE',0,1
	.word	629
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	629
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	629
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	629
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	629
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	629
	.byte	1,2,2,35,0,11
	.byte	'US',0,1
	.word	629
	.byte	1,1,2,35,0,11
	.byte	'PAS',0,1
	.word	629
	.byte	1,0,2,35,0,11
	.byte	'TCS',0,1
	.word	629
	.byte	1,7,2,35,1,11
	.byte	'TCT',0,1
	.word	629
	.byte	7,0,2,35,1,11
	.byte	'TIM',0,2
	.word	646
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_WDTS_SR_Bits',0,4,189,10,3
	.word	70535
	.byte	12,4,197,10,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51191
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_ACCEN00',0,4,202,10,3
	.word	70754
	.byte	12,4,205,10,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51750
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_ACCEN01',0,4,210,10,3
	.word	70819
	.byte	12,4,213,10,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51829
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_ACCEN10',0,4,218,10,3
	.word	70884
	.byte	12,4,221,10,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52389
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_ACCEN11',0,4,226,10,3
	.word	70949
	.byte	12,4,229,10,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52470
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_ARSTDIS',0,4,234,10,3
	.word	71014
	.byte	12,4,237,10,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52687
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON0',0,4,242,10,3
	.word	71079
	.byte	12,4,245,10,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52960
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON1',0,4,250,10,3
	.word	71144
	.byte	12,4,253,10,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53286
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON10',0,4,130,11,3
	.word	71209
	.byte	12,4,133,11,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53388
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON11',0,4,138,11,3
	.word	71275
	.byte	12,4,141,11,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53490
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON2',0,4,146,11,3
	.word	71341
	.byte	12,4,149,11,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53764
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON3',0,4,154,11,3
	.word	71406
	.byte	12,4,157,11,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54133
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON4',0,4,162,11,3
	.word	71471
	.byte	12,4,165,11,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54313
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON5',0,4,170,11,3
	.word	71536
	.byte	12,4,173,11,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54482
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON6',0,4,178,11,3
	.word	71601
	.byte	12,4,181,11,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54582
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON7',0,4,186,11,3
	.word	71666
	.byte	12,4,189,11,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54682
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON8',0,4,194,11,3
	.word	71731
	.byte	12,4,197,11,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54782
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON9',0,4,202,11,3
	.word	71796
	.byte	12,4,205,11,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54882
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CHIPID',0,4,210,11,3
	.word	71861
	.byte	12,4,213,11,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	55085
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_DTSCLIM',0,4,218,11,3
	.word	71925
	.byte	12,4,221,11,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	55317
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_DTSCSTAT',0,4,226,11,3
	.word	71990
	.byte	12,4,229,11,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	55419
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EICON0',0,4,234,11,3
	.word	72056
	.byte	12,4,237,11,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	55547
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EICON1',0,4,242,11,3
	.word	72120
	.byte	12,4,245,11,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	55736
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EICR',0,4,250,11,3
	.word	72184
	.byte	12,4,253,11,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	56100
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EIFILT',0,4,130,12,3
	.word	72246
	.byte	12,4,133,12,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	56539
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EIFR',0,4,138,12,3
	.word	72310
	.byte	12,4,141,12,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	56750
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EISR',0,4,146,12,3
	.word	72372
	.byte	12,4,149,12,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	56926
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EMSR',0,4,154,12,3
	.word	72434
	.byte	12,4,157,12,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57120
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EMSSW',0,4,162,12,3
	.word	72496
	.byte	12,4,165,12,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57255
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_ESRCFGX_ESRCFGX',0,4,170,12,3
	.word	72559
	.byte	12,4,173,12,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57391
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_ESROCFG',0,4,178,12,3
	.word	72632
	.byte	12,4,181,12,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57502
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EXTCON',0,4,186,12,3
	.word	72697
	.byte	12,4,189,12,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57720
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_FDR',0,4,194,12,3
	.word	72761
	.byte	12,4,197,12,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57883
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_FMR',0,4,202,12,3
	.word	72822
	.byte	12,4,205,12,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	58219
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_ID',0,4,210,12,3
	.word	72883
	.byte	12,4,213,12,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	58326
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_IGCR',0,4,218,12,3
	.word	72943
	.byte	12,4,221,12,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	58778
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_IN',0,4,226,12,3
	.word	73005
	.byte	12,4,229,12,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	58877
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_IOCR',0,4,234,12,3
	.word	73065
	.byte	12,4,237,12,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	59027
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_LBISTCTRL0',0,4,242,12,3
	.word	73127
	.byte	12,4,245,12,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	59265
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_LBISTCTRL1',0,4,250,12,3
	.word	73195
	.byte	12,4,253,12,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	59426
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_LBISTCTRL2',0,4,130,13,3
	.word	73263
	.byte	12,4,133,13,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	59532
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_LBISTCTRL3',0,4,138,13,3
	.word	73331
	.byte	12,4,141,13,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	59618
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_LCLCON0',0,4,146,13,3
	.word	73399
	.byte	12,4,149,13,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	59786
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_LCLCON1',0,4,154,13,3
	.word	73464
	.byte	12,4,157,13,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	59954
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_LCLTEST',0,4,162,13,3
	.word	73529
	.byte	12,4,165,13,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	60268
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_MANID',0,4,170,13,3
	.word	73594
	.byte	12,4,173,13,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	60379
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_OMR',0,4,178,13,3
	.word	73657
	.byte	12,4,181,13,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	60537
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_OSCCON',0,4,186,13,3
	.word	73718
	.byte	12,4,189,13,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	60948
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_OUT',0,4,194,13,3
	.word	73782
	.byte	12,4,197,13,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	61049
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_OVCCON',0,4,202,13,3
	.word	73843
	.byte	12,4,205,13,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	61367
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_OVCENABLE',0,4,210,13,3
	.word	73907
	.byte	12,4,213,13,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	61554
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PDISC',0,4,218,13,3
	.word	73974
	.byte	12,4,221,13,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	61665
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PDR',0,4,226,13,3
	.word	74037
	.byte	12,4,229,13,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	61798
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PDRR',0,4,234,13,3
	.word	74098
	.byte	12,4,237,13,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62001
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PERPLLCON0',0,4,242,13,3
	.word	74160
	.byte	12,4,245,13,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62241
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PERPLLCON1',0,4,250,13,3
	.word	74228
	.byte	12,4,253,13,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62385
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PERPLLSTAT',0,4,130,14,3
	.word	74296
	.byte	12,4,133,14,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62607
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR0',0,4,138,14,3
	.word	74364
	.byte	12,4,141,14,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62743
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR1',0,4,146,14,3
	.word	74428
	.byte	12,4,149,14,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62879
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR2',0,4,154,14,3
	.word	74492
	.byte	12,4,157,14,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63015
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR3',0,4,162,14,3
	.word	74556
	.byte	12,4,165,14,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63151
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR4',0,4,170,14,3
	.word	74620
	.byte	12,4,173,14,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63287
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR5',0,4,178,14,3
	.word	74684
	.byte	12,4,181,14,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63423
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMSTAT0',0,4,186,14,3
	.word	74748
	.byte	12,4,189,14,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63695
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMSWCR1',0,4,194,14,3
	.word	74813
	.byte	12,4,197,14,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63940
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMTRCSR0',0,4,202,14,3
	.word	74878
	.byte	12,4,205,14,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	64328
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMTRCSR1',0,4,210,14,3
	.word	74944
	.byte	12,4,213,14,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	64446
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMTRCSR2',0,4,218,14,3
	.word	75010
	.byte	12,4,221,14,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	64689
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMTRCSR3',0,4,226,14,3
	.word	75076
	.byte	12,4,229,14,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	64956
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_RSTCON',0,4,234,14,3
	.word	75142
	.byte	12,4,237,14,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	65215
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_RSTCON2',0,4,242,14,3
	.word	75206
	.byte	12,4,245,14,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	65520
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_RSTCON3',0,4,250,14,3
	.word	75271
	.byte	12,4,253,14,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	65601
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_RSTSTAT',0,4,130,15,3
	.word	75336
	.byte	12,4,133,15,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66150
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_SEICON0',0,4,138,15,3
	.word	75401
	.byte	12,4,141,15,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66280
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_SEICON1',0,4,146,15,3
	.word	75466
	.byte	12,4,149,15,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66471
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_SEISR',0,4,154,15,3
	.word	75531
	.byte	12,4,157,15,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66649
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_STCON',0,4,162,15,3
	.word	75594
	.byte	12,4,165,15,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66800
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM1',0,4,170,15,3
	.word	75657
	.byte	12,4,173,15,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66872
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM2',0,4,178,15,3
	.word	75721
	.byte	12,4,181,15,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66944
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM3',0,4,186,15,3
	.word	75785
	.byte	12,4,189,15,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	67016
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM4',0,4,194,15,3
	.word	75849
	.byte	12,4,197,15,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	67088
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM5',0,4,202,15,3
	.word	75913
	.byte	12,4,205,15,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	67160
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_STMEM6',0,4,210,15,3
	.word	75977
	.byte	12,4,213,15,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	67232
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_STSTAT',0,4,218,15,3
	.word	76041
	.byte	12,4,221,15,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	67561
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_SWAPCTRL',0,4,226,15,3
	.word	76105
	.byte	12,4,229,15,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	67681
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_SWRSTCON',0,4,234,15,3
	.word	76171
	.byte	12,4,237,15,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	67851
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_SYSCON',0,4,242,15,3
	.word	76237
	.byte	12,4,245,15,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	68114
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_SYSPLLCON0',0,4,250,15,3
	.word	76301
	.byte	12,4,253,15,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	68393
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_SYSPLLCON1',0,4,130,16,3
	.word	76369
	.byte	12,4,133,16,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	68497
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_SYSPLLCON2',0,4,138,16,3
	.word	76437
	.byte	12,4,141,16,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	68603
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_SYSPLLSTAT',0,4,146,16,3
	.word	76505
	.byte	12,4,149,16,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	68826
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_TRAPCLR',0,4,154,16,3
	.word	76573
	.byte	12,4,157,16,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	68974
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_TRAPDIS0',0,4,162,16,3
	.word	76638
	.byte	12,4,165,16,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69462
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_TRAPDIS1',0,4,170,16,3
	.word	76704
	.byte	12,4,173,16,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69759
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_TRAPSET',0,4,178,16,3
	.word	76770
	.byte	12,4,181,16,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69907
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_TRAPSTAT',0,4,186,16,3
	.word	76835
	.byte	32
	.byte	'Ifx_SCU_WDTCPU_CON0',0,4,194,16,3
	.word	589
	.byte	32
	.byte	'Ifx_SCU_WDTCPU_CON1',0,4,202,16,3
	.word	894
	.byte	32
	.byte	'Ifx_SCU_WDTCPU_SR',0,4,210,16,3
	.word	1125
	.byte	12,4,213,16,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70157
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_WDTS_CON0',0,4,218,16,3
	.word	76986
	.byte	12,4,221,16,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70283
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_WDTS_CON1',0,4,226,16,3
	.word	77053
	.byte	12,4,229,16,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70535
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_WDTS_SR',0,4,234,16,3
	.word	77120
	.byte	10
	.byte	'_Ifx_SCU_ESRCFGX',0,4,246,16,25,4,13
	.byte	'ESRCFGX',0
	.word	72559
	.byte	4,2,35,0,0,14
	.word	77185
	.byte	32
	.byte	'Ifx_SCU_ESRCFGX',0,4,249,16,3
	.word	77226
	.byte	14
	.word	1165
	.byte	32
	.byte	'Ifx_SCU_WDTCPU',0,4,141,17,3
	.word	77256
	.byte	10
	.byte	'_Ifx_SCU_WDTS',0,4,156,17,25,12,13
	.byte	'CON0',0
	.word	76986
	.byte	4,2,35,0,13
	.byte	'CON1',0
	.word	77053
	.byte	4,2,35,4,13
	.byte	'SR',0
	.word	77120
	.byte	4,2,35,8,0,14
	.word	77285
	.byte	32
	.byte	'Ifx_SCU_WDTS',0,4,161,17,3
	.word	77346
	.byte	15,8
	.word	77185
	.byte	16,1,0,14
	.word	77373
	.byte	15,20
	.word	629
	.byte	16,19,0,15,36
	.word	629
	.byte	16,35,0,15,16
	.word	72184
	.byte	16,3,0,15,16
	.word	72943
	.byte	16,3,0,15,72
	.word	1165
	.byte	16,5,0,14
	.word	77423
	.byte	14
	.word	77285
	.byte	15,176,2
	.word	629
	.byte	16,175,2,0,10
	.byte	'_Ifx_SCU',0,4,176,17,25,128,8,13
	.byte	'reserved_0',0
	.word	4470
	.byte	8,2,35,0,13
	.byte	'ID',0
	.word	72883
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	2650
	.byte	4,2,35,12,13
	.byte	'OSCCON',0
	.word	73718
	.byte	4,2,35,16,13
	.byte	'SYSPLLSTAT',0
	.word	76505
	.byte	4,2,35,20,13
	.byte	'SYSPLLCON0',0
	.word	76301
	.byte	4,2,35,24,13
	.byte	'SYSPLLCON1',0
	.word	76369
	.byte	4,2,35,28,13
	.byte	'SYSPLLCON2',0
	.word	76437
	.byte	4,2,35,32,13
	.byte	'PERPLLSTAT',0
	.word	74296
	.byte	4,2,35,36,13
	.byte	'PERPLLCON0',0
	.word	74160
	.byte	4,2,35,40,13
	.byte	'PERPLLCON1',0
	.word	74228
	.byte	4,2,35,44,13
	.byte	'CCUCON0',0
	.word	71079
	.byte	4,2,35,48,13
	.byte	'CCUCON1',0
	.word	71144
	.byte	4,2,35,52,13
	.byte	'FDR',0
	.word	72761
	.byte	4,2,35,56,13
	.byte	'EXTCON',0
	.word	72697
	.byte	4,2,35,60,13
	.byte	'CCUCON2',0
	.word	71341
	.byte	4,2,35,64,13
	.byte	'CCUCON3',0
	.word	71406
	.byte	4,2,35,68,13
	.byte	'CCUCON4',0
	.word	71471
	.byte	4,2,35,72,13
	.byte	'CCUCON5',0
	.word	71536
	.byte	4,2,35,76,13
	.byte	'RSTSTAT',0
	.word	75336
	.byte	4,2,35,80,13
	.byte	'reserved_54',0
	.word	2650
	.byte	4,2,35,84,13
	.byte	'RSTCON',0
	.word	75142
	.byte	4,2,35,88,13
	.byte	'ARSTDIS',0
	.word	71014
	.byte	4,2,35,92,13
	.byte	'SWRSTCON',0
	.word	76171
	.byte	4,2,35,96,13
	.byte	'RSTCON2',0
	.word	75206
	.byte	4,2,35,100,13
	.byte	'RSTCON3',0
	.word	75271
	.byte	4,2,35,104,13
	.byte	'reserved_6C',0
	.word	2650
	.byte	4,2,35,108,13
	.byte	'ESRCFGX',0
	.word	77382
	.byte	8,2,35,112,13
	.byte	'ESROCFG',0
	.word	72632
	.byte	4,2,35,120,13
	.byte	'SYSCON',0
	.word	76237
	.byte	4,2,35,124,13
	.byte	'CCUCON6',0
	.word	71601
	.byte	4,3,35,128,1,13
	.byte	'CCUCON7',0
	.word	71666
	.byte	4,3,35,132,1,13
	.byte	'CCUCON8',0
	.word	71731
	.byte	4,3,35,136,1,13
	.byte	'CCUCON9',0
	.word	71796
	.byte	4,3,35,140,1,13
	.byte	'CCUCON10',0
	.word	71209
	.byte	4,3,35,144,1,13
	.byte	'CCUCON11',0
	.word	71275
	.byte	4,3,35,148,1,13
	.byte	'reserved_98',0
	.word	2650
	.byte	4,3,35,152,1,13
	.byte	'PDR',0
	.word	74037
	.byte	4,3,35,156,1,13
	.byte	'IOCR',0
	.word	73065
	.byte	4,3,35,160,1,13
	.byte	'OUT',0
	.word	73782
	.byte	4,3,35,164,1,13
	.byte	'OMR',0
	.word	73657
	.byte	4,3,35,168,1,13
	.byte	'IN',0
	.word	73005
	.byte	4,3,35,172,1,13
	.byte	'reserved_B0',0
	.word	39902
	.byte	16,3,35,176,1,13
	.byte	'STSTAT',0
	.word	76041
	.byte	4,3,35,192,1,13
	.byte	'STCON',0
	.word	75594
	.byte	4,3,35,196,1,13
	.byte	'PMCSR0',0
	.word	74364
	.byte	4,3,35,200,1,13
	.byte	'PMCSR1',0
	.word	74428
	.byte	4,3,35,204,1,13
	.byte	'PMCSR2',0
	.word	74492
	.byte	4,3,35,208,1,13
	.byte	'PMCSR3',0
	.word	74556
	.byte	4,3,35,212,1,13
	.byte	'PMCSR4',0
	.word	74620
	.byte	4,3,35,216,1,13
	.byte	'PMCSR5',0
	.word	74684
	.byte	4,3,35,220,1,13
	.byte	'reserved_E0',0
	.word	2650
	.byte	4,3,35,224,1,13
	.byte	'PMSTAT0',0
	.word	74748
	.byte	4,3,35,228,1,13
	.byte	'PMSWCR1',0
	.word	74813
	.byte	4,3,35,232,1,13
	.byte	'reserved_EC',0
	.word	39902
	.byte	16,3,35,236,1,13
	.byte	'EMSR',0
	.word	72434
	.byte	4,3,35,252,1,13
	.byte	'EMSSW',0
	.word	72496
	.byte	4,3,35,128,2,13
	.byte	'DTSCSTAT',0
	.word	71990
	.byte	4,3,35,132,2,13
	.byte	'DTSCLIM',0
	.word	71925
	.byte	4,3,35,136,2,13
	.byte	'reserved_10C',0
	.word	77387
	.byte	20,3,35,140,2,13
	.byte	'TRAPDIS1',0
	.word	76704
	.byte	4,3,35,160,2,13
	.byte	'TRAPSTAT',0
	.word	76835
	.byte	4,3,35,164,2,13
	.byte	'TRAPSET',0
	.word	76770
	.byte	4,3,35,168,2,13
	.byte	'TRAPCLR',0
	.word	76573
	.byte	4,3,35,172,2,13
	.byte	'TRAPDIS0',0
	.word	76638
	.byte	4,3,35,176,2,13
	.byte	'LCLCON0',0
	.word	73399
	.byte	4,3,35,180,2,13
	.byte	'LCLCON1',0
	.word	73464
	.byte	4,3,35,184,2,13
	.byte	'LCLTEST',0
	.word	73529
	.byte	4,3,35,188,2,13
	.byte	'CHIPID',0
	.word	71861
	.byte	4,3,35,192,2,13
	.byte	'MANID',0
	.word	73594
	.byte	4,3,35,196,2,13
	.byte	'reserved_148',0
	.word	2650
	.byte	4,3,35,200,2,13
	.byte	'SWAPCTRL',0
	.word	76105
	.byte	4,3,35,204,2,13
	.byte	'reserved_150',0
	.word	77387
	.byte	20,3,35,208,2,13
	.byte	'LBISTCTRL0',0
	.word	73127
	.byte	4,3,35,228,2,13
	.byte	'LBISTCTRL1',0
	.word	73195
	.byte	4,3,35,232,2,13
	.byte	'LBISTCTRL2',0
	.word	73263
	.byte	4,3,35,236,2,13
	.byte	'LBISTCTRL3',0
	.word	73331
	.byte	4,3,35,240,2,13
	.byte	'reserved_174',0
	.word	39902
	.byte	16,3,35,244,2,13
	.byte	'STMEM1',0
	.word	75657
	.byte	4,3,35,132,3,13
	.byte	'STMEM2',0
	.word	75721
	.byte	4,3,35,136,3,13
	.byte	'PDISC',0
	.word	73974
	.byte	4,3,35,140,3,13
	.byte	'reserved_190',0
	.word	4470
	.byte	8,3,35,144,3,13
	.byte	'PMTRCSR0',0
	.word	74878
	.byte	4,3,35,152,3,13
	.byte	'PMTRCSR1',0
	.word	74944
	.byte	4,3,35,156,3,13
	.byte	'PMTRCSR2',0
	.word	75010
	.byte	4,3,35,160,3,13
	.byte	'PMTRCSR3',0
	.word	75076
	.byte	4,3,35,164,3,13
	.byte	'reserved_1A8',0
	.word	3841
	.byte	24,3,35,168,3,13
	.byte	'STMEM3',0
	.word	75785
	.byte	4,3,35,192,3,13
	.byte	'STMEM4',0
	.word	75849
	.byte	4,3,35,196,3,13
	.byte	'STMEM5',0
	.word	75913
	.byte	4,3,35,200,3,13
	.byte	'STMEM6',0
	.word	75977
	.byte	4,3,35,204,3,13
	.byte	'reserved_1D0',0
	.word	39902
	.byte	16,3,35,208,3,13
	.byte	'OVCENABLE',0
	.word	73907
	.byte	4,3,35,224,3,13
	.byte	'OVCCON',0
	.word	73843
	.byte	4,3,35,228,3,13
	.byte	'reserved_1E8',0
	.word	77396
	.byte	36,3,35,232,3,13
	.byte	'EIFILT',0
	.word	72246
	.byte	4,3,35,140,4,13
	.byte	'EICR',0
	.word	77405
	.byte	16,3,35,144,4,13
	.byte	'EIFR',0
	.word	72310
	.byte	4,3,35,160,4,13
	.byte	'FMR',0
	.word	72822
	.byte	4,3,35,164,4,13
	.byte	'PDRR',0
	.word	74098
	.byte	4,3,35,168,4,13
	.byte	'IGCR',0
	.word	77414
	.byte	16,3,35,172,4,13
	.byte	'reserved_23C',0
	.word	39902
	.byte	16,3,35,188,4,13
	.byte	'WDTCPU',0
	.word	77432
	.byte	72,3,35,204,4,13
	.byte	'reserved_294',0
	.word	4470
	.byte	8,3,35,148,5,13
	.byte	'EICON0',0
	.word	72056
	.byte	4,3,35,156,5,13
	.byte	'EICON1',0
	.word	72120
	.byte	4,3,35,160,5,13
	.byte	'EISR',0
	.word	72372
	.byte	4,3,35,164,5,13
	.byte	'WDTS',0
	.word	77437
	.byte	12,3,35,168,5,13
	.byte	'SEICON0',0
	.word	75401
	.byte	4,3,35,180,5,13
	.byte	'SEICON1',0
	.word	75466
	.byte	4,3,35,184,5,13
	.byte	'SEISR',0
	.word	75531
	.byte	4,3,35,188,5,13
	.byte	'reserved_2C0',0
	.word	77442
	.byte	176,2,3,35,192,5,13
	.byte	'ACCEN11',0
	.word	70949
	.byte	4,3,35,240,7,13
	.byte	'ACCEN10',0
	.word	70884
	.byte	4,3,35,244,7,13
	.byte	'ACCEN01',0
	.word	70819
	.byte	4,3,35,248,7,13
	.byte	'ACCEN00',0
	.word	70754
	.byte	4,3,35,252,7,0,14
	.word	77453
	.byte	32
	.byte	'Ifx_SCU',0,4,166,18,3
	.word	79574
	.byte	10
	.byte	'_Ifx_STM_ACCEN0_Bits',0,17,68,16,4,11
	.byte	'EN0',0,1
	.word	629
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	629
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	629
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	629
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	629
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	629
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	629
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	629
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	629
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	629
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	629
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	629
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	629
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	629
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	629
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	629
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	629
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	629
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	629
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	629
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	629
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	629
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	629
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	629
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	629
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	629
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	629
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	629
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	629
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	629
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	629
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	629
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_STM_ACCEN0_Bits',0,17,102,3
	.word	79596
	.byte	10
	.byte	'_Ifx_STM_ACCEN1_Bits',0,17,105,16,4,11
	.byte	'reserved_0',0,4
	.word	454
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_ACCEN1_Bits',0,17,108,3
	.word	80153
	.byte	10
	.byte	'_Ifx_STM_CAP_Bits',0,17,111,16,4,11
	.byte	'STMCAP_63_32',0,4
	.word	454
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_CAP_Bits',0,17,114,3
	.word	80230
	.byte	10
	.byte	'_Ifx_STM_CAPSV_Bits',0,17,117,16,4,11
	.byte	'STMCAP_63_32',0,4
	.word	454
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_CAPSV_Bits',0,17,120,3
	.word	80303
	.byte	10
	.byte	'_Ifx_STM_CLC_Bits',0,17,123,16,4,11
	.byte	'DISR',0,1
	.word	629
	.byte	1,7,2,35,0,11
	.byte	'DISS',0,1
	.word	629
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	629
	.byte	1,5,2,35,0,11
	.byte	'EDIS',0,1
	.word	629
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	454
	.byte	28,0,2,35,0,0,32
	.byte	'Ifx_STM_CLC_Bits',0,17,130,1,3
	.word	80380
	.byte	10
	.byte	'_Ifx_STM_CMCON_Bits',0,17,133,1,16,4,11
	.byte	'MSIZE0',0,1
	.word	629
	.byte	5,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	629
	.byte	3,0,2,35,0,11
	.byte	'MSTART0',0,1
	.word	629
	.byte	5,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	629
	.byte	3,0,2,35,1,11
	.byte	'MSIZE1',0,1
	.word	629
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	629
	.byte	3,0,2,35,2,11
	.byte	'MSTART1',0,1
	.word	629
	.byte	5,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	629
	.byte	3,0,2,35,3,0,32
	.byte	'Ifx_STM_CMCON_Bits',0,17,143,1,3
	.word	80522
	.byte	10
	.byte	'_Ifx_STM_CMP_Bits',0,17,146,1,16,4,11
	.byte	'CMPVAL',0,4
	.word	454
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_CMP_Bits',0,17,149,1,3
	.word	80742
	.byte	10
	.byte	'_Ifx_STM_ICR_Bits',0,17,152,1,16,4,11
	.byte	'CMP0EN',0,1
	.word	629
	.byte	1,7,2,35,0,11
	.byte	'CMP0IR',0,1
	.word	629
	.byte	1,6,2,35,0,11
	.byte	'CMP0OS',0,1
	.word	629
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	629
	.byte	1,4,2,35,0,11
	.byte	'CMP1EN',0,1
	.word	629
	.byte	1,3,2,35,0,11
	.byte	'CMP1IR',0,1
	.word	629
	.byte	1,2,2,35,0,11
	.byte	'CMP1OS',0,1
	.word	629
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,4
	.word	454
	.byte	25,0,2,35,0,0,32
	.byte	'Ifx_STM_ICR_Bits',0,17,162,1,3
	.word	80811
	.byte	10
	.byte	'_Ifx_STM_ID_Bits',0,17,165,1,16,4,11
	.byte	'MODREV',0,1
	.word	629
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	629
	.byte	8,0,2,35,1,11
	.byte	'MODNUM',0,2
	.word	646
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_STM_ID_Bits',0,17,170,1,3
	.word	81014
	.byte	10
	.byte	'_Ifx_STM_ISCR_Bits',0,17,173,1,16,4,11
	.byte	'CMP0IRR',0,1
	.word	629
	.byte	1,7,2,35,0,11
	.byte	'CMP0IRS',0,1
	.word	629
	.byte	1,6,2,35,0,11
	.byte	'CMP1IRR',0,1
	.word	629
	.byte	1,5,2,35,0,11
	.byte	'CMP1IRS',0,1
	.word	629
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	454
	.byte	28,0,2,35,0,0,32
	.byte	'Ifx_STM_ISCR_Bits',0,17,180,1,3
	.word	81118
	.byte	10
	.byte	'_Ifx_STM_KRST0_Bits',0,17,183,1,16,4,11
	.byte	'RST',0,1
	.word	629
	.byte	1,7,2,35,0,11
	.byte	'RSTSTAT',0,1
	.word	629
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	454
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_STM_KRST0_Bits',0,17,188,1,3
	.word	81269
	.byte	10
	.byte	'_Ifx_STM_KRST1_Bits',0,17,191,1,16,4,11
	.byte	'RST',0,1
	.word	629
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	454
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_STM_KRST1_Bits',0,17,195,1,3
	.word	81380
	.byte	10
	.byte	'_Ifx_STM_KRSTCLR_Bits',0,17,198,1,16,4,11
	.byte	'CLR',0,1
	.word	629
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	454
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_STM_KRSTCLR_Bits',0,17,202,1,3
	.word	81472
	.byte	10
	.byte	'_Ifx_STM_OCS_Bits',0,17,205,1,16,4,11
	.byte	'reserved_0',0,1
	.word	629
	.byte	3,5,2,35,0,11
	.byte	'reserved_3',0,4
	.word	454
	.byte	21,8,2,35,0,11
	.byte	'SUS',0,1
	.word	629
	.byte	4,4,2,35,3,11
	.byte	'SUS_P',0,1
	.word	629
	.byte	1,3,2,35,3,11
	.byte	'SUSSTA',0,1
	.word	629
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	629
	.byte	2,0,2,35,3,0,32
	.byte	'Ifx_STM_OCS_Bits',0,17,213,1,3
	.word	81568
	.byte	10
	.byte	'_Ifx_STM_TIM0_Bits',0,17,216,1,16,4,11
	.byte	'STM_31_0',0,4
	.word	454
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_TIM0_Bits',0,17,219,1,3
	.word	81736
	.byte	10
	.byte	'_Ifx_STM_TIM0SV_Bits',0,17,222,1,16,4,11
	.byte	'STM_31_0',0,4
	.word	454
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_TIM0SV_Bits',0,17,225,1,3
	.word	81809
	.byte	10
	.byte	'_Ifx_STM_TIM1_Bits',0,17,228,1,16,4,11
	.byte	'STM_35_4',0,4
	.word	454
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_TIM1_Bits',0,17,231,1,3
	.word	81886
	.byte	10
	.byte	'_Ifx_STM_TIM2_Bits',0,17,234,1,16,4,11
	.byte	'STM_39_8',0,4
	.word	454
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_TIM2_Bits',0,17,237,1,3
	.word	81959
	.byte	10
	.byte	'_Ifx_STM_TIM3_Bits',0,17,240,1,16,4,11
	.byte	'STM_43_12',0,4
	.word	454
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_TIM3_Bits',0,17,243,1,3
	.word	82032
	.byte	10
	.byte	'_Ifx_STM_TIM4_Bits',0,17,246,1,16,4,11
	.byte	'STM_47_16',0,4
	.word	454
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_TIM4_Bits',0,17,249,1,3
	.word	82106
	.byte	10
	.byte	'_Ifx_STM_TIM5_Bits',0,17,252,1,16,4,11
	.byte	'STM_51_20',0,4
	.word	454
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_TIM5_Bits',0,17,255,1,3
	.word	82180
	.byte	10
	.byte	'_Ifx_STM_TIM6_Bits',0,17,130,2,16,4,11
	.byte	'STM_63_32',0,4
	.word	454
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_TIM6_Bits',0,17,133,2,3
	.word	82254
	.byte	12,17,141,2,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	79596
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_ACCEN0',0,17,146,2,3
	.word	82328
	.byte	12,17,149,2,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	80153
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_ACCEN1',0,17,154,2,3
	.word	82392
	.byte	12,17,157,2,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	80230
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_CAP',0,17,162,2,3
	.word	82456
	.byte	12,17,165,2,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	80303
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_CAPSV',0,17,170,2,3
	.word	82517
	.byte	12,17,173,2,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	80380
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_CLC',0,17,178,2,3
	.word	82580
	.byte	12,17,181,2,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	80522
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_CMCON',0,17,186,2,3
	.word	82641
	.byte	12,17,189,2,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	80742
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_CMP',0,17,194,2,3
	.word	82704
	.byte	12,17,197,2,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	80811
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_ICR',0,17,202,2,3
	.word	82765
	.byte	12,17,205,2,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	81014
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_ID',0,17,210,2,3
	.word	82826
	.byte	12,17,213,2,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	81118
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_ISCR',0,17,218,2,3
	.word	82886
	.byte	12,17,221,2,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	81269
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_KRST0',0,17,226,2,3
	.word	82948
	.byte	12,17,229,2,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	81380
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_KRST1',0,17,234,2,3
	.word	83011
	.byte	12,17,237,2,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	81472
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_KRSTCLR',0,17,242,2,3
	.word	83074
	.byte	12,17,245,2,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	81568
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_OCS',0,17,250,2,3
	.word	83139
	.byte	12,17,253,2,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	81736
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_TIM0',0,17,130,3,3
	.word	83200
	.byte	12,17,133,3,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	81809
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_TIM0SV',0,17,138,3,3
	.word	83262
	.byte	12,17,141,3,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	81886
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_TIM1',0,17,146,3,3
	.word	83326
	.byte	12,17,149,3,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	81959
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_TIM2',0,17,154,3,3
	.word	83388
	.byte	12,17,157,3,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	82032
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_TIM3',0,17,162,3,3
	.word	83450
	.byte	12,17,165,3,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	82106
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_TIM4',0,17,170,3,3
	.word	83512
	.byte	12,17,173,3,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	82180
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_TIM5',0,17,178,3,3
	.word	83574
	.byte	12,17,181,3,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	82254
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_TIM6',0,17,186,3,3
	.word	83636
	.byte	17,18,162,11,9,1,18
	.byte	'IfxScu_WDTCON1_IR_divBy16384',0,0,18
	.byte	'IfxScu_WDTCON1_IR_divBy256',0,1,18
	.byte	'IfxScu_WDTCON1_IR_divBy64',0,2,0,32
	.byte	'IfxScu_WDTCON1_IR',0,18,167,11,3
	.word	83698
	.byte	32
	.byte	'Ifx_P_ACCEN0_Bits',0,6,102,3
	.word	7998
	.byte	32
	.byte	'Ifx_P_ACCEN1_Bits',0,6,108,3
	.word	7911
	.byte	32
	.byte	'Ifx_P_ESR_Bits',0,6,130,1,3
	.word	4479
	.byte	32
	.byte	'Ifx_P_ID_Bits',0,6,138,1,3
	.word	2530
	.byte	32
	.byte	'Ifx_P_IN_Bits',0,6,160,1,3
	.word	3526
	.byte	32
	.byte	'Ifx_P_IOCR0_Bits',0,6,173,1,3
	.word	2659
	.byte	32
	.byte	'Ifx_P_IOCR12_Bits',0,6,186,1,3
	.word	3306
	.byte	32
	.byte	'Ifx_P_IOCR4_Bits',0,6,199,1,3
	.word	2874
	.byte	32
	.byte	'Ifx_P_IOCR8_Bits',0,6,212,1,3
	.word	3089
	.byte	32
	.byte	'Ifx_P_LPCR_Bits',0,6,231,1,3
	.word	7573
	.byte	32
	.byte	'Ifx_P_OMCR_Bits',0,6,253,1,3
	.word	7225
	.byte	32
	.byte	'Ifx_P_OMCR0_Bits',0,6,136,2,3
	.word	6212
	.byte	32
	.byte	'Ifx_P_OMCR12_Bits',0,6,146,2,3
	.word	6736
	.byte	32
	.byte	'Ifx_P_OMCR4_Bits',0,6,157,2,3
	.word	6386
	.byte	32
	.byte	'Ifx_P_OMCR8_Bits',0,6,168,2,3
	.word	6560
	.byte	32
	.byte	'Ifx_P_OMR_Bits',0,6,205,2,3
	.word	1959
	.byte	32
	.byte	'Ifx_P_OMSR_Bits',0,6,227,2,3
	.word	6892
	.byte	32
	.byte	'Ifx_P_OMSR0_Bits',0,6,237,2,3
	.word	5549
	.byte	32
	.byte	'Ifx_P_OMSR12_Bits',0,6,248,2,3
	.word	6037
	.byte	32
	.byte	'Ifx_P_OMSR4_Bits',0,6,131,3,3
	.word	5696
	.byte	32
	.byte	'Ifx_P_OMSR8_Bits',0,6,142,3,3
	.word	5865
	.byte	32
	.byte	'Ifx_P_OUT_Bits',0,6,164,3,3
	.word	1643
	.byte	32
	.byte	'Ifx_P_PCSR_Bits',0,6,187,3,3
	.word	5185
	.byte	32
	.byte	'Ifx_P_PDISC_Bits',0,6,209,3,3
	.word	4819
	.byte	32
	.byte	'Ifx_P_PDR0_Bits',0,6,230,3,3
	.word	3850
	.byte	32
	.byte	'Ifx_P_PDR1_Bits',0,6,251,3,3
	.word	4154
	.byte	32
	.byte	'Ifx_P_ACCEN0',0,6,136,4,3
	.word	8525
	.byte	32
	.byte	'Ifx_P_ACCEN1',0,6,144,4,3
	.word	7958
	.byte	32
	.byte	'Ifx_P_ESR',0,6,152,4,3
	.word	4770
	.byte	32
	.byte	'Ifx_P_ID',0,6,160,4,3
	.word	2610
	.byte	32
	.byte	'Ifx_P_IN',0,6,168,4,3
	.word	3801
	.byte	32
	.byte	'Ifx_P_IOCR0',0,6,176,4,3
	.word	2834
	.byte	32
	.byte	'Ifx_P_IOCR12',0,6,184,4,3
	.word	3486
	.byte	32
	.byte	'Ifx_P_IOCR4',0,6,192,4,3
	.word	3049
	.byte	32
	.byte	'Ifx_P_IOCR8',0,6,200,4,3
	.word	3266
	.byte	32
	.byte	'Ifx_P_LPCR',0,6,208,4,3
	.word	7853
	.byte	32
	.byte	'Ifx_P_OMCR',0,6,216,4,3
	.word	7533
	.byte	32
	.byte	'Ifx_P_OMCR0',0,6,224,4,3
	.word	6346
	.byte	32
	.byte	'Ifx_P_OMCR12',0,6,232,4,3
	.word	6852
	.byte	32
	.byte	'Ifx_P_OMCR4',0,6,240,4,3
	.word	6520
	.byte	32
	.byte	'Ifx_P_OMCR8',0,6,248,4,3
	.word	6696
	.byte	32
	.byte	'Ifx_P_OMR',0,6,128,5,3
	.word	2490
	.byte	32
	.byte	'Ifx_P_OMSR',0,6,136,5,3
	.word	7185
	.byte	32
	.byte	'Ifx_P_OMSR0',0,6,144,5,3
	.word	5656
	.byte	32
	.byte	'Ifx_P_OMSR12',0,6,152,5,3
	.word	6172
	.byte	32
	.byte	'Ifx_P_OMSR4',0,6,160,5,3
	.word	5825
	.byte	32
	.byte	'Ifx_P_OMSR8',0,6,168,5,3
	.word	5997
	.byte	32
	.byte	'Ifx_P_OUT',0,6,176,5,3
	.word	1919
	.byte	32
	.byte	'Ifx_P_PCSR',0,6,184,5,3
	.word	5509
	.byte	32
	.byte	'Ifx_P_PDISC',0,6,192,5,3
	.word	5145
	.byte	32
	.byte	'Ifx_P_PDR0',0,6,200,5,3
	.word	4114
	.byte	32
	.byte	'Ifx_P_PDR1',0,6,208,5,3
	.word	4430
	.byte	14
	.word	8565
	.byte	32
	.byte	'Ifx_P',0,6,128,6,3
	.word	85014
	.byte	17,5,73,9,1,18
	.byte	'IfxPort_ControlledBy_port',0,0,18
	.byte	'IfxPort_ControlledBy_hsct',0,1,0,32
	.byte	'IfxPort_ControlledBy',0,5,77,3
	.word	85034
	.byte	17,5,81,9,1,18
	.byte	'IfxPort_InputMode_undefined',0,127,18
	.byte	'IfxPort_InputMode_noPullDevice',0,0,18
	.byte	'IfxPort_InputMode_pullDown',0,8,18
	.byte	'IfxPort_InputMode_pullUp',0,16,0,32
	.byte	'IfxPort_InputMode',0,5,87,3
	.word	85125
	.byte	17,5,91,9,1,18
	.byte	'IfxPort_LvdsMode_high',0,0,18
	.byte	'IfxPort_LvdsMode_medium',0,1,0,32
	.byte	'IfxPort_LvdsMode',0,5,95,3
	.word	85276
	.byte	17,5,126,9,1,18
	.byte	'IfxPort_OutputIdx_general',0,128,1,18
	.byte	'IfxPort_OutputIdx_alt1',0,136,1,18
	.byte	'IfxPort_OutputIdx_alt2',0,144,1,18
	.byte	'IfxPort_OutputIdx_alt3',0,152,1,18
	.byte	'IfxPort_OutputIdx_alt4',0,160,1,18
	.byte	'IfxPort_OutputIdx_alt5',0,168,1,18
	.byte	'IfxPort_OutputIdx_alt6',0,176,1,18
	.byte	'IfxPort_OutputIdx_alt7',0,184,1,0,32
	.byte	'IfxPort_OutputIdx',0,5,136,1,3
	.word	85357
	.byte	17,5,140,1,9,1,18
	.byte	'IfxPort_OutputMode_none',0,0,18
	.byte	'IfxPort_OutputMode_pushPull',0,128,1,18
	.byte	'IfxPort_OutputMode_openDrain',0,192,1,0,32
	.byte	'IfxPort_OutputMode',0,5,145,1,3
	.word	85601
	.byte	17,5,151,1,9,1,18
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed1',0,0,18
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed2',0,1,18
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed3',0,2,18
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed4',0,3,18
	.byte	'IfxPort_PadDriver_ttlSpeed1',0,8,18
	.byte	'IfxPort_PadDriver_ttlSpeed2',0,9,18
	.byte	'IfxPort_PadDriver_ttlSpeed3',0,10,18
	.byte	'IfxPort_PadDriver_ttlSpeed4',0,11,18
	.byte	'IfxPort_PadDriver_ttl3v3Speed1',0,12,18
	.byte	'IfxPort_PadDriver_ttl3v3Speed2',0,13,18
	.byte	'IfxPort_PadDriver_ttl3v3Speed3',0,14,18
	.byte	'IfxPort_PadDriver_ttl3v3Speed4',0,15,0,32
	.byte	'IfxPort_PadDriver',0,5,165,1,3
	.word	85725
	.byte	17,5,169,1,9,1,18
	.byte	'IfxPort_PadSupply_3v',0,0,18
	.byte	'IfxPort_PadSupply_5v',0,1,0,32
	.byte	'IfxPort_PadSupply',0,5,173,1,3
	.word	86175
	.byte	17,5,177,1,9,1,18
	.byte	'IfxPort_PinFunctionMode_digital',0,0,18
	.byte	'IfxPort_PinFunctionMode_analog',0,1,0,32
	.byte	'IfxPort_PinFunctionMode',0,5,181,1,3
	.word	86255
	.byte	32
	.byte	'IfxPort_State',0,5,193,1,3
	.word	9145
	.byte	20,5,246,1,9,8,13
	.byte	'port',0
	.word	9140
	.byte	4,2,35,0,13
	.byte	'pinIndex',0
	.word	629
	.byte	1,2,35,4,0,32
	.byte	'IfxPort_Pin',0,5,250,1,3
	.word	86385
	.byte	10
	.byte	'_Ifx_SMU_ACCEN0_Bits',0,19,68,16,4,11
	.byte	'EN0',0,1
	.word	629
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	629
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	629
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	629
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	629
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	629
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	629
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	629
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	629
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	629
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	629
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	629
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	629
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	629
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	629
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	629
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	629
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	629
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	629
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	629
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	629
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	629
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	629
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	629
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	629
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	629
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	629
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	629
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	629
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	629
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	629
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	629
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SMU_ACCEN0_Bits',0,19,102,3
	.word	86445
	.byte	10
	.byte	'_Ifx_SMU_ACCEN1_Bits',0,19,105,16,4,11
	.byte	'reserved_0',0,4
	.word	454
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_SMU_ACCEN1_Bits',0,19,108,3
	.word	87002
	.byte	10
	.byte	'_Ifx_SMU_AD_Bits',0,19,111,16,4,11
	.byte	'DF0',0,1
	.word	629
	.byte	1,7,2,35,0,11
	.byte	'DF1',0,1
	.word	629
	.byte	1,6,2,35,0,11
	.byte	'DF2',0,1
	.word	629
	.byte	1,5,2,35,0,11
	.byte	'DF3',0,1
	.word	629
	.byte	1,4,2,35,0,11
	.byte	'DF4',0,1
	.word	629
	.byte	1,3,2,35,0,11
	.byte	'DF5',0,1
	.word	629
	.byte	1,2,2,35,0,11
	.byte	'DF6',0,1
	.word	629
	.byte	1,1,2,35,0,11
	.byte	'DF7',0,1
	.word	629
	.byte	1,0,2,35,0,11
	.byte	'DF8',0,1
	.word	629
	.byte	1,7,2,35,1,11
	.byte	'DF9',0,1
	.word	629
	.byte	1,6,2,35,1,11
	.byte	'DF10',0,1
	.word	629
	.byte	1,5,2,35,1,11
	.byte	'DF11',0,1
	.word	629
	.byte	1,4,2,35,1,11
	.byte	'DF12',0,1
	.word	629
	.byte	1,3,2,35,1,11
	.byte	'DF13',0,1
	.word	629
	.byte	1,2,2,35,1,11
	.byte	'DF14',0,1
	.word	629
	.byte	1,1,2,35,1,11
	.byte	'DF15',0,1
	.word	629
	.byte	1,0,2,35,1,11
	.byte	'DF16',0,1
	.word	629
	.byte	1,7,2,35,2,11
	.byte	'DF17',0,1
	.word	629
	.byte	1,6,2,35,2,11
	.byte	'DF18',0,1
	.word	629
	.byte	1,5,2,35,2,11
	.byte	'DF19',0,1
	.word	629
	.byte	1,4,2,35,2,11
	.byte	'DF20',0,1
	.word	629
	.byte	1,3,2,35,2,11
	.byte	'DF21',0,1
	.word	629
	.byte	1,2,2,35,2,11
	.byte	'DF22',0,1
	.word	629
	.byte	1,1,2,35,2,11
	.byte	'DF23',0,1
	.word	629
	.byte	1,0,2,35,2,11
	.byte	'DF24',0,1
	.word	629
	.byte	1,7,2,35,3,11
	.byte	'DF25',0,1
	.word	629
	.byte	1,6,2,35,3,11
	.byte	'DF26',0,1
	.word	629
	.byte	1,5,2,35,3,11
	.byte	'DF27',0,1
	.word	629
	.byte	1,4,2,35,3,11
	.byte	'DF28',0,1
	.word	629
	.byte	1,3,2,35,3,11
	.byte	'DF29',0,1
	.word	629
	.byte	1,2,2,35,3,11
	.byte	'DF30',0,1
	.word	629
	.byte	1,1,2,35,3,11
	.byte	'DF31',0,1
	.word	629
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SMU_AD_Bits',0,19,145,1,3
	.word	87079
	.byte	10
	.byte	'_Ifx_SMU_AEX_Bits',0,19,148,1,16,4,11
	.byte	'IRQ0STS',0,1
	.word	629
	.byte	1,7,2,35,0,11
	.byte	'IRQ1STS',0,1
	.word	629
	.byte	1,6,2,35,0,11
	.byte	'IRQ2STS',0,1
	.word	629
	.byte	1,5,2,35,0,11
	.byte	'RST0STS',0,1
	.word	629
	.byte	1,4,2,35,0,11
	.byte	'RST1STS',0,1
	.word	629
	.byte	1,3,2,35,0,11
	.byte	'RST2STS',0,1
	.word	629
	.byte	1,2,2,35,0,11
	.byte	'RST3STS',0,1
	.word	629
	.byte	1,1,2,35,0,11
	.byte	'RST4STS',0,1
	.word	629
	.byte	1,0,2,35,0,11
	.byte	'RST5STS',0,1
	.word	629
	.byte	1,7,2,35,1,11
	.byte	'NMISTS',0,1
	.word	629
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	629
	.byte	1,5,2,35,1,11
	.byte	'EMSSTS',0,1
	.word	629
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	629
	.byte	4,0,2,35,1,11
	.byte	'IRQ0AEM',0,1
	.word	629
	.byte	1,7,2,35,2,11
	.byte	'IRQ1AEM',0,1
	.word	629
	.byte	1,6,2,35,2,11
	.byte	'IRQ2AEM',0,1
	.word	629
	.byte	1,5,2,35,2,11
	.byte	'RST0AEM',0,1
	.word	629
	.byte	1,4,2,35,2,11
	.byte	'RST1AEM',0,1
	.word	629
	.byte	1,3,2,35,2,11
	.byte	'RST2AEM',0,1
	.word	629
	.byte	1,2,2,35,2,11
	.byte	'RST3AEM',0,1
	.word	629
	.byte	1,1,2,35,2,11
	.byte	'RST4AEM',0,1
	.word	629
	.byte	1,0,2,35,2,11
	.byte	'RST5AEM',0,1
	.word	629
	.byte	1,7,2,35,3,11
	.byte	'NMIAEM',0,1
	.word	629
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	629
	.byte	1,5,2,35,3,11
	.byte	'EMSAEM',0,1
	.word	629
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	629
	.byte	4,0,2,35,3,0,32
	.byte	'Ifx_SMU_AEX_Bits',0,19,176,1,3
	.word	87629
	.byte	10
	.byte	'_Ifx_SMU_AEXCLR_Bits',0,19,179,1,16,4,11
	.byte	'IRQ0CLR',0,4
	.word	477
	.byte	1,31,2,35,0,11
	.byte	'IRQ1CLR',0,4
	.word	477
	.byte	1,30,2,35,0,11
	.byte	'IRQ2CLR',0,4
	.word	477
	.byte	1,29,2,35,0,11
	.byte	'RST0CLR',0,4
	.word	477
	.byte	1,28,2,35,0,11
	.byte	'RST1CLR',0,4
	.word	477
	.byte	1,27,2,35,0,11
	.byte	'RST2CLR',0,4
	.word	477
	.byte	1,26,2,35,0,11
	.byte	'RST3CLR',0,4
	.word	477
	.byte	1,25,2,35,0,11
	.byte	'RST4CLR',0,4
	.word	477
	.byte	1,24,2,35,0,11
	.byte	'RST5CLR',0,4
	.word	477
	.byte	1,23,2,35,0,11
	.byte	'NMICLR',0,4
	.word	477
	.byte	1,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	477
	.byte	1,21,2,35,0,11
	.byte	'EMSCLR',0,4
	.word	477
	.byte	1,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	477
	.byte	4,16,2,35,0,11
	.byte	'IRQ0AEMCLR',0,4
	.word	477
	.byte	1,15,2,35,0,11
	.byte	'IRQ1AEMCLR',0,4
	.word	477
	.byte	1,14,2,35,0,11
	.byte	'IRQ2AEMCLR',0,4
	.word	477
	.byte	1,13,2,35,0,11
	.byte	'RST0AEMCLR',0,4
	.word	477
	.byte	1,12,2,35,0,11
	.byte	'RST1AEMCLR',0,4
	.word	477
	.byte	1,11,2,35,0,11
	.byte	'RST2AEMCLR',0,4
	.word	477
	.byte	1,10,2,35,0,11
	.byte	'RST3AEMCLR',0,4
	.word	477
	.byte	1,9,2,35,0,11
	.byte	'RST4AEMCLR',0,4
	.word	477
	.byte	1,8,2,35,0,11
	.byte	'RST5AEMCLR',0,4
	.word	477
	.byte	1,7,2,35,0,11
	.byte	'NMIAEMCLR',0,4
	.word	477
	.byte	1,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	477
	.byte	1,5,2,35,0,11
	.byte	'EMSAEMCLR',0,4
	.word	477
	.byte	1,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	477
	.byte	4,0,2,35,0,0,32
	.byte	'Ifx_SMU_AEXCLR_Bits',0,19,207,1,3
	.word	88186
	.byte	10
	.byte	'_Ifx_SMU_AFCNT_Bits',0,19,210,1,16,4,11
	.byte	'FCNT',0,1
	.word	629
	.byte	4,4,2,35,0,11
	.byte	'ACNT',0,2
	.word	646
	.byte	12,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	646
	.byte	14,2,2,35,2,11
	.byte	'FCO',0,1
	.word	629
	.byte	1,1,2,35,3,11
	.byte	'ACO',0,1
	.word	629
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SMU_AFCNT_Bits',0,19,217,1,3
	.word	88782
	.byte	10
	.byte	'_Ifx_SMU_AG_Bits',0,19,220,1,16,4,11
	.byte	'SF0',0,4
	.word	477
	.byte	1,31,2,35,0,11
	.byte	'SF1',0,4
	.word	477
	.byte	1,30,2,35,0,11
	.byte	'SF2',0,4
	.word	477
	.byte	1,29,2,35,0,11
	.byte	'SF3',0,4
	.word	477
	.byte	1,28,2,35,0,11
	.byte	'SF4',0,4
	.word	477
	.byte	1,27,2,35,0,11
	.byte	'SF5',0,4
	.word	477
	.byte	1,26,2,35,0,11
	.byte	'SF6',0,4
	.word	477
	.byte	1,25,2,35,0,11
	.byte	'SF7',0,4
	.word	477
	.byte	1,24,2,35,0,11
	.byte	'SF8',0,4
	.word	477
	.byte	1,23,2,35,0,11
	.byte	'SF9',0,4
	.word	477
	.byte	1,22,2,35,0,11
	.byte	'SF10',0,4
	.word	477
	.byte	1,21,2,35,0,11
	.byte	'SF11',0,4
	.word	477
	.byte	1,20,2,35,0,11
	.byte	'SF12',0,4
	.word	477
	.byte	1,19,2,35,0,11
	.byte	'SF13',0,4
	.word	477
	.byte	1,18,2,35,0,11
	.byte	'SF14',0,4
	.word	477
	.byte	1,17,2,35,0,11
	.byte	'SF15',0,4
	.word	477
	.byte	1,16,2,35,0,11
	.byte	'SF16',0,4
	.word	477
	.byte	1,15,2,35,0,11
	.byte	'SF17',0,4
	.word	477
	.byte	1,14,2,35,0,11
	.byte	'SF18',0,4
	.word	477
	.byte	1,13,2,35,0,11
	.byte	'SF19',0,4
	.word	477
	.byte	1,12,2,35,0,11
	.byte	'SF20',0,4
	.word	477
	.byte	1,11,2,35,0,11
	.byte	'SF21',0,4
	.word	477
	.byte	1,10,2,35,0,11
	.byte	'SF22',0,4
	.word	477
	.byte	1,9,2,35,0,11
	.byte	'SF23',0,4
	.word	477
	.byte	1,8,2,35,0,11
	.byte	'SF24',0,4
	.word	477
	.byte	1,7,2,35,0,11
	.byte	'SF25',0,4
	.word	477
	.byte	1,6,2,35,0,11
	.byte	'SF26',0,4
	.word	477
	.byte	1,5,2,35,0,11
	.byte	'SF27',0,4
	.word	477
	.byte	1,4,2,35,0,11
	.byte	'SF28',0,4
	.word	477
	.byte	1,3,2,35,0,11
	.byte	'SF29',0,4
	.word	477
	.byte	1,2,2,35,0,11
	.byte	'SF30',0,4
	.word	477
	.byte	1,1,2,35,0,11
	.byte	'SF31',0,4
	.word	477
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_SMU_AG_Bits',0,19,254,1,3
	.word	88922
	.byte	10
	.byte	'_Ifx_SMU_AGC_Bits',0,19,129,2,16,4,11
	.byte	'IGCS0',0,4
	.word	477
	.byte	3,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	477
	.byte	1,28,2,35,0,11
	.byte	'IGCS1',0,4
	.word	477
	.byte	3,25,2,35,0,11
	.byte	'reserved_7',0,4
	.word	477
	.byte	1,24,2,35,0,11
	.byte	'IGCS2',0,4
	.word	477
	.byte	3,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	477
	.byte	5,16,2,35,0,11
	.byte	'RCS',0,4
	.word	477
	.byte	6,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	477
	.byte	2,8,2,35,0,11
	.byte	'PES',0,4
	.word	477
	.byte	5,3,2,35,0,11
	.byte	'EFRST',0,4
	.word	477
	.byte	1,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	477
	.byte	2,0,2,35,0,0,32
	.byte	'Ifx_SMU_AGC_Bits',0,19,142,2,3
	.word	89473
	.byte	10
	.byte	'_Ifx_SMU_AGCF_Bits',0,19,145,2,16,4,11
	.byte	'CF0',0,4
	.word	477
	.byte	1,31,2,35,0,11
	.byte	'CF1',0,4
	.word	477
	.byte	1,30,2,35,0,11
	.byte	'CF2',0,4
	.word	477
	.byte	1,29,2,35,0,11
	.byte	'CF3',0,4
	.word	477
	.byte	1,28,2,35,0,11
	.byte	'CF4',0,4
	.word	477
	.byte	1,27,2,35,0,11
	.byte	'CF5',0,4
	.word	477
	.byte	1,26,2,35,0,11
	.byte	'CF6',0,4
	.word	477
	.byte	1,25,2,35,0,11
	.byte	'CF7',0,4
	.word	477
	.byte	1,24,2,35,0,11
	.byte	'CF8',0,4
	.word	477
	.byte	1,23,2,35,0,11
	.byte	'CF9',0,4
	.word	477
	.byte	1,22,2,35,0,11
	.byte	'CF10',0,4
	.word	477
	.byte	1,21,2,35,0,11
	.byte	'CF11',0,4
	.word	477
	.byte	1,20,2,35,0,11
	.byte	'CF12',0,4
	.word	477
	.byte	1,19,2,35,0,11
	.byte	'CF13',0,4
	.word	477
	.byte	1,18,2,35,0,11
	.byte	'CF14',0,4
	.word	477
	.byte	1,17,2,35,0,11
	.byte	'CF15',0,4
	.word	477
	.byte	1,16,2,35,0,11
	.byte	'CF16',0,4
	.word	477
	.byte	1,15,2,35,0,11
	.byte	'CF17',0,4
	.word	477
	.byte	1,14,2,35,0,11
	.byte	'CF18',0,4
	.word	477
	.byte	1,13,2,35,0,11
	.byte	'CF19',0,4
	.word	477
	.byte	1,12,2,35,0,11
	.byte	'CF20',0,4
	.word	477
	.byte	1,11,2,35,0,11
	.byte	'CF21',0,4
	.word	477
	.byte	1,10,2,35,0,11
	.byte	'CF22',0,4
	.word	477
	.byte	1,9,2,35,0,11
	.byte	'CF23',0,4
	.word	477
	.byte	1,8,2,35,0,11
	.byte	'CF24',0,4
	.word	477
	.byte	1,7,2,35,0,11
	.byte	'CF25',0,4
	.word	477
	.byte	1,6,2,35,0,11
	.byte	'CF26',0,4
	.word	477
	.byte	1,5,2,35,0,11
	.byte	'CF27',0,4
	.word	477
	.byte	1,4,2,35,0,11
	.byte	'CF28',0,4
	.word	477
	.byte	1,3,2,35,0,11
	.byte	'CF29',0,4
	.word	477
	.byte	1,2,2,35,0,11
	.byte	'CF30',0,4
	.word	477
	.byte	1,1,2,35,0,11
	.byte	'CF31',0,4
	.word	477
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_SMU_AGCF_Bits',0,19,179,2,3
	.word	89735
	.byte	10
	.byte	'_Ifx_SMU_AGFSP_Bits',0,19,182,2,16,4,11
	.byte	'FE0',0,4
	.word	477
	.byte	1,31,2,35,0,11
	.byte	'FE1',0,4
	.word	477
	.byte	1,30,2,35,0,11
	.byte	'FE2',0,4
	.word	477
	.byte	1,29,2,35,0,11
	.byte	'FE3',0,4
	.word	477
	.byte	1,28,2,35,0,11
	.byte	'FE4',0,4
	.word	477
	.byte	1,27,2,35,0,11
	.byte	'FE5',0,4
	.word	477
	.byte	1,26,2,35,0,11
	.byte	'FE6',0,4
	.word	477
	.byte	1,25,2,35,0,11
	.byte	'FE7',0,4
	.word	477
	.byte	1,24,2,35,0,11
	.byte	'FE8',0,4
	.word	477
	.byte	1,23,2,35,0,11
	.byte	'FE9',0,4
	.word	477
	.byte	1,22,2,35,0,11
	.byte	'FE10',0,4
	.word	477
	.byte	1,21,2,35,0,11
	.byte	'FE11',0,4
	.word	477
	.byte	1,20,2,35,0,11
	.byte	'FE12',0,4
	.word	477
	.byte	1,19,2,35,0,11
	.byte	'FE13',0,4
	.word	477
	.byte	1,18,2,35,0,11
	.byte	'FE14',0,4
	.word	477
	.byte	1,17,2,35,0,11
	.byte	'FE15',0,4
	.word	477
	.byte	1,16,2,35,0,11
	.byte	'FE16',0,4
	.word	477
	.byte	1,15,2,35,0,11
	.byte	'FE17',0,4
	.word	477
	.byte	1,14,2,35,0,11
	.byte	'FE18',0,4
	.word	477
	.byte	1,13,2,35,0,11
	.byte	'FE19',0,4
	.word	477
	.byte	1,12,2,35,0,11
	.byte	'FE20',0,4
	.word	477
	.byte	1,11,2,35,0,11
	.byte	'FE21',0,4
	.word	477
	.byte	1,10,2,35,0,11
	.byte	'FE22',0,4
	.word	477
	.byte	1,9,2,35,0,11
	.byte	'FE23',0,4
	.word	477
	.byte	1,8,2,35,0,11
	.byte	'FE24',0,4
	.word	477
	.byte	1,7,2,35,0,11
	.byte	'FE25',0,4
	.word	477
	.byte	1,6,2,35,0,11
	.byte	'FE26',0,4
	.word	477
	.byte	1,5,2,35,0,11
	.byte	'FE27',0,4
	.word	477
	.byte	1,4,2,35,0,11
	.byte	'FE28',0,4
	.word	477
	.byte	1,3,2,35,0,11
	.byte	'FE29',0,4
	.word	477
	.byte	1,2,2,35,0,11
	.byte	'FE30',0,4
	.word	477
	.byte	1,1,2,35,0,11
	.byte	'FE31',0,4
	.word	477
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_SMU_AGFSP_Bits',0,19,216,2,3
	.word	90290
	.byte	10
	.byte	'_Ifx_SMU_CLC_Bits',0,19,219,2,16,4,11
	.byte	'DISR',0,1
	.word	629
	.byte	1,7,2,35,0,11
	.byte	'DISS',0,1
	.word	629
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	629
	.byte	1,5,2,35,0,11
	.byte	'EDIS',0,1
	.word	629
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	454
	.byte	28,0,2,35,0,0,32
	.byte	'Ifx_SMU_CLC_Bits',0,19,226,2,3
	.word	90847
	.byte	10
	.byte	'_Ifx_SMU_CMD_Bits',0,19,229,2,16,4,11
	.byte	'CMD',0,4
	.word	477
	.byte	4,28,2,35,0,11
	.byte	'ARG',0,4
	.word	477
	.byte	4,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	477
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_SMU_CMD_Bits',0,19,234,2,3
	.word	90990
	.byte	10
	.byte	'_Ifx_SMU_DBG_Bits',0,19,237,2,16,4,11
	.byte	'SSM',0,1
	.word	629
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	454
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_SMU_DBG_Bits',0,19,241,2,3
	.word	91093
	.byte	10
	.byte	'_Ifx_SMU_FSP_Bits',0,19,244,2,16,4,11
	.byte	'PRE1',0,4
	.word	477
	.byte	3,29,2,35,0,11
	.byte	'PRE2',0,4
	.word	477
	.byte	2,27,2,35,0,11
	.byte	'MODE',0,4
	.word	477
	.byte	2,25,2,35,0,11
	.byte	'PES',0,4
	.word	477
	.byte	1,24,2,35,0,11
	.byte	'TFSP_LOW',0,4
	.word	477
	.byte	14,10,2,35,0,11
	.byte	'TFSP_HIGH',0,4
	.word	477
	.byte	10,0,2,35,0,0,32
	.byte	'Ifx_SMU_FSP_Bits',0,19,252,2,3
	.word	91181
	.byte	10
	.byte	'_Ifx_SMU_ID_Bits',0,19,255,2,16,4,11
	.byte	'MOD_REV',0,1
	.word	629
	.byte	8,0,2,35,0,11
	.byte	'MOD_TYPE',0,1
	.word	629
	.byte	8,0,2,35,1,11
	.byte	'MOD_NUMBER',0,2
	.word	646
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SMU_ID_Bits',0,19,132,3,3
	.word	91336
	.byte	10
	.byte	'_Ifx_SMU_KEYS_Bits',0,19,135,3,16,4,11
	.byte	'CFGLCK',0,4
	.word	477
	.byte	8,24,2,35,0,11
	.byte	'PERLCK',0,4
	.word	477
	.byte	8,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	477
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_SMU_KEYS_Bits',0,19,140,3,3
	.word	91446
	.byte	10
	.byte	'_Ifx_SMU_OCS_Bits',0,19,143,3,16,4,11
	.byte	'TGS',0,1
	.word	629
	.byte	2,6,2,35,0,11
	.byte	'TGB',0,1
	.word	629
	.byte	1,5,2,35,0,11
	.byte	'TG_P',0,1
	.word	629
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	454
	.byte	20,8,2,35,0,11
	.byte	'SUS',0,1
	.word	629
	.byte	4,4,2,35,3,11
	.byte	'SUS_P',0,1
	.word	629
	.byte	1,3,2,35,3,11
	.byte	'SUSSTA',0,1
	.word	629
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	629
	.byte	2,0,2,35,3,0,32
	.byte	'Ifx_SMU_OCS_Bits',0,19,153,3,3
	.word	91558
	.byte	10
	.byte	'_Ifx_SMU_PCTL_Bits',0,19,156,3,16,4,11
	.byte	'HWDIR',0,4
	.word	477
	.byte	2,30,2,35,0,11
	.byte	'HWEN',0,4
	.word	477
	.byte	2,28,2,35,0,11
	.byte	'GFSCU_EN',0,4
	.word	477
	.byte	1,27,2,35,0,11
	.byte	'GFSTS_EN',0,4
	.word	477
	.byte	1,26,2,35,0,11
	.byte	'reserved_6',0,4
	.word	477
	.byte	1,25,2,35,0,11
	.byte	'PCS',0,4
	.word	477
	.byte	1,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	477
	.byte	6,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	477
	.byte	9,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	477
	.byte	9,0,2,35,0,0,32
	.byte	'Ifx_SMU_PCTL_Bits',0,19,167,3,3
	.word	91750
	.byte	10
	.byte	'_Ifx_SMU_RMCTL_Bits',0,19,170,3,16,4,11
	.byte	'TE0',0,4
	.word	477
	.byte	1,31,2,35,0,11
	.byte	'TE1',0,4
	.word	477
	.byte	1,30,2,35,0,11
	.byte	'TE2',0,4
	.word	477
	.byte	1,29,2,35,0,11
	.byte	'TE3',0,4
	.word	477
	.byte	1,28,2,35,0,11
	.byte	'TE4',0,4
	.word	477
	.byte	1,27,2,35,0,11
	.byte	'TE5',0,4
	.word	477
	.byte	1,26,2,35,0,11
	.byte	'TE6',0,4
	.word	477
	.byte	1,25,2,35,0,11
	.byte	'TE7',0,4
	.word	477
	.byte	1,24,2,35,0,11
	.byte	'TE8',0,4
	.word	477
	.byte	1,23,2,35,0,11
	.byte	'TE9',0,4
	.word	477
	.byte	1,22,2,35,0,11
	.byte	'TE10',0,4
	.word	477
	.byte	1,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	477
	.byte	1,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	477
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	477
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	477
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	477
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	477
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	477
	.byte	1,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	477
	.byte	1,13,2,35,0,11
	.byte	'reserved_19',0,4
	.word	477
	.byte	1,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	477
	.byte	1,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	477
	.byte	1,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	477
	.byte	1,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	477
	.byte	1,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	477
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	477
	.byte	1,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	477
	.byte	1,5,2,35,0,11
	.byte	'reserved_27',0,4
	.word	477
	.byte	1,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	477
	.byte	1,3,2,35,0,11
	.byte	'reserved_29',0,4
	.word	477
	.byte	1,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	477
	.byte	1,1,2,35,0,11
	.byte	'reserved_31',0,4
	.word	477
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_SMU_RMCTL_Bits',0,19,204,3,3
	.word	91981
	.byte	10
	.byte	'_Ifx_SMU_RMEF_Bits',0,19,207,3,16,4,11
	.byte	'EF0',0,4
	.word	477
	.byte	1,31,2,35,0,11
	.byte	'EF1',0,4
	.word	477
	.byte	1,30,2,35,0,11
	.byte	'EF2',0,4
	.word	477
	.byte	1,29,2,35,0,11
	.byte	'EF3',0,4
	.word	477
	.byte	1,28,2,35,0,11
	.byte	'EF4',0,4
	.word	477
	.byte	1,27,2,35,0,11
	.byte	'EF5',0,4
	.word	477
	.byte	1,26,2,35,0,11
	.byte	'EF6',0,4
	.word	477
	.byte	1,25,2,35,0,11
	.byte	'EF7',0,4
	.word	477
	.byte	1,24,2,35,0,11
	.byte	'EF8',0,4
	.word	477
	.byte	1,23,2,35,0,11
	.byte	'EF9',0,4
	.word	477
	.byte	1,22,2,35,0,11
	.byte	'EF10',0,4
	.word	477
	.byte	1,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	477
	.byte	1,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	477
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	477
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	477
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	477
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	477
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	477
	.byte	1,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	477
	.byte	1,13,2,35,0,11
	.byte	'reserved_19',0,4
	.word	477
	.byte	1,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	477
	.byte	1,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	477
	.byte	1,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	477
	.byte	1,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	477
	.byte	1,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	477
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	477
	.byte	1,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	477
	.byte	1,5,2,35,0,11
	.byte	'reserved_27',0,4
	.word	477
	.byte	1,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	477
	.byte	1,3,2,35,0,11
	.byte	'reserved_29',0,4
	.word	477
	.byte	1,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	477
	.byte	1,1,2,35,0,11
	.byte	'reserved_31',0,4
	.word	477
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_SMU_RMEF_Bits',0,19,241,3,3
	.word	92685
	.byte	10
	.byte	'_Ifx_SMU_RMSTS_Bits',0,19,244,3,16,4,11
	.byte	'STS0',0,4
	.word	477
	.byte	1,31,2,35,0,11
	.byte	'STS1',0,4
	.word	477
	.byte	1,30,2,35,0,11
	.byte	'STS2',0,4
	.word	477
	.byte	1,29,2,35,0,11
	.byte	'STS3',0,4
	.word	477
	.byte	1,28,2,35,0,11
	.byte	'STS4',0,4
	.word	477
	.byte	1,27,2,35,0,11
	.byte	'STS5',0,4
	.word	477
	.byte	1,26,2,35,0,11
	.byte	'STS6',0,4
	.word	477
	.byte	1,25,2,35,0,11
	.byte	'STS7',0,4
	.word	477
	.byte	1,24,2,35,0,11
	.byte	'STS8',0,4
	.word	477
	.byte	1,23,2,35,0,11
	.byte	'STS9',0,4
	.word	477
	.byte	1,22,2,35,0,11
	.byte	'STS10',0,4
	.word	477
	.byte	1,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	477
	.byte	1,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	477
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	477
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	477
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	477
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	477
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	477
	.byte	1,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	477
	.byte	1,13,2,35,0,11
	.byte	'reserved_19',0,4
	.word	477
	.byte	1,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	477
	.byte	1,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	477
	.byte	1,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	477
	.byte	1,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	477
	.byte	1,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	477
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	477
	.byte	1,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	477
	.byte	1,5,2,35,0,11
	.byte	'reserved_27',0,4
	.word	477
	.byte	1,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	477
	.byte	1,3,2,35,0,11
	.byte	'reserved_29',0,4
	.word	477
	.byte	1,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	477
	.byte	1,1,2,35,0,11
	.byte	'reserved_31',0,4
	.word	477
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_SMU_RMSTS_Bits',0,19,150,4,3
	.word	93387
	.byte	10
	.byte	'_Ifx_SMU_RTAC00_Bits',0,19,153,4,16,4,11
	.byte	'GID0',0,4
	.word	477
	.byte	4,28,2,35,0,11
	.byte	'ALID0',0,4
	.word	477
	.byte	5,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	477
	.byte	7,16,2,35,0,11
	.byte	'GID1',0,4
	.word	477
	.byte	4,12,2,35,0,11
	.byte	'ALID1',0,4
	.word	477
	.byte	5,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	477
	.byte	7,0,2,35,0,0,32
	.byte	'Ifx_SMU_RTAC00_Bits',0,19,161,4,3
	.word	94102
	.byte	10
	.byte	'_Ifx_SMU_RTAC01_Bits',0,19,164,4,16,4,11
	.byte	'GID2',0,4
	.word	477
	.byte	4,28,2,35,0,11
	.byte	'ALID2',0,4
	.word	477
	.byte	5,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	477
	.byte	7,16,2,35,0,11
	.byte	'GID3',0,4
	.word	477
	.byte	4,12,2,35,0,11
	.byte	'ALID3',0,4
	.word	477
	.byte	5,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	477
	.byte	7,0,2,35,0,0,32
	.byte	'Ifx_SMU_RTAC01_Bits',0,19,172,4,3
	.word	94270
	.byte	10
	.byte	'_Ifx_SMU_RTAC10_Bits',0,19,175,4,16,4,11
	.byte	'GID0',0,4
	.word	477
	.byte	4,28,2,35,0,11
	.byte	'ALID0',0,4
	.word	477
	.byte	5,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	477
	.byte	7,16,2,35,0,11
	.byte	'GID1',0,4
	.word	477
	.byte	4,12,2,35,0,11
	.byte	'ALID1',0,4
	.word	477
	.byte	5,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	477
	.byte	7,0,2,35,0,0,32
	.byte	'Ifx_SMU_RTAC10_Bits',0,19,183,4,3
	.word	94438
	.byte	10
	.byte	'_Ifx_SMU_RTAC11_Bits',0,19,186,4,16,4,11
	.byte	'GID2',0,4
	.word	477
	.byte	4,28,2,35,0,11
	.byte	'ALID2',0,4
	.word	477
	.byte	5,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	477
	.byte	7,16,2,35,0,11
	.byte	'GID3',0,4
	.word	477
	.byte	4,12,2,35,0,11
	.byte	'ALID3',0,4
	.word	477
	.byte	5,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	477
	.byte	7,0,2,35,0,0,32
	.byte	'Ifx_SMU_RTAC11_Bits',0,19,194,4,3
	.word	94606
	.byte	10
	.byte	'_Ifx_SMU_RTC_Bits',0,19,197,4,16,4,11
	.byte	'RT0E',0,4
	.word	477
	.byte	1,31,2,35,0,11
	.byte	'RT1E',0,4
	.word	477
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	477
	.byte	6,24,2,35,0,11
	.byte	'RTD',0,4
	.word	477
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_SMU_RTC_Bits',0,19,203,4,3
	.word	94774
	.byte	10
	.byte	'_Ifx_SMU_STS_Bits',0,19,206,4,16,4,11
	.byte	'CMD',0,4
	.word	477
	.byte	4,28,2,35,0,11
	.byte	'ARG',0,4
	.word	477
	.byte	4,24,2,35,0,11
	.byte	'RES',0,4
	.word	477
	.byte	1,23,2,35,0,11
	.byte	'ASCE',0,4
	.word	477
	.byte	1,22,2,35,0,11
	.byte	'FSP',0,4
	.word	477
	.byte	2,20,2,35,0,11
	.byte	'FSTS',0,4
	.word	477
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	477
	.byte	3,16,2,35,0,11
	.byte	'RTS0',0,4
	.word	477
	.byte	1,15,2,35,0,11
	.byte	'RTME0',0,4
	.word	477
	.byte	1,14,2,35,0,11
	.byte	'RTS1',0,4
	.word	477
	.byte	1,13,2,35,0,11
	.byte	'RTME1',0,4
	.word	477
	.byte	1,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	477
	.byte	12,0,2,35,0,0,32
	.byte	'Ifx_SMU_STS_Bits',0,19,220,4,3
	.word	94894
	.byte	12,19,228,4,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	86445
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_ACCEN0',0,19,233,4,3
	.word	95149
	.byte	12,19,236,4,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	87002
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_ACCEN1',0,19,241,4,3
	.word	95213
	.byte	12,19,244,4,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	87079
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_AD',0,19,249,4,3
	.word	95277
	.byte	12,19,252,4,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	87629
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_AEX',0,19,129,5,3
	.word	95337
	.byte	12,19,132,5,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	88186
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_AEXCLR',0,19,137,5,3
	.word	95398
	.byte	12,19,140,5,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	88782
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_AFCNT',0,19,145,5,3
	.word	95462
	.byte	12,19,148,5,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	88922
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_AG',0,19,153,5,3
	.word	95525
	.byte	12,19,156,5,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	89473
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_AGC',0,19,161,5,3
	.word	95585
	.byte	12,19,164,5,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	89735
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_AGCF',0,19,169,5,3
	.word	95646
	.byte	12,19,172,5,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	90290
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_AGFSP',0,19,177,5,3
	.word	95708
	.byte	12,19,180,5,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	90847
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_CLC',0,19,185,5,3
	.word	95771
	.byte	12,19,188,5,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	90990
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_CMD',0,19,193,5,3
	.word	95832
	.byte	12,19,196,5,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	91093
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_DBG',0,19,201,5,3
	.word	95893
	.byte	12,19,204,5,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	91181
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_FSP',0,19,209,5,3
	.word	95954
	.byte	12,19,212,5,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	91336
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_ID',0,19,217,5,3
	.word	96015
	.byte	12,19,220,5,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	91446
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_KEYS',0,19,225,5,3
	.word	96075
	.byte	12,19,228,5,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	91558
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_OCS',0,19,233,5,3
	.word	96137
	.byte	12,19,236,5,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	91750
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_PCTL',0,19,241,5,3
	.word	96198
	.byte	12,19,244,5,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	91981
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_RMCTL',0,19,249,5,3
	.word	96260
	.byte	12,19,252,5,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	92685
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_RMEF',0,19,129,6,3
	.word	96323
	.byte	12,19,132,6,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	93387
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_RMSTS',0,19,137,6,3
	.word	96385
	.byte	12,19,140,6,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	94102
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_RTAC00',0,19,145,6,3
	.word	96448
	.byte	12,19,148,6,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	94270
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_RTAC01',0,19,153,6,3
	.word	96512
	.byte	12,19,156,6,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	94438
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_RTAC10',0,19,161,6,3
	.word	96576
	.byte	12,19,164,6,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	94606
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_RTAC11',0,19,169,6,3
	.word	96640
	.byte	12,19,172,6,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	94774
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_RTC',0,19,177,6,3
	.word	96704
	.byte	12,19,180,6,9,4,13
	.byte	'U',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	470
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	94894
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SMU_STS',0,19,185,6,3
	.word	96765
	.byte	17,7,210,2,9,1,18
	.byte	'IfxScuCcu_LowPowerDivRatio_divBy30',0,1,18
	.byte	'IfxScuCcu_LowPowerDivRatio_divBy60',0,2,18
	.byte	'IfxScuCcu_LowPowerDivRatio_divBy120',0,3,18
	.byte	'IfxScuCcu_LowPowerDivRatio_divBy240',0,4,0,32
	.byte	'IfxScuCcu_LowPowerDivRatio',0,7,216,2,3
	.word	96826
	.byte	17,7,220,2,9,1,18
	.byte	'IfxScuCcu_ModulationAmplitude_0p5',0,0,18
	.byte	'IfxScuCcu_ModulationAmplitude_1p0',0,1,18
	.byte	'IfxScuCcu_ModulationAmplitude_1p25',0,2,18
	.byte	'IfxScuCcu_ModulationAmplitude_1p5',0,3,18
	.byte	'IfxScuCcu_ModulationAmplitude_2p0',0,4,18
	.byte	'IfxScuCcu_ModulationAmplitude_2p5',0,5,18
	.byte	'IfxScuCcu_ModulationAmplitude_count',0,6,0,32
	.byte	'IfxScuCcu_ModulationAmplitude',0,7,229,2,3
	.word	97019
	.byte	17,7,254,3,9,1,18
	.byte	'IfxScuCcu_PllInputClockSelection_fOsc1',0,0,18
	.byte	'IfxScuCcu_PllInputClockSelection_fOsc0',0,1,18
	.byte	'IfxScuCcu_PllInputClockSelection_fSysclk',0,2,0,32
	.byte	'IfxScuCcu_PllInputClockSelection',0,7,131,4,3
	.word	97320
	.byte	17,7,135,4,9,1,18
	.byte	'IfxScuCcu_Traprequest_esr0',0,0,18
	.byte	'IfxScuCcu_Traprequest_esr1',0,1,18
	.byte	'IfxScuCcu_Traprequest_trap2',0,2,18
	.byte	'IfxScuCcu_Traprequest_smu',0,3,0,32
	.byte	'IfxScuCcu_Traprequest',0,7,141,4,3
	.word	97494
	.byte	17,7,147,4,9,1,18
	.byte	'IfxScuCcu_ModEn_disabled',0,0,18
	.byte	'IfxScuCcu_ModEn_enabled',0,1,0,32
	.byte	'IfxScuCcu_ModEn',0,7,151,4,3
	.word	97648
	.byte	20,7,162,4,9,6,13
	.byte	'pDivider',0
	.word	629
	.byte	1,2,35,0,13
	.byte	'nDivider',0
	.word	629
	.byte	1,2,35,1,13
	.byte	'k2Divider',0
	.word	629
	.byte	1,2,35,2,13
	.byte	'k3Divider',0
	.word	629
	.byte	1,2,35,3,13
	.byte	'k3DividerBypass',0
	.word	629
	.byte	1,2,35,4,0,32
	.byte	'IfxScuCcu_PerPllConfig',0,7,171,4,3
	.word	97733
	.byte	20,7,176,4,9,4,13
	.byte	'pDivider',0
	.word	629
	.byte	1,2,35,0,13
	.byte	'nDivider',0
	.word	629
	.byte	1,2,35,1,13
	.byte	'k2Divider',0
	.word	629
	.byte	1,2,35,2,0,32
	.byte	'IfxScuCcu_SysPllConfig',0,7,181,4,3
	.word	97871
	.byte	20,7,189,4,9,8,13
	.byte	'value',0
	.word	9795
	.byte	4,2,35,0,13
	.byte	'mask',0
	.word	9795
	.byte	4,2,35,4,0,32
	.byte	'IfxScuCcu_CcuconRegConfig',0,7,193,4,3
	.word	97965
	.byte	20,7,197,4,9,6,13
	.byte	'k2Step',0
	.word	629
	.byte	1,2,35,0,13
	.byte	'waitTime',0
	.word	224
	.byte	4,2,35,2,0,32
	.byte	'IfxScuCcu_PllStepConfig',0,7,201,4,3
	.word	98036
	.byte	20,7,205,4,9,16,13
	.byte	'xtalFrequency',0
	.word	9795
	.byte	4,2,35,0,13
	.byte	'pllInputClockSelection',0
	.word	97320
	.byte	1,2,35,4,13
	.byte	'sysPllConfig',0
	.word	97871
	.byte	4,2,35,6,13
	.byte	'perPllConfig',0
	.word	97733
	.byte	6,2,35,10,0,32
	.byte	'IfxScuCcu_pllsParameterConfig',0,7,211,4,3
	.word	98110
	.byte	20,7,219,4,9,8,13
	.byte	'value',0
	.word	9795
	.byte	4,2,35,0,13
	.byte	'mask',0
	.word	9795
	.byte	4,2,35,4,0,32
	.byte	'IfxScuCcu_FlashWaitstateConfig',0,7,223,4,3
	.word	98255
	.byte	20,7,231,4,9,80,13
	.byte	'ccucon0',0
	.word	97965
	.byte	8,2,35,0,13
	.byte	'ccucon1',0
	.word	97965
	.byte	8,2,35,8,13
	.byte	'ccucon2',0
	.word	97965
	.byte	8,2,35,16,13
	.byte	'ccucon5',0
	.word	97965
	.byte	8,2,35,24,13
	.byte	'ccucon6',0
	.word	97965
	.byte	8,2,35,32,13
	.byte	'ccucon7',0
	.word	97965
	.byte	8,2,35,40,13
	.byte	'ccucon8',0
	.word	97965
	.byte	8,2,35,48,13
	.byte	'ccucon9',0
	.word	97965
	.byte	8,2,35,56,13
	.byte	'ccucon10',0
	.word	97965
	.byte	8,2,35,64,13
	.byte	'ccucon11',0
	.word	97965
	.byte	8,2,35,72,0,32
	.byte	'IfxScuCcu_ClockDistributionConfig',0,7,243,4,3
	.word	98331
	.byte	20,7,247,4,9,20,13
	.byte	'pllsParameters',0
	.word	98110
	.byte	16,2,35,0,13
	.byte	'waitTime',0
	.word	224
	.byte	4,2,35,16,0,32
	.byte	'IfxScuCcu_InitialStepConfig',0,7,251,4,3
	.word	98553
	.byte	21
	.word	98036
	.byte	3
	.word	98639
	.byte	20,7,255,4,9,8,13
	.byte	'numOfSteps',0
	.word	629
	.byte	1,2,35,0,13
	.byte	'pllSteps',0
	.word	98644
	.byte	4,2,35,4,0,32
	.byte	'IfxScuCcu_PllThrottleConfig',0,7,131,5,3
	.word	98649
	.byte	20,7,137,5,9,2,13
	.byte	'Mod_Enable',0
	.word	97648
	.byte	1,2,35,0,13
	.byte	'Mod_Amp',0
	.word	97019
	.byte	1,2,35,1,0,32
	.byte	'IfxScuCcu_Mod_Config',0,7,141,5,3
	.word	98731
	.byte	17,8,141,1,9,1,18
	.byte	'IfxCpu_CounterMode_normal',0,0,18
	.byte	'IfxCpu_CounterMode_task',0,1,0,32
	.byte	'IfxCpu_CounterMode',0,8,145,1,3
	.word	98805
	.byte	20,8,198,1,9,6,13
	.byte	'counter',0
	.word	9795
	.byte	4,2,35,0,13
	.byte	'overlfow',0
	.word	629
	.byte	1,2,35,4,0,32
	.byte	'IfxCpu_Counter',0,8,202,1,3
	.word	98894
	.byte	20,8,210,1,9,32,13
	.byte	'instruction',0
	.word	98894
	.byte	6,2,35,0,13
	.byte	'clock',0
	.word	98894
	.byte	6,2,35,6,13
	.byte	'counter1',0
	.word	98894
	.byte	6,2,35,12,13
	.byte	'counter2',0
	.word	98894
	.byte	6,2,35,18,13
	.byte	'counter3',0
	.word	98894
	.byte	6,2,35,24,0,32
	.byte	'IfxCpu_Perf',0,8,217,1,3
	.word	98960
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L46:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,21,0,54,15,39,12,0,0,3,15,0,73,19,0,0,4,46,1,3,8,32,13
	.byte	58,15,59,15,57,15,54,15,39,12,0,0,5,5,0,3,8,58,15,59,15,57,15,73,19,0,0,6,11,0,0,0,7,36,0,3,8,11,15,62
	.byte	15,0,0,8,46,1,3,8,32,13,58,15,59,15,57,15,73,19,54,15,39,12,0,0,9,59,0,3,8,0,0,10,19,1,3,8,58,15,59,15
	.byte	57,15,11,15,0,0,11,13,0,3,8,11,15,73,19,13,15,12,15,56,9,0,0,12,23,1,58,15,59,15,57,15,11,15,0,0,13,13
	.byte	0,3,8,73,19,11,15,56,9,0,0,14,53,0,73,19,0,0,15,1,1,11,15,73,19,0,0,16,33,0,47,15,0,0,17,4,1,58,15,59
	.byte	15,57,15,11,15,0,0,18,40,0,3,8,28,13,0,0,19,11,1,0,0,20,19,1,58,15,59,15,57,15,11,15,0,0,21,38,0,73,19
	.byte	0,0,22,46,1,3,8,54,15,39,12,63,12,60,12,0,0,23,5,0,73,19,0,0,24,46,1,3,8,73,19,54,15,39,12,63,12,60,12
	.byte	0,0,25,5,0,3,8,73,19,0,0,26,46,0,3,8,54,15,39,12,63,12,60,12,0,0,27,46,1,49,19,0,0,28,5,0,49,19,0,0,29
	.byte	29,1,49,19,0,0,30,11,0,49,19,0,0,31,46,0,3,8,58,15,59,15,57,15,54,15,63,12,60,12,0,0,32,22,0,3,8,58,15
	.byte	59,15,57,15,73,19,0,0,33,21,0,54,15,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L47:
	.word	.L396-.L395
.L395:
	.half	3
	.word	.L398-.L397
.L397:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Cpu\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Scu\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\_Reg',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Port\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\_Impl',0,0
	.byte	'IfxCpu_IntrinsicsTasking.h',0,1,0,0
	.byte	'IfxCpu_Intrinsics.h',0,1,0,0
	.byte	'IfxScuWdt.h',0,2,0,0
	.byte	'IfxScu_regdef.h',0,3,0,0
	.byte	'IfxPort.h',0,4,0,0
	.byte	'IfxPort_regdef.h',0,3,0,0
	.byte	'IfxScuCcu.h',0,2,0,0
	.byte	'IfxCpu.h',0,1,0,0
	.byte	'IfxCpu_cfg.h',0,5,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap\\IfxCpu_Trap.c',0,0,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap\\IfxCpu_Trap.h',0,0,0,0
	.byte	'IfxCpu_regdef.h',0,3,0,0
	.byte	'Platform_Types.h',0,1,0,0
	.byte	'Ifx_Types.h',0,1,0,0
	.byte	'Ifx_TypesReg.h',0,3,0,0
	.byte	'IfxSrc_regdef.h',0,3,0,0
	.byte	'IfxStm_regdef.h',0,3,0,0
	.byte	'IfxScu_cfg.h',0,5,0,0
	.byte	'IfxSmu_regdef.h',0,3,0,0,0
.L398:
.L396:
	.sdecl	'.debug_info',debug,cluster('IfxCpu_Trap_memoryManagementError')
	.sect	'.debug_info'
.L48:
	.word	426
	.half	3
	.word	.L49
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap\\IfxCpu_Trap.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\Debug\\',0,12,1
	.word	.L51,.L50
	.byte	2
	.word	.L44
	.byte	3
	.byte	'IfxCpu_Trap_memoryManagementError',0,1,126,6,1,1,1
	.word	.L3,.L153,.L2
	.byte	4
	.byte	'tin',0,1,126,47
	.word	.L154,.L155
	.byte	5
	.word	.L3,.L153
	.byte	6
	.byte	'trapWatch',0,1,128,1,26
	.word	.L156,.L157
	.byte	7
	.word	.L158,.L159,.L160
	.byte	8
	.word	.L161,.L162
	.byte	8
	.word	.L163,.L164
	.byte	9
	.word	.L165,.L159,.L160
	.byte	6
	.byte	'trapInfo',0,1,117,17
	.word	.L166,.L167
	.byte	7
	.word	.L168,.L159,.L169
	.byte	9
	.word	.L170,.L159,.L169
	.byte	6
	.byte	'res',0,2,219,2,19
	.word	.L171,.L172
	.byte	0,0,7
	.word	.L173,.L174,.L175
	.byte	10
	.word	.L176,.L177
	.byte	6
	.byte	'reg',0,3,229,6,21
	.word	.L178,.L179
	.byte	0,0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_Trap_memoryManagementError')
	.sect	'.debug_abbrev'
.L49:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,17,1,18
	.byte	1,0,0,10,11,1,49,16,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_Trap_memoryManagementError')
	.sect	'.debug_line'
.L50:
	.word	.L400-.L399
.L399:
	.half	3
	.word	.L402-.L401
.L401:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Cpu\\Std',0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap\\IfxCpu_Trap.c',0,0,0,0
	.byte	'IfxCpu_IntrinsicsTasking.h',0,1,0,0
	.byte	'IfxCpu.h',0,1,0,0,0
.L402:
	.byte	5,6,7,0,5,2
	.word	.L3
	.byte	3,253,0,1,4,2,5,5,9
	.half	.L159-.L3
	.byte	3,222,1,1,4,1,5,45,9
	.half	.L403-.L159
	.byte	3,154,126,1,5,21,9
	.half	.L169-.L403
	.byte	3,1,1,9
	.half	.L404-.L169
	.byte	3,1,1,4,3,5,19,9
	.half	.L174-.L404
	.byte	3,238,5,1,5,28,9
	.half	.L356-.L174
	.byte	3,1,1,4,1,5,15,9
	.half	.L175-.L356
	.byte	3,154,122,1,5,5,9
	.half	.L160-.L175
	.byte	3,1,1,9
	.half	.L358-.L160
	.byte	3,1,1,9
	.half	.L405-.L358
	.byte	3,1,1,9
	.half	.L406-.L405
	.byte	3,1,1,5,1,9
	.half	.L407-.L406
	.byte	3,1,1,7,9
	.half	.L52-.L407
	.byte	0,1,1
.L400:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_Trap_memoryManagementError')
	.sect	'.debug_ranges'
.L51:
	.word	-1,.L3,0,.L52-.L3,0,0
.L177:
	.word	-1,.L3,.L174-.L3,.L175-.L3,-1,.L5,0,.L147-.L5,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_Trap_internalProtectionError')
	.sect	'.debug_info'
.L53:
	.word	434
	.half	3
	.word	.L54
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap\\IfxCpu_Trap.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\Debug\\',0,12,1
	.word	.L56,.L55
	.byte	2
	.word	.L44
	.byte	3
	.byte	'IfxCpu_Trap_internalProtectionError',0,1,137,1,6,1,1,1
	.word	.L7,.L180,.L6
	.byte	4
	.byte	'tin',0,1,137,1,49
	.word	.L154,.L181
	.byte	5
	.word	.L7,.L180
	.byte	6
	.byte	'trapWatch',0,1,139,1,26
	.word	.L182,.L183
	.byte	7
	.word	.L158,.L184,.L185
	.byte	8
	.word	.L161,.L186
	.byte	8
	.word	.L163,.L187
	.byte	9
	.word	.L165,.L184,.L185
	.byte	6
	.byte	'trapInfo',0,1,117,17
	.word	.L166,.L188
	.byte	7
	.word	.L168,.L184,.L189
	.byte	9
	.word	.L170,.L184,.L189
	.byte	6
	.byte	'res',0,2,219,2,19
	.word	.L171,.L190
	.byte	0,0,7
	.word	.L173,.L191,.L192
	.byte	9
	.word	.L176,.L191,.L192
	.byte	6
	.byte	'reg',0,3,229,6,21
	.word	.L178,.L193
	.byte	0,0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_Trap_internalProtectionError')
	.sect	'.debug_abbrev'
.L54:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,17,1,18
	.byte	1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_Trap_internalProtectionError')
	.sect	'.debug_line'
.L55:
	.word	.L409-.L408
.L408:
	.half	3
	.word	.L411-.L410
.L410:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Cpu\\Std',0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap\\IfxCpu_Trap.c',0,0,0,0
	.byte	'IfxCpu_IntrinsicsTasking.h',0,1,0,0
	.byte	'IfxCpu.h',0,1,0,0,0
.L411:
	.byte	5,6,7,0,5,2
	.word	.L7
	.byte	3,136,1,1,4,2,5,5,9
	.half	.L184-.L7
	.byte	3,211,1,1,4,1,5,45,9
	.half	.L412-.L184
	.byte	3,154,126,1,5,21,9
	.half	.L189-.L412
	.byte	3,1,1,9
	.half	.L413-.L189
	.byte	3,1,1,4,3,5,19,9
	.half	.L191-.L413
	.byte	3,238,5,1,5,28,9
	.half	.L359-.L191
	.byte	3,1,1,4,1,5,15,9
	.half	.L192-.L359
	.byte	3,165,122,1,5,5,9
	.half	.L185-.L192
	.byte	3,1,1,9
	.half	.L361-.L185
	.byte	3,1,1,9
	.half	.L414-.L361
	.byte	3,1,1,9
	.half	.L415-.L414
	.byte	3,1,1,5,1,9
	.half	.L416-.L415
	.byte	3,1,1,7,9
	.half	.L57-.L416
	.byte	0,1,1
.L409:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_Trap_internalProtectionError')
	.sect	'.debug_ranges'
.L56:
	.word	-1,.L7,0,.L57-.L7,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_Trap_instructionError')
	.sect	'.debug_info'
.L58:
	.word	427
	.half	3
	.word	.L59
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap\\IfxCpu_Trap.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\Debug\\',0,12,1
	.word	.L61,.L60
	.byte	2
	.word	.L44
	.byte	3
	.byte	'IfxCpu_Trap_instructionError',0,1,148,1,6,1,1,1
	.word	.L9,.L194,.L8
	.byte	4
	.byte	'tin',0,1,148,1,42
	.word	.L154,.L195
	.byte	5
	.word	.L9,.L194
	.byte	6
	.byte	'trapWatch',0,1,150,1,26
	.word	.L196,.L197
	.byte	7
	.word	.L158,.L198,.L199
	.byte	8
	.word	.L161,.L200
	.byte	8
	.word	.L163,.L201
	.byte	9
	.word	.L165,.L198,.L199
	.byte	6
	.byte	'trapInfo',0,1,117,17
	.word	.L166,.L202
	.byte	7
	.word	.L168,.L198,.L203
	.byte	9
	.word	.L170,.L198,.L203
	.byte	6
	.byte	'res',0,2,219,2,19
	.word	.L171,.L204
	.byte	0,0,7
	.word	.L173,.L205,.L206
	.byte	9
	.word	.L176,.L205,.L206
	.byte	6
	.byte	'reg',0,3,229,6,21
	.word	.L178,.L207
	.byte	0,0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_Trap_instructionError')
	.sect	'.debug_abbrev'
.L59:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,17,1,18
	.byte	1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_Trap_instructionError')
	.sect	'.debug_line'
.L60:
	.word	.L418-.L417
.L417:
	.half	3
	.word	.L420-.L419
.L419:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Cpu\\Std',0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap\\IfxCpu_Trap.c',0,0,0,0
	.byte	'IfxCpu_IntrinsicsTasking.h',0,1,0,0
	.byte	'IfxCpu.h',0,1,0,0,0
.L420:
	.byte	5,6,7,0,5,2
	.word	.L9
	.byte	3,147,1,1,4,2,5,5,9
	.half	.L198-.L9
	.byte	3,200,1,1,4,1,5,45,9
	.half	.L421-.L198
	.byte	3,154,126,1,5,21,9
	.half	.L203-.L421
	.byte	3,1,1,9
	.half	.L422-.L203
	.byte	3,1,1,4,3,5,19,9
	.half	.L205-.L422
	.byte	3,238,5,1,5,28,9
	.half	.L362-.L205
	.byte	3,1,1,4,1,5,15,9
	.half	.L206-.L362
	.byte	3,176,122,1,5,5,9
	.half	.L199-.L206
	.byte	3,1,1,9
	.half	.L364-.L199
	.byte	3,1,1,9
	.half	.L423-.L364
	.byte	3,1,1,9
	.half	.L424-.L423
	.byte	3,1,1,5,1,9
	.half	.L425-.L424
	.byte	3,1,1,7,9
	.half	.L62-.L425
	.byte	0,1,1
.L418:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_Trap_instructionError')
	.sect	'.debug_ranges'
.L61:
	.word	-1,.L9,0,.L62-.L9,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_Trap_contextManagementError')
	.sect	'.debug_info'
.L63:
	.word	433
	.half	3
	.word	.L64
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap\\IfxCpu_Trap.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\Debug\\',0,12,1
	.word	.L66,.L65
	.byte	2
	.word	.L44
	.byte	3
	.byte	'IfxCpu_Trap_contextManagementError',0,1,159,1,6,1,1,1
	.word	.L11,.L208,.L10
	.byte	4
	.byte	'tin',0,1,159,1,48
	.word	.L154,.L209
	.byte	5
	.word	.L11,.L208
	.byte	6
	.byte	'trapWatch',0,1,161,1,26
	.word	.L210,.L211
	.byte	7
	.word	.L158,.L212,.L213
	.byte	8
	.word	.L161,.L214
	.byte	8
	.word	.L163,.L215
	.byte	9
	.word	.L165,.L212,.L213
	.byte	6
	.byte	'trapInfo',0,1,117,17
	.word	.L166,.L216
	.byte	7
	.word	.L168,.L212,.L217
	.byte	9
	.word	.L170,.L212,.L217
	.byte	6
	.byte	'res',0,2,219,2,19
	.word	.L171,.L218
	.byte	0,0,7
	.word	.L173,.L219,.L220
	.byte	9
	.word	.L176,.L219,.L220
	.byte	6
	.byte	'reg',0,3,229,6,21
	.word	.L178,.L221
	.byte	0,0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_Trap_contextManagementError')
	.sect	'.debug_abbrev'
.L64:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,17,1,18
	.byte	1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_Trap_contextManagementError')
	.sect	'.debug_line'
.L65:
	.word	.L427-.L426
.L426:
	.half	3
	.word	.L429-.L428
.L428:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Cpu\\Std',0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap\\IfxCpu_Trap.c',0,0,0,0
	.byte	'IfxCpu_IntrinsicsTasking.h',0,1,0,0
	.byte	'IfxCpu.h',0,1,0,0,0
.L429:
	.byte	5,6,7,0,5,2
	.word	.L11
	.byte	3,158,1,1,4,2,5,5,9
	.half	.L212-.L11
	.byte	3,189,1,1,4,1,5,45,9
	.half	.L430-.L212
	.byte	3,154,126,1,5,21,9
	.half	.L217-.L430
	.byte	3,1,1,9
	.half	.L431-.L217
	.byte	3,1,1,4,3,5,19,9
	.half	.L219-.L431
	.byte	3,238,5,1,5,28,9
	.half	.L365-.L219
	.byte	3,1,1,4,1,5,15,9
	.half	.L220-.L365
	.byte	3,187,122,1,5,5,9
	.half	.L213-.L220
	.byte	3,1,1,9
	.half	.L367-.L213
	.byte	3,1,1,9
	.half	.L432-.L367
	.byte	3,1,1,9
	.half	.L433-.L432
	.byte	3,1,1,5,1,9
	.half	.L434-.L433
	.byte	3,1,1,7,9
	.half	.L67-.L434
	.byte	0,1,1
.L427:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_Trap_contextManagementError')
	.sect	'.debug_ranges'
.L66:
	.word	-1,.L11,0,.L67-.L11,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_Trap_busError')
	.sect	'.debug_info'
.L68:
	.word	419
	.half	3
	.word	.L69
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap\\IfxCpu_Trap.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\Debug\\',0,12,1
	.word	.L71,.L70
	.byte	2
	.word	.L44
	.byte	3
	.byte	'IfxCpu_Trap_busError',0,1,170,1,6,1,1,1
	.word	.L13,.L222,.L12
	.byte	4
	.byte	'tin',0,1,170,1,34
	.word	.L154,.L223
	.byte	5
	.word	.L13,.L222
	.byte	6
	.byte	'trapWatch',0,1,172,1,26
	.word	.L224,.L225
	.byte	7
	.word	.L158,.L226,.L227
	.byte	8
	.word	.L161,.L228
	.byte	8
	.word	.L163,.L229
	.byte	9
	.word	.L165,.L226,.L227
	.byte	6
	.byte	'trapInfo',0,1,117,17
	.word	.L166,.L230
	.byte	7
	.word	.L168,.L226,.L231
	.byte	9
	.word	.L170,.L226,.L231
	.byte	6
	.byte	'res',0,2,219,2,19
	.word	.L171,.L232
	.byte	0,0,7
	.word	.L173,.L233,.L234
	.byte	9
	.word	.L176,.L233,.L234
	.byte	6
	.byte	'reg',0,3,229,6,21
	.word	.L178,.L235
	.byte	0,0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_Trap_busError')
	.sect	'.debug_abbrev'
.L69:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,17,1,18
	.byte	1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_Trap_busError')
	.sect	'.debug_line'
.L70:
	.word	.L436-.L435
.L435:
	.half	3
	.word	.L438-.L437
.L437:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Cpu\\Std',0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap\\IfxCpu_Trap.c',0,0,0,0
	.byte	'IfxCpu_IntrinsicsTasking.h',0,1,0,0
	.byte	'IfxCpu.h',0,1,0,0,0
.L438:
	.byte	5,6,7,0,5,2
	.word	.L13
	.byte	3,169,1,1,4,2,5,5,9
	.half	.L226-.L13
	.byte	3,178,1,1,4,1,5,45,9
	.half	.L439-.L226
	.byte	3,154,126,1,5,21,9
	.half	.L231-.L439
	.byte	3,1,1,9
	.half	.L440-.L231
	.byte	3,1,1,4,3,5,19,9
	.half	.L233-.L440
	.byte	3,238,5,1,5,28,9
	.half	.L368-.L233
	.byte	3,1,1,4,1,5,15,9
	.half	.L234-.L368
	.byte	3,198,122,1,5,5,9
	.half	.L227-.L234
	.byte	3,1,1,9
	.half	.L370-.L227
	.byte	3,1,1,9
	.half	.L441-.L370
	.byte	3,1,1,9
	.half	.L442-.L441
	.byte	3,1,1,5,1,9
	.half	.L443-.L442
	.byte	3,1,1,7,9
	.half	.L72-.L443
	.byte	0,1,1
.L436:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_Trap_busError')
	.sect	'.debug_ranges'
.L71:
	.word	-1,.L13,0,.L72-.L13,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_Trap_assertion')
	.sect	'.debug_info'
.L73:
	.word	420
	.half	3
	.word	.L74
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap\\IfxCpu_Trap.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\Debug\\',0,12,1
	.word	.L76,.L75
	.byte	2
	.word	.L44
	.byte	3
	.byte	'IfxCpu_Trap_assertion',0,1,181,1,6,1,1,1
	.word	.L15,.L236,.L14
	.byte	4
	.byte	'tin',0,1,181,1,35
	.word	.L154,.L237
	.byte	5
	.word	.L15,.L236
	.byte	6
	.byte	'trapWatch',0,1,183,1,26
	.word	.L238,.L239
	.byte	7
	.word	.L158,.L240,.L241
	.byte	8
	.word	.L161,.L242
	.byte	8
	.word	.L163,.L243
	.byte	9
	.word	.L165,.L240,.L241
	.byte	6
	.byte	'trapInfo',0,1,117,17
	.word	.L166,.L244
	.byte	7
	.word	.L168,.L240,.L245
	.byte	9
	.word	.L170,.L240,.L245
	.byte	6
	.byte	'res',0,2,219,2,19
	.word	.L171,.L246
	.byte	0,0,7
	.word	.L173,.L247,.L248
	.byte	9
	.word	.L176,.L247,.L248
	.byte	6
	.byte	'reg',0,3,229,6,21
	.word	.L178,.L249
	.byte	0,0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_Trap_assertion')
	.sect	'.debug_abbrev'
.L74:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,17,1,18
	.byte	1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_Trap_assertion')
	.sect	'.debug_line'
.L75:
	.word	.L445-.L444
.L444:
	.half	3
	.word	.L447-.L446
.L446:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Cpu\\Std',0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap\\IfxCpu_Trap.c',0,0,0,0
	.byte	'IfxCpu_IntrinsicsTasking.h',0,1,0,0
	.byte	'IfxCpu.h',0,1,0,0,0
.L447:
	.byte	5,6,7,0,5,2
	.word	.L15
	.byte	3,180,1,1,4,2,5,5,9
	.half	.L240-.L15
	.byte	3,167,1,1,4,1,5,45,9
	.half	.L448-.L240
	.byte	3,154,126,1,5,21,9
	.half	.L245-.L448
	.byte	3,1,1,9
	.half	.L449-.L245
	.byte	3,1,1,4,3,5,19,9
	.half	.L247-.L449
	.byte	3,238,5,1,5,28,9
	.half	.L371-.L247
	.byte	3,1,1,4,1,5,15,9
	.half	.L248-.L371
	.byte	3,209,122,1,5,5,9
	.half	.L241-.L248
	.byte	3,1,1,9
	.half	.L373-.L241
	.byte	3,1,1,9
	.half	.L450-.L373
	.byte	3,1,1,9
	.half	.L451-.L450
	.byte	3,1,1,5,1,9
	.half	.L452-.L451
	.byte	3,1,1,7,9
	.half	.L77-.L452
	.byte	0,1,1
.L445:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_Trap_assertion')
	.sect	'.debug_ranges'
.L76:
	.word	-1,.L15,0,.L77-.L15,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_Trap_systemCall_Cpu0')
	.sect	'.debug_info'
.L78:
	.word	422
	.half	3
	.word	.L79
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap\\IfxCpu_Trap.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\Debug\\',0,12,1
	.word	.L81,.L80
	.byte	2
	.word	.L44
	.byte	3
	.byte	'IfxCpu_Trap_systemCall_Cpu0',0,1,192,1,6,1,1,1
	.word	.L17,.L250,.L16
	.byte	4
	.byte	'tin',0,1,192,1,41
	.word	.L154,.L251
	.byte	5
	.word	.L17,.L250
	.byte	6
	.byte	'trapWatch',0,1,194,1,26
	.word	.L252,.L253
	.byte	7
	.word	.L158,.L254,.L255
	.byte	8
	.word	.L161,.L256
	.byte	8
	.word	.L163,.L257
	.byte	9
	.word	.L165,.L258
	.byte	6
	.byte	'trapInfo',0,1,117,17
	.word	.L166,.L259
	.byte	7
	.word	.L168,.L254,.L260
	.byte	10
	.word	.L170,.L254,.L260
	.byte	6
	.byte	'res',0,2,219,2,19
	.word	.L171,.L261
	.byte	0,0,7
	.word	.L173,.L262,.L263
	.byte	10
	.word	.L176,.L262,.L263
	.byte	6
	.byte	'reg',0,3,229,6,21
	.word	.L178,.L264
	.byte	0,0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_Trap_systemCall_Cpu0')
	.sect	'.debug_abbrev'
.L79:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,85,6,0,0
	.byte	10,11,1,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_Trap_systemCall_Cpu0')
	.sect	'.debug_line'
.L80:
	.word	.L454-.L453
.L453:
	.half	3
	.word	.L456-.L455
.L455:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Cpu\\Std',0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap\\IfxCpu_Trap.c',0,0,0,0
	.byte	'IfxCpu_IntrinsicsTasking.h',0,1,0,0
	.byte	'IfxCpu.h',0,1,0,0,0
.L456:
	.byte	5,6,7,0,5,2
	.word	.L17
	.byte	3,191,1,1,4,2,5,5,9
	.half	.L254-.L17
	.byte	3,156,1,1,4,1,5,45,9
	.half	.L260-.L254
	.byte	3,154,126,1,4,3,5,19,9
	.half	.L262-.L260
	.byte	3,240,5,1,5,28,9
	.half	.L457-.L262
	.byte	3,1,1,4,1,5,15,9
	.half	.L263-.L457
	.byte	3,220,122,1,5,5,9
	.half	.L255-.L263
	.byte	3,1,1,9
	.half	.L376-.L255
	.byte	3,1,1,9
	.half	.L458-.L376
	.byte	3,1,1,5,1,9
	.half	.L459-.L458
	.byte	3,1,1,7,9
	.half	.L82-.L459
	.byte	0,1,1
.L454:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_Trap_systemCall_Cpu0')
	.sect	'.debug_ranges'
.L81:
	.word	-1,.L17,0,.L82-.L17,0,0
.L258:
	.word	-1,.L17,.L254-.L17,.L255-.L17,-1,.L19,0,.L152-.L19,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_Trap_systemCall_Cpu1')
	.sect	'.debug_info'
.L83:
	.word	426
	.half	3
	.word	.L84
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap\\IfxCpu_Trap.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\Debug\\',0,12,1
	.word	.L86,.L85
	.byte	2
	.word	.L44
	.byte	3
	.byte	'IfxCpu_Trap_systemCall_Cpu1',0,1,202,1,6,1,1,1
	.word	.L21,.L265,.L20
	.byte	4
	.byte	'tin',0,1,202,1,41
	.word	.L154,.L266
	.byte	5
	.word	.L21,.L265
	.byte	6
	.byte	'trapWatch',0,1,204,1,26
	.word	.L267,.L268
	.byte	7
	.word	.L158,.L269,.L270
	.byte	8
	.word	.L161,.L271
	.byte	8
	.word	.L163,.L272
	.byte	9
	.word	.L165,.L269,.L270
	.byte	6
	.byte	'trapInfo',0,1,117,17
	.word	.L166,.L273
	.byte	7
	.word	.L168,.L269,.L274
	.byte	9
	.word	.L170,.L269,.L274
	.byte	6
	.byte	'res',0,2,219,2,19
	.word	.L171,.L275
	.byte	0,0,7
	.word	.L173,.L276,.L277
	.byte	9
	.word	.L176,.L276,.L277
	.byte	6
	.byte	'reg',0,3,229,6,21
	.word	.L178,.L278
	.byte	0,0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_Trap_systemCall_Cpu1')
	.sect	'.debug_abbrev'
.L84:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,17,1,18
	.byte	1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_Trap_systemCall_Cpu1')
	.sect	'.debug_line'
.L85:
	.word	.L461-.L460
.L460:
	.half	3
	.word	.L463-.L462
.L462:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Cpu\\Std',0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap\\IfxCpu_Trap.c',0,0,0,0
	.byte	'IfxCpu_IntrinsicsTasking.h',0,1,0,0
	.byte	'IfxCpu.h',0,1,0,0,0
.L463:
	.byte	5,6,7,0,5,2
	.word	.L21
	.byte	3,201,1,1,4,2,5,5,9
	.half	.L269-.L21
	.byte	3,146,1,1,4,1,5,45,9
	.half	.L274-.L269
	.byte	3,154,126,1,4,3,5,19,9
	.half	.L276-.L274
	.byte	3,240,5,1,5,28,9
	.half	.L377-.L276
	.byte	3,1,1,4,1,5,15,9
	.half	.L277-.L377
	.byte	3,230,122,1,5,5,9
	.half	.L270-.L277
	.byte	3,1,1,9
	.half	.L379-.L270
	.byte	3,1,1,9
	.half	.L464-.L379
	.byte	3,1,1,5,1,9
	.half	.L465-.L464
	.byte	3,1,1,7,9
	.half	.L87-.L465
	.byte	0,1,1
.L461:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_Trap_systemCall_Cpu1')
	.sect	'.debug_ranges'
.L86:
	.word	-1,.L21,0,.L87-.L21,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_Trap_systemCall_Cpu2')
	.sect	'.debug_info'
.L88:
	.word	426
	.half	3
	.word	.L89
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap\\IfxCpu_Trap.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\Debug\\',0,12,1
	.word	.L91,.L90
	.byte	2
	.word	.L44
	.byte	3
	.byte	'IfxCpu_Trap_systemCall_Cpu2',0,1,213,1,6,1,1,1
	.word	.L23,.L279,.L22
	.byte	4
	.byte	'tin',0,1,213,1,41
	.word	.L154,.L280
	.byte	5
	.word	.L23,.L279
	.byte	6
	.byte	'trapWatch',0,1,215,1,26
	.word	.L281,.L282
	.byte	7
	.word	.L158,.L283,.L284
	.byte	8
	.word	.L161,.L285
	.byte	8
	.word	.L163,.L286
	.byte	9
	.word	.L165,.L283,.L284
	.byte	6
	.byte	'trapInfo',0,1,117,17
	.word	.L166,.L287
	.byte	7
	.word	.L168,.L283,.L288
	.byte	9
	.word	.L170,.L283,.L288
	.byte	6
	.byte	'res',0,2,219,2,19
	.word	.L171,.L289
	.byte	0,0,7
	.word	.L173,.L290,.L291
	.byte	9
	.word	.L176,.L290,.L291
	.byte	6
	.byte	'reg',0,3,229,6,21
	.word	.L178,.L292
	.byte	0,0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_Trap_systemCall_Cpu2')
	.sect	'.debug_abbrev'
.L89:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,17,1,18
	.byte	1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_Trap_systemCall_Cpu2')
	.sect	'.debug_line'
.L90:
	.word	.L467-.L466
.L466:
	.half	3
	.word	.L469-.L468
.L468:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Cpu\\Std',0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap\\IfxCpu_Trap.c',0,0,0,0
	.byte	'IfxCpu_IntrinsicsTasking.h',0,1,0,0
	.byte	'IfxCpu.h',0,1,0,0,0
.L469:
	.byte	5,6,7,0,5,2
	.word	.L23
	.byte	3,212,1,1,4,2,5,5,9
	.half	.L283-.L23
	.byte	3,135,1,1,4,1,5,45,9
	.half	.L288-.L283
	.byte	3,154,126,1,4,3,5,19,9
	.half	.L290-.L288
	.byte	3,240,5,1,5,28,9
	.half	.L380-.L290
	.byte	3,1,1,4,1,5,15,9
	.half	.L291-.L380
	.byte	3,241,122,1,5,5,9
	.half	.L284-.L291
	.byte	3,1,1,9
	.half	.L382-.L284
	.byte	3,1,1,9
	.half	.L470-.L382
	.byte	3,1,1,5,1,9
	.half	.L471-.L470
	.byte	3,1,1,7,9
	.half	.L92-.L471
	.byte	0,1,1
.L467:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_Trap_systemCall_Cpu2')
	.sect	'.debug_ranges'
.L91:
	.word	-1,.L23,0,.L92-.L23,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_Trap_systemCall_Cpu3')
	.sect	'.debug_info'
.L93:
	.word	426
	.half	3
	.word	.L94
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap\\IfxCpu_Trap.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\Debug\\',0,12,1
	.word	.L96,.L95
	.byte	2
	.word	.L44
	.byte	3
	.byte	'IfxCpu_Trap_systemCall_Cpu3',0,1,224,1,6,1,1,1
	.word	.L25,.L293,.L24
	.byte	4
	.byte	'tin',0,1,224,1,41
	.word	.L154,.L294
	.byte	5
	.word	.L25,.L293
	.byte	6
	.byte	'trapWatch',0,1,226,1,26
	.word	.L295,.L296
	.byte	7
	.word	.L158,.L297,.L298
	.byte	8
	.word	.L161,.L299
	.byte	8
	.word	.L163,.L300
	.byte	9
	.word	.L165,.L297,.L298
	.byte	6
	.byte	'trapInfo',0,1,117,17
	.word	.L166,.L301
	.byte	7
	.word	.L168,.L297,.L302
	.byte	9
	.word	.L170,.L297,.L302
	.byte	6
	.byte	'res',0,2,219,2,19
	.word	.L171,.L303
	.byte	0,0,7
	.word	.L173,.L304,.L305
	.byte	9
	.word	.L176,.L304,.L305
	.byte	6
	.byte	'reg',0,3,229,6,21
	.word	.L178,.L306
	.byte	0,0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_Trap_systemCall_Cpu3')
	.sect	'.debug_abbrev'
.L94:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,17,1,18
	.byte	1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_Trap_systemCall_Cpu3')
	.sect	'.debug_line'
.L95:
	.word	.L473-.L472
.L472:
	.half	3
	.word	.L475-.L474
.L474:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Cpu\\Std',0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap\\IfxCpu_Trap.c',0,0,0,0
	.byte	'IfxCpu_IntrinsicsTasking.h',0,1,0,0
	.byte	'IfxCpu.h',0,1,0,0,0
.L475:
	.byte	5,6,7,0,5,2
	.word	.L25
	.byte	3,223,1,1,4,2,5,5,9
	.half	.L297-.L25
	.byte	3,252,0,1,4,1,5,45,9
	.half	.L302-.L297
	.byte	3,154,126,1,4,3,5,19,9
	.half	.L304-.L302
	.byte	3,240,5,1,5,28,9
	.half	.L383-.L304
	.byte	3,1,1,4,1,5,15,9
	.half	.L305-.L383
	.byte	3,252,122,1,5,5,9
	.half	.L298-.L305
	.byte	3,1,1,9
	.half	.L385-.L298
	.byte	3,1,1,9
	.half	.L476-.L385
	.byte	3,1,1,5,1,9
	.half	.L477-.L476
	.byte	3,1,1,7,9
	.half	.L97-.L477
	.byte	0,1,1
.L473:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_Trap_systemCall_Cpu3')
	.sect	'.debug_ranges'
.L96:
	.word	-1,.L25,0,.L97-.L25,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_Trap_systemCall_Cpu4')
	.sect	'.debug_info'
.L98:
	.word	426
	.half	3
	.word	.L99
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap\\IfxCpu_Trap.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\Debug\\',0,12,1
	.word	.L101,.L100
	.byte	2
	.word	.L44
	.byte	3
	.byte	'IfxCpu_Trap_systemCall_Cpu4',0,1,235,1,6,1,1,1
	.word	.L27,.L307,.L26
	.byte	4
	.byte	'tin',0,1,235,1,41
	.word	.L154,.L308
	.byte	5
	.word	.L27,.L307
	.byte	6
	.byte	'trapWatch',0,1,237,1,26
	.word	.L309,.L310
	.byte	7
	.word	.L158,.L311,.L312
	.byte	8
	.word	.L161,.L313
	.byte	8
	.word	.L163,.L314
	.byte	9
	.word	.L165,.L311,.L312
	.byte	6
	.byte	'trapInfo',0,1,117,17
	.word	.L166,.L315
	.byte	7
	.word	.L168,.L311,.L316
	.byte	9
	.word	.L170,.L311,.L316
	.byte	6
	.byte	'res',0,2,219,2,19
	.word	.L171,.L317
	.byte	0,0,7
	.word	.L173,.L318,.L319
	.byte	9
	.word	.L176,.L318,.L319
	.byte	6
	.byte	'reg',0,3,229,6,21
	.word	.L178,.L320
	.byte	0,0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_Trap_systemCall_Cpu4')
	.sect	'.debug_abbrev'
.L99:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,17,1,18
	.byte	1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_Trap_systemCall_Cpu4')
	.sect	'.debug_line'
.L100:
	.word	.L479-.L478
.L478:
	.half	3
	.word	.L481-.L480
.L480:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Cpu\\Std',0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap\\IfxCpu_Trap.c',0,0,0,0
	.byte	'IfxCpu_IntrinsicsTasking.h',0,1,0,0
	.byte	'IfxCpu.h',0,1,0,0,0
.L481:
	.byte	5,6,7,0,5,2
	.word	.L27
	.byte	3,234,1,1,4,2,5,5,9
	.half	.L311-.L27
	.byte	3,241,0,1,4,1,5,45,9
	.half	.L316-.L311
	.byte	3,154,126,1,4,3,5,19,9
	.half	.L318-.L316
	.byte	3,240,5,1,5,28,9
	.half	.L386-.L318
	.byte	3,1,1,4,1,5,15,9
	.half	.L319-.L386
	.byte	3,135,123,1,5,5,9
	.half	.L312-.L319
	.byte	3,1,1,9
	.half	.L388-.L312
	.byte	3,1,1,9
	.half	.L482-.L388
	.byte	3,1,1,5,1,9
	.half	.L483-.L482
	.byte	3,1,1,7,9
	.half	.L102-.L483
	.byte	0,1,1
.L479:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_Trap_systemCall_Cpu4')
	.sect	'.debug_ranges'
.L101:
	.word	-1,.L27,0,.L102-.L27,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_Trap_systemCall_Cpu5')
	.sect	'.debug_info'
.L103:
	.word	426
	.half	3
	.word	.L104
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap\\IfxCpu_Trap.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\Debug\\',0,12,1
	.word	.L106,.L105
	.byte	2
	.word	.L44
	.byte	3
	.byte	'IfxCpu_Trap_systemCall_Cpu5',0,1,246,1,6,1,1,1
	.word	.L29,.L321,.L28
	.byte	4
	.byte	'tin',0,1,246,1,41
	.word	.L154,.L322
	.byte	5
	.word	.L29,.L321
	.byte	6
	.byte	'trapWatch',0,1,248,1,26
	.word	.L323,.L324
	.byte	7
	.word	.L158,.L325,.L326
	.byte	8
	.word	.L161,.L327
	.byte	8
	.word	.L163,.L328
	.byte	9
	.word	.L165,.L325,.L326
	.byte	6
	.byte	'trapInfo',0,1,117,17
	.word	.L166,.L329
	.byte	7
	.word	.L168,.L325,.L330
	.byte	9
	.word	.L170,.L325,.L330
	.byte	6
	.byte	'res',0,2,219,2,19
	.word	.L171,.L331
	.byte	0,0,7
	.word	.L173,.L332,.L333
	.byte	9
	.word	.L176,.L332,.L333
	.byte	6
	.byte	'reg',0,3,229,6,21
	.word	.L178,.L334
	.byte	0,0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_Trap_systemCall_Cpu5')
	.sect	'.debug_abbrev'
.L104:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,17,1,18
	.byte	1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_Trap_systemCall_Cpu5')
	.sect	'.debug_line'
.L105:
	.word	.L485-.L484
.L484:
	.half	3
	.word	.L487-.L486
.L486:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Cpu\\Std',0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap\\IfxCpu_Trap.c',0,0,0,0
	.byte	'IfxCpu_IntrinsicsTasking.h',0,1,0,0
	.byte	'IfxCpu.h',0,1,0,0,0
.L487:
	.byte	5,6,7,0,5,2
	.word	.L29
	.byte	3,245,1,1,4,2,5,5,9
	.half	.L325-.L29
	.byte	3,230,0,1,4,1,5,45,9
	.half	.L330-.L325
	.byte	3,154,126,1,4,3,5,19,9
	.half	.L332-.L330
	.byte	3,240,5,1,5,28,9
	.half	.L389-.L332
	.byte	3,1,1,4,1,5,15,9
	.half	.L333-.L389
	.byte	3,146,123,1,5,5,9
	.half	.L326-.L333
	.byte	3,1,1,9
	.half	.L391-.L326
	.byte	3,1,1,9
	.half	.L488-.L391
	.byte	3,1,1,5,1,9
	.half	.L489-.L488
	.byte	3,1,1,7,9
	.half	.L107-.L489
	.byte	0,1,1
.L485:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_Trap_systemCall_Cpu5')
	.sect	'.debug_ranges'
.L106:
	.word	-1,.L29,0,.L107-.L29,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_Trap_nonMaskableInterrupt')
	.sect	'.debug_info'
.L108:
	.word	431
	.half	3
	.word	.L109
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap\\IfxCpu_Trap.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\Debug\\',0,12,1
	.word	.L111,.L110
	.byte	2
	.word	.L44
	.byte	3
	.byte	'IfxCpu_Trap_nonMaskableInterrupt',0,1,128,2,6,1,1,1
	.word	.L31,.L335,.L30
	.byte	4
	.byte	'tin',0,1,128,2,46
	.word	.L154,.L336
	.byte	5
	.word	.L31,.L335
	.byte	6
	.byte	'trapWatch',0,1,130,2,26
	.word	.L337,.L338
	.byte	7
	.word	.L158,.L339,.L340
	.byte	8
	.word	.L161,.L341
	.byte	8
	.word	.L163,.L342
	.byte	9
	.word	.L165,.L339,.L340
	.byte	6
	.byte	'trapInfo',0,1,117,17
	.word	.L166,.L343
	.byte	7
	.word	.L168,.L339,.L344
	.byte	9
	.word	.L170,.L339,.L344
	.byte	6
	.byte	'res',0,2,219,2,19
	.word	.L171,.L345
	.byte	0,0,7
	.word	.L173,.L346,.L347
	.byte	9
	.word	.L176,.L346,.L347
	.byte	6
	.byte	'reg',0,3,229,6,21
	.word	.L178,.L348
	.byte	0,0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_Trap_nonMaskableInterrupt')
	.sect	'.debug_abbrev'
.L109:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,17,1,18
	.byte	1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_Trap_nonMaskableInterrupt')
	.sect	'.debug_line'
.L110:
	.word	.L491-.L490
.L490:
	.half	3
	.word	.L493-.L492
.L492:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Cpu\\Std',0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap\\IfxCpu_Trap.c',0,0,0,0
	.byte	'IfxCpu_IntrinsicsTasking.h',0,1,0,0
	.byte	'IfxCpu.h',0,1,0,0,0
.L493:
	.byte	5,6,7,0,5,2
	.word	.L31
	.byte	3,255,1,1,4,2,5,5,9
	.half	.L339-.L31
	.byte	3,220,0,1,4,1,5,45,9
	.half	.L494-.L339
	.byte	3,154,126,1,5,21,9
	.half	.L344-.L494
	.byte	3,1,1,9
	.half	.L495-.L344
	.byte	3,1,1,4,3,5,19,9
	.half	.L346-.L495
	.byte	3,238,5,1,5,28,9
	.half	.L392-.L346
	.byte	3,1,1,4,1,5,15,9
	.half	.L347-.L392
	.byte	3,156,123,1,5,5,9
	.half	.L340-.L347
	.byte	3,1,1,9
	.half	.L394-.L340
	.byte	3,1,1,9
	.half	.L496-.L394
	.byte	3,1,1,5,1,9
	.half	.L497-.L496
	.byte	3,1,1,7,9
	.half	.L112-.L497
	.byte	0,1,1
.L491:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_Trap_nonMaskableInterrupt')
	.sect	'.debug_ranges'
.L111:
	.word	-1,.L31,0,.L112-.L31,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_Trap_vectorTable0')
	.sect	'.debug_info'
.L113:
	.word	225
	.half	3
	.word	.L114
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap\\IfxCpu_Trap.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\Debug\\',0,12,1
	.word	.L116,.L115
	.byte	2
	.word	.L44
	.byte	3
	.byte	'IfxCpu_Trap_vectorTable0',0,1,155,2,6,1,1,1
	.word	.L33,.L349,.L32
	.byte	4
	.word	.L33,.L349
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_Trap_vectorTable0')
	.sect	'.debug_abbrev'
.L114:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_Trap_vectorTable0')
	.sect	'.debug_line'
.L115:
	.word	.L499-.L498
.L498:
	.half	3
	.word	.L501-.L500
.L500:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap\\IfxCpu_Trap.c',0,0,0,0,0
.L501:
	.byte	5,5,7,0,5,2
	.word	.L33
	.byte	3,156,2,1,9
	.half	.L502-.L33
	.byte	3,1,1,9
	.half	.L503-.L502
	.byte	3,1,1,9
	.half	.L504-.L503
	.byte	3,1,1,9
	.half	.L505-.L504
	.byte	3,1,1,9
	.half	.L506-.L505
	.byte	3,1,1,9
	.half	.L507-.L506
	.byte	3,1,1,9
	.half	.L508-.L507
	.byte	3,1,1,5,1,9
	.half	.L509-.L508
	.byte	3,1,1,7,9
	.half	.L117-.L509
	.byte	0,1,1
.L499:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_Trap_vectorTable0')
	.sect	'.debug_ranges'
.L116:
	.word	-1,.L33,0,.L117-.L33,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_Trap_vectorTable1')
	.sect	'.debug_info'
.L118:
	.word	225
	.half	3
	.word	.L119
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap\\IfxCpu_Trap.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\Debug\\',0,12,1
	.word	.L121,.L120
	.byte	2
	.word	.L44
	.byte	3
	.byte	'IfxCpu_Trap_vectorTable1',0,1,184,2,6,1,1,1
	.word	.L35,.L350,.L34
	.byte	4
	.word	.L35,.L350
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_Trap_vectorTable1')
	.sect	'.debug_abbrev'
.L119:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_Trap_vectorTable1')
	.sect	'.debug_line'
.L120:
	.word	.L511-.L510
.L510:
	.half	3
	.word	.L513-.L512
.L512:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap\\IfxCpu_Trap.c',0,0,0,0,0
.L513:
	.byte	5,5,7,0,5,2
	.word	.L35
	.byte	3,185,2,1,9
	.half	.L514-.L35
	.byte	3,1,1,9
	.half	.L515-.L514
	.byte	3,1,1,9
	.half	.L516-.L515
	.byte	3,1,1,9
	.half	.L517-.L516
	.byte	3,1,1,9
	.half	.L518-.L517
	.byte	3,1,1,9
	.half	.L519-.L518
	.byte	3,1,1,9
	.half	.L520-.L519
	.byte	3,1,1,5,1,9
	.half	.L521-.L520
	.byte	3,1,1,7,9
	.half	.L122-.L521
	.byte	0,1,1
.L511:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_Trap_vectorTable1')
	.sect	'.debug_ranges'
.L121:
	.word	-1,.L35,0,.L122-.L35,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_Trap_vectorTable2')
	.sect	'.debug_info'
.L123:
	.word	225
	.half	3
	.word	.L124
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap\\IfxCpu_Trap.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\Debug\\',0,12,1
	.word	.L126,.L125
	.byte	2
	.word	.L44
	.byte	3
	.byte	'IfxCpu_Trap_vectorTable2',0,1,216,2,6,1,1,1
	.word	.L37,.L351,.L36
	.byte	4
	.word	.L37,.L351
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_Trap_vectorTable2')
	.sect	'.debug_abbrev'
.L124:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_Trap_vectorTable2')
	.sect	'.debug_line'
.L125:
	.word	.L523-.L522
.L522:
	.half	3
	.word	.L525-.L524
.L524:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap\\IfxCpu_Trap.c',0,0,0,0,0
.L525:
	.byte	5,5,7,0,5,2
	.word	.L37
	.byte	3,217,2,1,9
	.half	.L526-.L37
	.byte	3,1,1,9
	.half	.L527-.L526
	.byte	3,1,1,9
	.half	.L528-.L527
	.byte	3,1,1,9
	.half	.L529-.L528
	.byte	3,1,1,9
	.half	.L530-.L529
	.byte	3,1,1,9
	.half	.L531-.L530
	.byte	3,1,1,9
	.half	.L532-.L531
	.byte	3,1,1,5,1,9
	.half	.L533-.L532
	.byte	3,1,1,7,9
	.half	.L127-.L533
	.byte	0,1,1
.L523:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_Trap_vectorTable2')
	.sect	'.debug_ranges'
.L126:
	.word	-1,.L37,0,.L127-.L37,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_Trap_vectorTable3')
	.sect	'.debug_info'
.L128:
	.word	225
	.half	3
	.word	.L129
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap\\IfxCpu_Trap.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\Debug\\',0,12,1
	.word	.L131,.L130
	.byte	2
	.word	.L44
	.byte	3
	.byte	'IfxCpu_Trap_vectorTable3',0,1,249,2,6,1,1,1
	.word	.L39,.L352,.L38
	.byte	4
	.word	.L39,.L352
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_Trap_vectorTable3')
	.sect	'.debug_abbrev'
.L129:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_Trap_vectorTable3')
	.sect	'.debug_line'
.L130:
	.word	.L535-.L534
.L534:
	.half	3
	.word	.L537-.L536
.L536:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap\\IfxCpu_Trap.c',0,0,0,0,0
.L537:
	.byte	5,5,7,0,5,2
	.word	.L39
	.byte	3,250,2,1,9
	.half	.L538-.L39
	.byte	3,1,1,9
	.half	.L539-.L538
	.byte	3,1,1,9
	.half	.L540-.L539
	.byte	3,1,1,9
	.half	.L541-.L540
	.byte	3,1,1,9
	.half	.L542-.L541
	.byte	3,1,1,9
	.half	.L543-.L542
	.byte	3,1,1,9
	.half	.L544-.L543
	.byte	3,1,1,5,1,9
	.half	.L545-.L544
	.byte	3,1,1,7,9
	.half	.L132-.L545
	.byte	0,1,1
.L535:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_Trap_vectorTable3')
	.sect	'.debug_ranges'
.L131:
	.word	-1,.L39,0,.L132-.L39,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_Trap_vectorTable4')
	.sect	'.debug_info'
.L133:
	.word	225
	.half	3
	.word	.L134
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap\\IfxCpu_Trap.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\Debug\\',0,12,1
	.word	.L136,.L135
	.byte	2
	.word	.L44
	.byte	3
	.byte	'IfxCpu_Trap_vectorTable4',0,1,153,3,6,1,1,1
	.word	.L41,.L353,.L40
	.byte	4
	.word	.L41,.L353
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_Trap_vectorTable4')
	.sect	'.debug_abbrev'
.L134:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_Trap_vectorTable4')
	.sect	'.debug_line'
.L135:
	.word	.L547-.L546
.L546:
	.half	3
	.word	.L549-.L548
.L548:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap\\IfxCpu_Trap.c',0,0,0,0,0
.L549:
	.byte	5,5,7,0,5,2
	.word	.L41
	.byte	3,154,3,1,9
	.half	.L550-.L41
	.byte	3,1,1,9
	.half	.L551-.L550
	.byte	3,1,1,9
	.half	.L552-.L551
	.byte	3,1,1,9
	.half	.L553-.L552
	.byte	3,1,1,9
	.half	.L554-.L553
	.byte	3,1,1,9
	.half	.L555-.L554
	.byte	3,1,1,9
	.half	.L556-.L555
	.byte	3,1,1,5,1,9
	.half	.L557-.L556
	.byte	3,1,1,7,9
	.half	.L137-.L557
	.byte	0,1,1
.L547:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_Trap_vectorTable4')
	.sect	'.debug_ranges'
.L136:
	.word	-1,.L41,0,.L137-.L41,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_Trap_vectorTable5')
	.sect	'.debug_info'
.L138:
	.word	225
	.half	3
	.word	.L139
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap\\IfxCpu_Trap.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\Debug\\',0,12,1
	.word	.L141,.L140
	.byte	2
	.word	.L44
	.byte	3
	.byte	'IfxCpu_Trap_vectorTable5',0,1,185,3,6,1,1,1
	.word	.L43,.L354,.L42
	.byte	4
	.word	.L43,.L354
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_Trap_vectorTable5')
	.sect	'.debug_abbrev'
.L139:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_Trap_vectorTable5')
	.sect	'.debug_line'
.L140:
	.word	.L559-.L558
.L558:
	.half	3
	.word	.L561-.L560
.L560:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap\\IfxCpu_Trap.c',0,0,0,0,0
.L561:
	.byte	5,5,7,0,5,2
	.word	.L43
	.byte	3,186,3,1,9
	.half	.L562-.L43
	.byte	3,1,1,9
	.half	.L563-.L562
	.byte	3,1,1,9
	.half	.L564-.L563
	.byte	3,1,1,9
	.half	.L565-.L564
	.byte	3,1,1,9
	.half	.L566-.L565
	.byte	3,1,1,9
	.half	.L567-.L566
	.byte	3,1,1,9
	.half	.L568-.L567
	.byte	3,1,1,5,1,9
	.half	.L569-.L568
	.byte	3,1,1,7,9
	.half	.L142-.L569
	.byte	0,1,1
.L559:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_Trap_vectorTable5')
	.sect	'.debug_ranges'
.L141:
	.word	-1,.L43,0,.L142-.L43,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_2')
	.sect	'.debug_info'
.L143:
	.word	198
	.half	3
	.word	.L144
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap\\IfxCpu_Trap.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\Debug\\',0,12,1
	.word	.L146,.L145
	.byte	2
	.word	.L44
	.byte	3
	.byte	'.cocofun_2',0,1,126,6,1
	.word	.L5,.L147,.L4
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_2')
	.sect	'.debug_abbrev'
.L144:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_2')
	.sect	'.debug_line'
.L145:
	.word	.L571-.L570
.L570:
	.half	3
	.word	.L573-.L572
.L572:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\0_Src\\4_McHal\\Tricore\\Cpu\\Std',0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap\\IfxCpu_Trap.c',0,0,0,0
	.byte	'IfxCpu.h',0,1,0,0,0
.L573:
	.byte	5,13,7,0,5,2
	.word	.L5
	.byte	3,248,0,1,4,2,5,28,9
	.half	.L574-.L5
	.byte	3,238,5,1,4,1,5,21,9
	.half	.L357-.L574
	.byte	3,146,122,1,9
	.half	.L147-.L357
	.byte	0,1,1,5,13,0,5,2
	.word	.L5
	.byte	3,248,0,1,4,2,5,28,9
	.half	.L574-.L5
	.byte	3,238,5,1,4,1,5,21,9
	.half	.L357-.L574
	.byte	3,146,122,1,9
	.half	.L147-.L357
	.byte	0,1,1,5,13,0,5,2
	.word	.L5
	.byte	3,248,0,1,4,2,5,28,9
	.half	.L574-.L5
	.byte	3,238,5,1,4,1,5,21,9
	.half	.L357-.L574
	.byte	3,146,122,1,9
	.half	.L147-.L357
	.byte	0,1,1,5,13,0,5,2
	.word	.L5
	.byte	3,248,0,1,4,2,5,28,9
	.half	.L574-.L5
	.byte	3,238,5,1,4,1,5,21,9
	.half	.L357-.L574
	.byte	3,146,122,1,9
	.half	.L147-.L357
	.byte	0,1,1,5,13,0,5,2
	.word	.L5
	.byte	3,248,0,1,4,2,5,28,9
	.half	.L574-.L5
	.byte	3,238,5,1,4,1,5,21,9
	.half	.L357-.L574
	.byte	3,146,122,1,9
	.half	.L147-.L357
	.byte	0,1,1,5,13,0,5,2
	.word	.L5
	.byte	3,248,0,1,4,2,5,28,9
	.half	.L574-.L5
	.byte	3,238,5,1,4,1,5,21,9
	.half	.L357-.L574
	.byte	3,146,122,1,9
	.half	.L147-.L357
	.byte	0,1,1,5,13,0,5,2
	.word	.L5
	.byte	3,248,0,1,4,2,5,28,9
	.half	.L574-.L5
	.byte	3,238,5,1,4,1,5,21,9
	.half	.L357-.L574
	.byte	3,146,122,1,9
	.half	.L147-.L357
	.byte	0,1,1,5,13,0,5,2
	.word	.L5
	.byte	3,248,0,1,4,2,5,28,9
	.half	.L574-.L5
	.byte	3,238,5,1,4,1,5,21,9
	.half	.L357-.L574
	.byte	3,146,122,1,9
	.half	.L147-.L357
	.byte	0,1,1,5,13,0,5,2
	.word	.L5
	.byte	3,248,0,1,4,2,5,28,9
	.half	.L574-.L5
	.byte	3,238,5,1,4,1,5,21,9
	.half	.L357-.L574
	.byte	3,146,122,1,9
	.half	.L147-.L357
	.byte	0,1,1,5,13,0,5,2
	.word	.L5
	.byte	3,248,0,1,4,2,5,28,9
	.half	.L574-.L5
	.byte	3,238,5,1,4,1,5,21,9
	.half	.L357-.L574
	.byte	3,146,122,1,9
	.half	.L147-.L357
	.byte	0,1,1,5,13,0,5,2
	.word	.L5
	.byte	3,248,0,1,4,2,5,28,9
	.half	.L574-.L5
	.byte	3,238,5,1,4,1,5,21,9
	.half	.L357-.L574
	.byte	3,146,122,1,9
	.half	.L147-.L357
	.byte	0,1,1,5,13,0,5,2
	.word	.L5
	.byte	3,248,0,1,4,2,5,28,9
	.half	.L574-.L5
	.byte	3,238,5,1,4,1,5,21,9
	.half	.L357-.L574
	.byte	3,146,122,1,9
	.half	.L147-.L357
	.byte	0,1,1,5,13,0,5,2
	.word	.L5
	.byte	3,248,0,1,4,2,5,28,9
	.half	.L574-.L5
	.byte	3,238,5,1,4,1,5,21,9
	.half	.L357-.L574
	.byte	3,146,122,1,9
	.half	.L147-.L357
	.byte	0,1,1
.L571:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_2')
	.sect	'.debug_ranges'
.L146:
	.word	-1,.L5,0,.L147-.L5,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_3')
	.sect	'.debug_info'
.L148:
	.word	199
	.half	3
	.word	.L149
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap\\IfxCpu_Trap.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_UART_Logging\\Debug\\',0,12,1
	.word	.L151,.L150
	.byte	2
	.word	.L44
	.byte	3
	.byte	'.cocofun_3',0,1,192,1,6,1
	.word	.L19,.L152,.L18
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_3')
	.sect	'.debug_abbrev'
.L149:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_3')
	.sect	'.debug_line'
.L150:
	.word	.L576-.L575
.L575:
	.half	3
	.word	.L578-.L577
.L577:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap\\IfxCpu_Trap.c',0,0,0,0,0
.L578:
	.byte	5,21,7,0,5,2
	.word	.L19
	.byte	3,246,0,1,5,45,3,127,1,5,21,9
	.half	.L375-.L19
	.byte	3,2,1,9
	.half	.L152-.L375
	.byte	0,1,1,5,21,0,5,2
	.word	.L19
	.byte	3,246,0,1,5,45,3,127,1,5,21,9
	.half	.L375-.L19
	.byte	3,2,1,9
	.half	.L152-.L375
	.byte	0,1,1,5,21,0,5,2
	.word	.L19
	.byte	3,246,0,1,5,45,3,127,1,5,21,9
	.half	.L375-.L19
	.byte	3,2,1,9
	.half	.L152-.L375
	.byte	0,1,1,5,21,0,5,2
	.word	.L19
	.byte	3,246,0,1,5,45,3,127,1,5,21,9
	.half	.L375-.L19
	.byte	3,2,1,9
	.half	.L152-.L375
	.byte	0,1,1,5,21,0,5,2
	.word	.L19
	.byte	3,246,0,1,5,45,3,127,1,5,21,9
	.half	.L375-.L19
	.byte	3,2,1,9
	.half	.L152-.L375
	.byte	0,1,1,5,21,0,5,2
	.word	.L19
	.byte	3,246,0,1,5,45,3,127,1,5,21,9
	.half	.L375-.L19
	.byte	3,2,1,9
	.half	.L152-.L375
	.byte	0,1,1
.L576:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_3')
	.sect	'.debug_ranges'
.L151:
	.word	-1,.L19,0,.L152-.L19,0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_2')
	.sect	'.debug_loc'
.L4:
	.word	-1,.L5,0,.L147-.L5
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_3')
	.sect	'.debug_loc'
.L18:
	.word	-1,.L19,0,.L152-.L19
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_Trap_assertion')
	.sect	'.debug_loc'
.L14:
	.word	-1,.L15,0,.L240-.L15
	.half	2
	.byte	138,0
	.word	.L240-.L15,.L236-.L15
	.half	2
	.byte	138,8
	.word	.L236-.L15,.L236-.L15
	.half	2
	.byte	138,0
	.word	0,0
.L249:
	.word	-1,.L15,.L371-.L15,.L248-.L15
	.half	1
	.byte	95
	.word	.L5-.L15,.L357-.L15
	.half	1
	.byte	95
	.word	0,0
.L246:
	.word	-1,.L15,.L5-.L15,.L147-.L15
	.half	1
	.byte	111
	.word	.L372-.L15,.L236-.L15
	.half	1
	.byte	111
	.word	0,0
.L243:
	.word	0,0
.L237:
	.word	-1,.L15,.L5-.L15,.L147-.L15
	.half	1
	.byte	84
	.word	0,.L236-.L15
	.half	1
	.byte	84
	.word	0,0
.L242:
	.word	0,0
.L244:
	.word	-1,.L15,.L5-.L15,.L147-.L15
	.half	2
	.byte	144,32
	.word	.L245-.L15,.L373-.L15
	.half	2
	.byte	144,32
	.word	0,0
.L239:
	.word	-1,.L15,.L5-.L15,.L147-.L15
	.half	2
	.byte	145,120
	.word	0,.L236-.L15
	.half	2
	.byte	145,120
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_Trap_busError')
	.sect	'.debug_loc'
.L12:
	.word	-1,.L13,0,.L226-.L13
	.half	2
	.byte	138,0
	.word	.L226-.L13,.L222-.L13
	.half	2
	.byte	138,8
	.word	.L222-.L13,.L222-.L13
	.half	2
	.byte	138,0
	.word	0,0
.L235:
	.word	-1,.L13,.L368-.L13,.L234-.L13
	.half	1
	.byte	95
	.word	.L5-.L13,.L357-.L13
	.half	1
	.byte	95
	.word	0,0
.L232:
	.word	-1,.L13,.L5-.L13,.L147-.L13
	.half	1
	.byte	111
	.word	.L369-.L13,.L222-.L13
	.half	1
	.byte	111
	.word	0,0
.L229:
	.word	0,0
.L223:
	.word	-1,.L13,.L5-.L13,.L147-.L13
	.half	1
	.byte	84
	.word	0,.L222-.L13
	.half	1
	.byte	84
	.word	0,0
.L228:
	.word	0,0
.L230:
	.word	-1,.L13,.L5-.L13,.L147-.L13
	.half	2
	.byte	144,32
	.word	.L231-.L13,.L370-.L13
	.half	2
	.byte	144,32
	.word	0,0
.L225:
	.word	-1,.L13,.L5-.L13,.L147-.L13
	.half	2
	.byte	145,120
	.word	0,.L222-.L13
	.half	2
	.byte	145,120
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_Trap_contextManagementError')
	.sect	'.debug_loc'
.L10:
	.word	-1,.L11,0,.L212-.L11
	.half	2
	.byte	138,0
	.word	.L212-.L11,.L208-.L11
	.half	2
	.byte	138,8
	.word	.L208-.L11,.L208-.L11
	.half	2
	.byte	138,0
	.word	0,0
.L221:
	.word	-1,.L11,.L365-.L11,.L220-.L11
	.half	1
	.byte	95
	.word	.L5-.L11,.L357-.L11
	.half	1
	.byte	95
	.word	0,0
.L218:
	.word	-1,.L11,.L5-.L11,.L147-.L11
	.half	1
	.byte	111
	.word	.L366-.L11,.L208-.L11
	.half	1
	.byte	111
	.word	0,0
.L215:
	.word	0,0
.L209:
	.word	-1,.L11,.L5-.L11,.L147-.L11
	.half	1
	.byte	84
	.word	0,.L208-.L11
	.half	1
	.byte	84
	.word	0,0
.L214:
	.word	0,0
.L216:
	.word	-1,.L11,.L5-.L11,.L147-.L11
	.half	2
	.byte	144,32
	.word	.L217-.L11,.L367-.L11
	.half	2
	.byte	144,32
	.word	0,0
.L211:
	.word	-1,.L11,.L5-.L11,.L147-.L11
	.half	2
	.byte	145,120
	.word	0,.L208-.L11
	.half	2
	.byte	145,120
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_Trap_instructionError')
	.sect	'.debug_loc'
.L8:
	.word	-1,.L9,0,.L198-.L9
	.half	2
	.byte	138,0
	.word	.L198-.L9,.L194-.L9
	.half	2
	.byte	138,8
	.word	.L194-.L9,.L194-.L9
	.half	2
	.byte	138,0
	.word	0,0
.L207:
	.word	-1,.L9,.L362-.L9,.L206-.L9
	.half	1
	.byte	95
	.word	.L5-.L9,.L357-.L9
	.half	1
	.byte	95
	.word	0,0
.L204:
	.word	-1,.L9,.L5-.L9,.L147-.L9
	.half	1
	.byte	111
	.word	.L363-.L9,.L194-.L9
	.half	1
	.byte	111
	.word	0,0
.L201:
	.word	0,0
.L195:
	.word	-1,.L9,.L5-.L9,.L147-.L9
	.half	1
	.byte	84
	.word	0,.L194-.L9
	.half	1
	.byte	84
	.word	0,0
.L200:
	.word	0,0
.L202:
	.word	-1,.L9,.L5-.L9,.L147-.L9
	.half	2
	.byte	144,32
	.word	.L203-.L9,.L364-.L9
	.half	2
	.byte	144,32
	.word	0,0
.L197:
	.word	-1,.L9,.L5-.L9,.L147-.L9
	.half	2
	.byte	145,120
	.word	0,.L194-.L9
	.half	2
	.byte	145,120
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_Trap_internalProtectionError')
	.sect	'.debug_loc'
.L6:
	.word	-1,.L7,0,.L184-.L7
	.half	2
	.byte	138,0
	.word	.L184-.L7,.L180-.L7
	.half	2
	.byte	138,8
	.word	.L180-.L7,.L180-.L7
	.half	2
	.byte	138,0
	.word	0,0
.L193:
	.word	-1,.L7,.L359-.L7,.L192-.L7
	.half	1
	.byte	95
	.word	.L5-.L7,.L357-.L7
	.half	1
	.byte	95
	.word	0,0
.L190:
	.word	-1,.L7,.L5-.L7,.L147-.L7
	.half	1
	.byte	111
	.word	.L360-.L7,.L180-.L7
	.half	1
	.byte	111
	.word	0,0
.L187:
	.word	0,0
.L181:
	.word	-1,.L7,.L5-.L7,.L147-.L7
	.half	1
	.byte	84
	.word	0,.L180-.L7
	.half	1
	.byte	84
	.word	0,0
.L186:
	.word	0,0
.L188:
	.word	-1,.L7,.L5-.L7,.L147-.L7
	.half	2
	.byte	144,32
	.word	.L189-.L7,.L361-.L7
	.half	2
	.byte	144,32
	.word	0,0
.L183:
	.word	-1,.L7,.L5-.L7,.L147-.L7
	.half	2
	.byte	145,120
	.word	0,.L180-.L7
	.half	2
	.byte	145,120
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_Trap_memoryManagementError')
	.sect	'.debug_loc'
.L2:
	.word	-1,.L3,0,.L159-.L3
	.half	2
	.byte	138,0
	.word	.L159-.L3,.L153-.L3
	.half	2
	.byte	138,8
	.word	.L153-.L3,.L153-.L3
	.half	2
	.byte	138,0
	.word	0,0
.L179:
	.word	-1,.L3,.L356-.L3,.L175-.L3
	.half	1
	.byte	95
	.word	.L5-.L3,.L357-.L3
	.half	1
	.byte	95
	.word	0,0
.L172:
	.word	-1,.L3,.L355-.L3,.L175-.L3
	.half	1
	.byte	111
	.word	.L5-.L3,.L147-.L3
	.half	1
	.byte	111
	.word	.L160-.L3,.L153-.L3
	.half	1
	.byte	111
	.word	0,0
.L164:
	.word	0,0
.L155:
	.word	-1,.L3,0,.L175-.L3
	.half	1
	.byte	84
	.word	.L5-.L3,.L147-.L3
	.half	1
	.byte	84
	.word	.L160-.L3,.L153-.L3
	.half	1
	.byte	84
	.word	0,0
.L162:
	.word	0,0
.L167:
	.word	-1,.L3,.L169-.L3,.L175-.L3
	.half	2
	.byte	144,32
	.word	.L5-.L3,.L147-.L3
	.half	2
	.byte	144,32
	.word	.L160-.L3,.L358-.L3
	.half	2
	.byte	144,32
	.word	0,0
.L157:
	.word	-1,.L3,0,.L175-.L3
	.half	2
	.byte	145,120
	.word	.L5-.L3,.L147-.L3
	.half	2
	.byte	145,120
	.word	.L160-.L3,.L153-.L3
	.half	2
	.byte	145,120
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_Trap_nonMaskableInterrupt')
	.sect	'.debug_loc'
.L30:
	.word	-1,.L31,0,.L339-.L31
	.half	2
	.byte	138,0
	.word	.L339-.L31,.L335-.L31
	.half	2
	.byte	138,8
	.word	.L335-.L31,.L335-.L31
	.half	2
	.byte	138,0
	.word	0,0
.L348:
	.word	-1,.L31,.L392-.L31,.L347-.L31
	.half	1
	.byte	95
	.word	.L5-.L31,.L357-.L31
	.half	1
	.byte	95
	.word	0,0
.L345:
	.word	-1,.L31,.L5-.L31,.L147-.L31
	.half	1
	.byte	111
	.word	.L393-.L31,.L335-.L31
	.half	1
	.byte	111
	.word	0,0
.L342:
	.word	0,0
.L336:
	.word	-1,.L31,.L5-.L31,.L147-.L31
	.half	1
	.byte	84
	.word	0,.L335-.L31
	.half	1
	.byte	84
	.word	0,0
.L341:
	.word	0,0
.L343:
	.word	-1,.L31,.L5-.L31,.L147-.L31
	.half	2
	.byte	144,32
	.word	.L344-.L31,.L394-.L31
	.half	2
	.byte	144,32
	.word	0,0
.L338:
	.word	-1,.L31,.L5-.L31,.L147-.L31
	.half	2
	.byte	145,120
	.word	0,.L335-.L31
	.half	2
	.byte	145,120
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_Trap_systemCall_Cpu0')
	.sect	'.debug_loc'
.L16:
	.word	-1,.L17,0,.L254-.L17
	.half	2
	.byte	138,0
	.word	.L254-.L17,.L250-.L17
	.half	2
	.byte	138,8
	.word	.L250-.L17,.L250-.L17
	.half	2
	.byte	138,0
	.word	0,0
.L264:
	.word	-1,.L17,.L375-.L17,.L152-.L17
	.half	1
	.byte	95
	.word	.L5-.L17,.L357-.L17
	.half	1
	.byte	95
	.word	0,0
.L261:
	.word	-1,.L17,.L374-.L17,.L262-.L17
	.half	1
	.byte	111
	.word	.L19-.L17,.L152-.L17
	.half	1
	.byte	111
	.word	.L5-.L17,.L147-.L17
	.half	1
	.byte	111
	.word	.L263-.L17,.L250-.L17
	.half	1
	.byte	111
	.word	0,0
.L257:
	.word	0,0
.L251:
	.word	-1,.L17,0,.L262-.L17
	.half	1
	.byte	84
	.word	.L19-.L17,.L152-.L17
	.half	1
	.byte	84
	.word	.L5-.L17,.L147-.L17
	.half	1
	.byte	84
	.word	.L263-.L17,.L250-.L17
	.half	1
	.byte	84
	.word	0,0
.L256:
	.word	0,0
.L259:
	.word	-1,.L17,.L375-.L17,.L152-.L17
	.half	2
	.byte	144,32
	.word	.L5-.L17,.L147-.L17
	.half	2
	.byte	144,32
	.word	.L263-.L17,.L376-.L17
	.half	2
	.byte	144,32
	.word	0,0
.L253:
	.word	-1,.L17,0,.L262-.L17
	.half	2
	.byte	145,120
	.word	.L19-.L17,.L152-.L17
	.half	2
	.byte	145,120
	.word	.L5-.L17,.L147-.L17
	.half	2
	.byte	145,120
	.word	.L263-.L17,.L250-.L17
	.half	2
	.byte	145,120
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_Trap_systemCall_Cpu1')
	.sect	'.debug_loc'
.L20:
	.word	-1,.L21,0,.L269-.L21
	.half	2
	.byte	138,0
	.word	.L269-.L21,.L265-.L21
	.half	2
	.byte	138,8
	.word	.L265-.L21,.L265-.L21
	.half	2
	.byte	138,0
	.word	0,0
.L278:
	.word	-1,.L21,.L377-.L21,.L277-.L21
	.half	1
	.byte	95
	.word	.L5-.L21,.L357-.L21
	.half	1
	.byte	95
	.word	0,0
.L275:
	.word	-1,.L21,.L19-.L21,.L152-.L21
	.half	1
	.byte	111
	.word	.L5-.L21,.L147-.L21
	.half	1
	.byte	111
	.word	.L378-.L21,.L265-.L21
	.half	1
	.byte	111
	.word	0,0
.L272:
	.word	0,0
.L266:
	.word	-1,.L21,.L19-.L21,.L152-.L21
	.half	1
	.byte	84
	.word	.L5-.L21,.L147-.L21
	.half	1
	.byte	84
	.word	0,.L265-.L21
	.half	1
	.byte	84
	.word	0,0
.L271:
	.word	0,0
.L273:
	.word	-1,.L21,.L375-.L21,.L152-.L21
	.half	2
	.byte	144,32
	.word	.L5-.L21,.L147-.L21
	.half	2
	.byte	144,32
	.word	.L276-.L21,.L379-.L21
	.half	2
	.byte	144,32
	.word	0,0
.L268:
	.word	-1,.L21,.L19-.L21,.L152-.L21
	.half	2
	.byte	145,120
	.word	.L5-.L21,.L147-.L21
	.half	2
	.byte	145,120
	.word	0,.L265-.L21
	.half	2
	.byte	145,120
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_Trap_systemCall_Cpu2')
	.sect	'.debug_loc'
.L22:
	.word	-1,.L23,0,.L283-.L23
	.half	2
	.byte	138,0
	.word	.L283-.L23,.L279-.L23
	.half	2
	.byte	138,8
	.word	.L279-.L23,.L279-.L23
	.half	2
	.byte	138,0
	.word	0,0
.L292:
	.word	-1,.L23,.L380-.L23,.L291-.L23
	.half	1
	.byte	95
	.word	.L5-.L23,.L357-.L23
	.half	1
	.byte	95
	.word	0,0
.L289:
	.word	-1,.L23,.L19-.L23,.L152-.L23
	.half	1
	.byte	111
	.word	.L5-.L23,.L147-.L23
	.half	1
	.byte	111
	.word	.L381-.L23,.L279-.L23
	.half	1
	.byte	111
	.word	0,0
.L286:
	.word	0,0
.L280:
	.word	-1,.L23,.L19-.L23,.L152-.L23
	.half	1
	.byte	84
	.word	.L5-.L23,.L147-.L23
	.half	1
	.byte	84
	.word	0,.L279-.L23
	.half	1
	.byte	84
	.word	0,0
.L285:
	.word	0,0
.L287:
	.word	-1,.L23,.L375-.L23,.L152-.L23
	.half	2
	.byte	144,32
	.word	.L5-.L23,.L147-.L23
	.half	2
	.byte	144,32
	.word	.L290-.L23,.L382-.L23
	.half	2
	.byte	144,32
	.word	0,0
.L282:
	.word	-1,.L23,.L19-.L23,.L152-.L23
	.half	2
	.byte	145,120
	.word	.L5-.L23,.L147-.L23
	.half	2
	.byte	145,120
	.word	0,.L279-.L23
	.half	2
	.byte	145,120
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_Trap_systemCall_Cpu3')
	.sect	'.debug_loc'
.L24:
	.word	-1,.L25,0,.L297-.L25
	.half	2
	.byte	138,0
	.word	.L297-.L25,.L293-.L25
	.half	2
	.byte	138,8
	.word	.L293-.L25,.L293-.L25
	.half	2
	.byte	138,0
	.word	0,0
.L306:
	.word	-1,.L25,.L383-.L25,.L305-.L25
	.half	1
	.byte	95
	.word	.L5-.L25,.L357-.L25
	.half	1
	.byte	95
	.word	0,0
.L303:
	.word	-1,.L25,.L19-.L25,.L152-.L25
	.half	1
	.byte	111
	.word	.L5-.L25,.L147-.L25
	.half	1
	.byte	111
	.word	.L384-.L25,.L293-.L25
	.half	1
	.byte	111
	.word	0,0
.L300:
	.word	0,0
.L294:
	.word	-1,.L25,.L19-.L25,.L152-.L25
	.half	1
	.byte	84
	.word	.L5-.L25,.L147-.L25
	.half	1
	.byte	84
	.word	0,.L293-.L25
	.half	1
	.byte	84
	.word	0,0
.L299:
	.word	0,0
.L301:
	.word	-1,.L25,.L375-.L25,.L152-.L25
	.half	2
	.byte	144,32
	.word	.L5-.L25,.L147-.L25
	.half	2
	.byte	144,32
	.word	.L304-.L25,.L385-.L25
	.half	2
	.byte	144,32
	.word	0,0
.L296:
	.word	-1,.L25,.L19-.L25,.L152-.L25
	.half	2
	.byte	145,120
	.word	.L5-.L25,.L147-.L25
	.half	2
	.byte	145,120
	.word	0,.L293-.L25
	.half	2
	.byte	145,120
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_Trap_systemCall_Cpu4')
	.sect	'.debug_loc'
.L26:
	.word	-1,.L27,0,.L311-.L27
	.half	2
	.byte	138,0
	.word	.L311-.L27,.L307-.L27
	.half	2
	.byte	138,8
	.word	.L307-.L27,.L307-.L27
	.half	2
	.byte	138,0
	.word	0,0
.L320:
	.word	-1,.L27,.L386-.L27,.L319-.L27
	.half	1
	.byte	95
	.word	.L5-.L27,.L357-.L27
	.half	1
	.byte	95
	.word	0,0
.L317:
	.word	-1,.L27,.L19-.L27,.L152-.L27
	.half	1
	.byte	111
	.word	.L5-.L27,.L147-.L27
	.half	1
	.byte	111
	.word	.L387-.L27,.L307-.L27
	.half	1
	.byte	111
	.word	0,0
.L314:
	.word	0,0
.L308:
	.word	-1,.L27,.L19-.L27,.L152-.L27
	.half	1
	.byte	84
	.word	.L5-.L27,.L147-.L27
	.half	1
	.byte	84
	.word	0,.L307-.L27
	.half	1
	.byte	84
	.word	0,0
.L313:
	.word	0,0
.L315:
	.word	-1,.L27,.L375-.L27,.L152-.L27
	.half	2
	.byte	144,32
	.word	.L5-.L27,.L147-.L27
	.half	2
	.byte	144,32
	.word	.L318-.L27,.L388-.L27
	.half	2
	.byte	144,32
	.word	0,0
.L310:
	.word	-1,.L27,.L19-.L27,.L152-.L27
	.half	2
	.byte	145,120
	.word	.L5-.L27,.L147-.L27
	.half	2
	.byte	145,120
	.word	0,.L307-.L27
	.half	2
	.byte	145,120
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_Trap_systemCall_Cpu5')
	.sect	'.debug_loc'
.L28:
	.word	-1,.L29,0,.L325-.L29
	.half	2
	.byte	138,0
	.word	.L325-.L29,.L321-.L29
	.half	2
	.byte	138,8
	.word	.L321-.L29,.L321-.L29
	.half	2
	.byte	138,0
	.word	0,0
.L334:
	.word	-1,.L29,.L389-.L29,.L333-.L29
	.half	1
	.byte	95
	.word	.L5-.L29,.L357-.L29
	.half	1
	.byte	95
	.word	0,0
.L331:
	.word	-1,.L29,.L19-.L29,.L152-.L29
	.half	1
	.byte	111
	.word	.L5-.L29,.L147-.L29
	.half	1
	.byte	111
	.word	.L390-.L29,.L321-.L29
	.half	1
	.byte	111
	.word	0,0
.L328:
	.word	0,0
.L322:
	.word	-1,.L29,.L19-.L29,.L152-.L29
	.half	1
	.byte	84
	.word	.L5-.L29,.L147-.L29
	.half	1
	.byte	84
	.word	0,.L321-.L29
	.half	1
	.byte	84
	.word	0,0
.L327:
	.word	0,0
.L329:
	.word	-1,.L29,.L375-.L29,.L152-.L29
	.half	2
	.byte	144,32
	.word	.L5-.L29,.L147-.L29
	.half	2
	.byte	144,32
	.word	.L332-.L29,.L391-.L29
	.half	2
	.byte	144,32
	.word	0,0
.L324:
	.word	-1,.L29,.L19-.L29,.L152-.L29
	.half	2
	.byte	145,120
	.word	.L5-.L29,.L147-.L29
	.half	2
	.byte	145,120
	.word	0,.L321-.L29
	.half	2
	.byte	145,120
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_Trap_vectorTable0')
	.sect	'.debug_loc'
.L32:
	.word	-1,.L33,0,.L349-.L33
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_Trap_vectorTable1')
	.sect	'.debug_loc'
.L34:
	.word	-1,.L35,0,.L350-.L35
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_Trap_vectorTable2')
	.sect	'.debug_loc'
.L36:
	.word	-1,.L37,0,.L351-.L37
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_Trap_vectorTable3')
	.sect	'.debug_loc'
.L38:
	.word	-1,.L39,0,.L352-.L39
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_Trap_vectorTable4')
	.sect	'.debug_loc'
.L40:
	.word	-1,.L41,0,.L353-.L41
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_Trap_vectorTable5')
	.sect	'.debug_loc'
.L42:
	.word	-1,.L43,0,.L354-.L43
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L579:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_Trap_memoryManagementError')
	.sect	'.debug_frame'
	.word	48
	.word	.L579,.L3,.L153-.L3
	.byte	8,18,8,19,8,20,8,21,8,22,8,23,4
	.word	(.L159-.L3)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L153-.L159)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_Trap_internalProtectionError')
	.sect	'.debug_frame'
	.word	48
	.word	.L579,.L7,.L180-.L7
	.byte	8,18,8,19,8,20,8,21,8,22,8,23,4
	.word	(.L184-.L7)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L180-.L184)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_Trap_instructionError')
	.sect	'.debug_frame'
	.word	48
	.word	.L579,.L9,.L194-.L9
	.byte	8,18,8,19,8,20,8,21,8,22,8,23,4
	.word	(.L198-.L9)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L194-.L198)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_Trap_contextManagementError')
	.sect	'.debug_frame'
	.word	48
	.word	.L579,.L11,.L208-.L11
	.byte	8,18,8,19,8,20,8,21,8,22,8,23,4
	.word	(.L212-.L11)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L208-.L212)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_Trap_busError')
	.sect	'.debug_frame'
	.word	48
	.word	.L579,.L13,.L222-.L13
	.byte	8,18,8,19,8,20,8,21,8,22,8,23,4
	.word	(.L226-.L13)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L222-.L226)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_Trap_assertion')
	.sect	'.debug_frame'
	.word	48
	.word	.L579,.L15,.L236-.L15
	.byte	8,18,8,19,8,20,8,21,8,22,8,23,4
	.word	(.L240-.L15)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L236-.L240)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_Trap_systemCall_Cpu0')
	.sect	'.debug_frame'
	.word	48
	.word	.L579,.L17,.L250-.L17
	.byte	8,18,8,19,8,20,8,21,8,22,8,23,4
	.word	(.L254-.L17)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L250-.L254)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_Trap_systemCall_Cpu1')
	.sect	'.debug_frame'
	.word	48
	.word	.L579,.L21,.L265-.L21
	.byte	8,18,8,19,8,20,8,21,8,22,8,23,4
	.word	(.L269-.L21)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L265-.L269)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_Trap_systemCall_Cpu2')
	.sect	'.debug_frame'
	.word	48
	.word	.L579,.L23,.L279-.L23
	.byte	8,18,8,19,8,20,8,21,8,22,8,23,4
	.word	(.L283-.L23)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L279-.L283)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_Trap_systemCall_Cpu3')
	.sect	'.debug_frame'
	.word	48
	.word	.L579,.L25,.L293-.L25
	.byte	8,18,8,19,8,20,8,21,8,22,8,23,4
	.word	(.L297-.L25)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L293-.L297)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_Trap_systemCall_Cpu4')
	.sect	'.debug_frame'
	.word	48
	.word	.L579,.L27,.L307-.L27
	.byte	8,18,8,19,8,20,8,21,8,22,8,23,4
	.word	(.L311-.L27)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L307-.L311)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_Trap_systemCall_Cpu5')
	.sect	'.debug_frame'
	.word	48
	.word	.L579,.L29,.L321-.L29
	.byte	8,18,8,19,8,20,8,21,8,22,8,23,4
	.word	(.L325-.L29)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L321-.L325)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_Trap_nonMaskableInterrupt')
	.sect	'.debug_frame'
	.word	48
	.word	.L579,.L31,.L335-.L31
	.byte	8,18,8,19,8,20,8,21,8,22,8,23,4
	.word	(.L339-.L31)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L335-.L339)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_Trap_vectorTable0')
	.sect	'.debug_frame'
	.word	24
	.word	.L579,.L33,.L349-.L33
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_Trap_vectorTable1')
	.sect	'.debug_frame'
	.word	24
	.word	.L579,.L35,.L350-.L35
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_Trap_vectorTable2')
	.sect	'.debug_frame'
	.word	24
	.word	.L579,.L37,.L351-.L37
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_Trap_vectorTable3')
	.sect	'.debug_frame'
	.word	24
	.word	.L579,.L39,.L352-.L39
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_Trap_vectorTable4')
	.sect	'.debug_frame'
	.word	24
	.word	.L579,.L41,.L353-.L41
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_Trap_vectorTable5')
	.sect	'.debug_frame'
	.word	24
	.word	.L579,.L43,.L354-.L43
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L580:
	.word	52
	.word	-1
	.byte	3,0,2,1,40,12,26,0,9,40,27,155,0,7,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36
	.byte	8,37,8,38,8,39,0
	.sdecl	'.debug_frame',debug,cluster('.cocofun_2')
	.sect	'.debug_frame'
	.word	24
	.word	.L580,.L5,.L147-.L5
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_3')
	.sect	'.debug_frame'
	.word	24
	.word	.L580,.L19,.L152-.L19
	.byte	8,18,8,19,8,20,8,21,8,22,8,23

; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   452  
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   453  
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   454  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   455  
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   456  #if defined(__HIGHTEC__)
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   457  #pragma section
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   458  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   459  #if defined(__DCC__)
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   460  #pragma section
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   461  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   462  #if defined(__DCC__)
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   463  #pragma interrupt IfxInterruptEx
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   464  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   465  #if defined(__TASKING__)
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   466  #pragma endprotect
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   467  #endif
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   468  #if defined(__ghs__)
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   469  #pragma ghs section
; ..\0_Src\4_McHal\Tricore\Cpu\Trap\IfxCpu_Trap.c	   470  #endif

	; Module end
